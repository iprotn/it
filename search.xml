<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Rclone迁移数据到MinIO</title>
      <link href="/2023/01/06/%E4%BD%BF%E7%94%A8rclone%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E5%88%B0minio/"/>
      <url>/2023/01/06/%E4%BD%BF%E7%94%A8rclone%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E5%88%B0minio/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统：CentOS</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>部署好MinIO服务之后，将旧数据迁移至MioIO是个问题，MinIO兼容支持亚马逊S3协议，正是这一点Rclone这一工具也支持亚马逊S3协议，用Rclone来迁移再好不过了</p><h2 id="迁移准备"><a href="#迁移准备" class="headerlink" title="迁移准备"></a>迁移准备</h2><ol><li>安装Rclone，查看文章：<a href="https://www.itze.cn/linux/1108.html" title="CentOS安装Rclone">CentOS安装Rclone</a></li><li>在MinIO创建好需要用的“桶”</li></ol><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h4 id="Rclone配置文件"><a href="#Rclone配置文件" class="headerlink" title="Rclone配置文件"></a>Rclone配置文件</h4><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /root/.config/rclone/rclone.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[minio]</span><br><span class="line">type = s3</span><br><span class="line">env_auth = false</span><br><span class="line">provider = Minio</span><br><span class="line">access_key_id = adc </span><br><span class="line">secret_access_key = 123</span><br><span class="line">region =</span><br><span class="line">endpoint = http://127.0.0.1:9000</span><br></pre></td></tr></table></figure><p><strong>配置稍微解释一下</strong> [minio] <strong># 随便自定义，但是下面要用到</strong> type &#x3D; s3 <strong># s3 固定</strong> env_auth &#x3D; false <strong># 加不加都行</strong> provider &#x3D; Minio <strong># 加不加都行，不加就是空字符串</strong> access_key_id &#x3D; adc <strong># MinIO生成的acess key！注意: 不是登录控制台的用户名和密码！！！！</strong> secret_access_key &#x3D; 123 <strong># MinIO生成的access key对应的 secret key！注意: 不是登录控制台的用户名和密码！！！！</strong> region &#x3D; endpoint &#x3D; <a href="http://127.0.0.1:9000/">http://127.0.0.1:9000</a> <strong># MinIO API地址！能访问内网的情况下建议使用内网！效率高！注意：不是控制台地址！！！</strong></p><h4 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h4><p>Rclone命令，测试一下是否能链接上MinIO 列出MinIO中所有的“桶”,（bucket信息）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rclone lsd minio</span><br></pre></td></tr></table></figure><h4 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h4><p>如果有个bucket桶的名字是：file，假如将&#x2F;root&#x2F;data&#x2F;下的所有文件迁移到MinIO的file桶下，命令如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rclone sync /root/data minio:file</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rclone </category>
          
          <category> MinIO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rclone </tag>
            
            <tag> MinIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装Rclone</title>
      <link href="/2023/01/06/centos%E5%AE%89%E8%A3%85rclone/"/>
      <url>/2023/01/06/centos%E5%AE%89%E8%A3%85rclone/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统：CentOS 7</p><h3 id="在线安装命令"><a href="#在线安装命令" class="headerlink" title="在线安装命令"></a>在线安装命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://rclone.org/install.sh  sudo bash</span><br></pre></td></tr></table></figure><h3 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rclone config</span><br></pre></td></tr></table></figure><p>#按照提示输入相应配置，不知道就随便输入后面可以改，生成的文件路径：&#x2F;root&#x2F;.config&#x2F;rclone&#x2F;rclone.conf</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rclone --version</span><br></pre></td></tr></table></figure><p>出现版本号即可</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>据网上有些文章说在线安装需要翻墙，由于测试服务器在香港地区所以不确定是否真的需要翻墙，如果你的机器使用本方法不通，尝试翻墙</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Rclone </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> Rclone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MinIO设置永久分享链接</title>
      <link href="/2023/01/06/minio%E8%AE%BE%E7%BD%AE%E6%B0%B8%E4%B9%85%E5%88%86%E4%BA%AB%E9%93%BE%E6%8E%A5/"/>
      <url>/2023/01/06/minio%E8%AE%BE%E7%BD%AE%E6%B0%B8%E4%B9%85%E5%88%86%E4%BA%AB%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>MinIO官方规定，分享链接最长时间只能是7天</strong> <strong>其实所谓的永久分享链接，大家想一下，永久分享和公开没什么两样</strong></p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>在MinIO中引入了“桶”的概念，默认创建桶的权限是<strong>private</strong>私有的，也就是桶内的文件是不允许外界直接访问的， 所谓设置永久分享链接就是将创建的桶的权限设置公开：public即可，就可以实现通过：地址&#x2F;桶名称&#x2F;文件名直接访问，比如访问的是图片，假如：<a href="https://minio.itze.cn/image/logo.png">https://minio.itze.cn/image/logo.png</a> 地址放到浏览器即可直接访问</p><h4 id="设置“桶”为公开，如图设置即可"><a href="#设置“桶”为公开，如图设置即可" class="headerlink" title="设置“桶”为公开，如图设置即可"></a>设置“桶”为公开，如图设置即可</h4><p><a href="https://www.itze.cn/wp-content/uploads/2023/01/wp_editor_md_adccb821d4b21ca7159bb4abad361f79.jpg"><img src="https://www.itze.cn/wp-content/uploads/2023/01/wp_editor_md_adccb821d4b21ca7159bb4abad361f79.jpg"></a> <a href="https://www.itze.cn/wp-content/uploads/2023/01/wp_editor_md_8c93b23cea81858814fd5c46f3aa467d.jpg"><img src="https://www.itze.cn/wp-content/uploads/2023/01/wp_editor_md_8c93b23cea81858814fd5c46f3aa467d.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> MinIO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MinIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MinIO+Nginx开启https域名访问</title>
      <link href="/2023/01/06/minionginx%E5%BC%80%E5%90%AFhttps%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/"/>
      <url>/2023/01/06/minionginx%E5%BC%80%E5%90%AFhttps%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="前言：按照文章顺序操作，踩过的坑都避开了！"><a href="#前言：按照文章顺序操作，踩过的坑都避开了！" class="headerlink" title="前言：按照文章顺序操作，踩过的坑都避开了！"></a>前言：按照文章顺序操作，踩过的坑都避开了！</h2><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>文章建立在MinIO服务是通过Docker容器创建</li><li>假设本文以下使用域名：minio.itze.cn</li><li>假设服务器IP：123.123.123.123</li></ul><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><h4 id="1-将域名解析到服务器IP"><a href="#1-将域名解析到服务器IP" class="headerlink" title="1.将域名解析到服务器IP"></a>1.将域名解析到服务器IP</h4><p>查看解析成功示例，windows下使用命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping minio.itze.cn -t</span><br></pre></td></tr></table></figure><p><a href="https://www.itze.cn/wp-content/uploads/2023/01/wp_editor_md_a255e56cdd4659847f8927c8c9fd0156.jpg"><img src="https://www.itze.cn/wp-content/uploads/2023/01/wp_editor_md_a255e56cdd4659847f8927c8c9fd0156.jpg"></a> <strong>出现如上图所示，说明域名已经解析到对应的IP地址，会有人问：去哪里添加解析，答：去购买域名的厂商控制台，比如你的域名是阿里云注册的，就登陆阿里云控制台有相关解析操作流程</strong></p><h4 id="2-申请域名对应的SSL免费证书，PS：资金富裕的直接付费买"><a href="#2-申请域名对应的SSL免费证书，PS：资金富裕的直接付费买" class="headerlink" title="2.申请域名对应的SSL免费证书，PS：资金富裕的直接付费买"></a>2.申请域名对应的SSL免费证书，PS：资金富裕的直接付费买</h4><p>这里提供一个申请免费的地址，每次申请有效期1年，<a href="https://console.cloud.tencent.com/ssl" title="https://console.cloud.tencent.com/ssl">https://console.cloud.tencent.com/ssl</a> 申请SSL注意事项：按照提示，需要有验证域名是你的操作，一般两种方式，1.DNS，2.文件，建议使用推荐的方法添加一条解析即可，一般十几分钟就能颁发证书，<strong>证书颁发后选择-下载-Nginx</strong></p><h3 id="nginx反向代理MinIO-API地址并配置https"><a href="#nginx反向代理MinIO-API地址并配置https" class="headerlink" title="nginx反向代理MinIO API地址并配置https"></a>nginx反向代理MinIO API地址并配置https</h3><p>这里利用到了Nginx的<strong>反向代理</strong>，配置文件如下，建议不要改动原来的<strong>nginx.conf</strong>文件，另外再单独创建一个<strong>nginx_minio.conf</strong>文件在默认的<strong>nginx.conf</strong>文件中加入一句话,位置放到**http{}**块中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">include /你的nginx_minio.conf的路径/*.conf;</span><br></pre></td></tr></table></figure><p><strong>nginx_minio.conf</strong> 配置完整内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">itze.cn ProxyStart</span></span><br><span class="line">upstream minio &#123;</span><br><span class="line">    server 127.0.0.1:9000 fail_timeout=0;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">     listen 443 ssl;</span><br><span class="line">     server_name minio.itze.cn;</span><br><span class="line"></span><br><span class="line">    ssl_certificate     ./cert/你的.crt; #这里换成你的证书上传的位置 </span><br><span class="line">     ssl_certificate_key ./cert/你的.key; #这里换成你的证书上传的位置</span><br><span class="line">     ssl_session_timeout 5m;</span><br><span class="line">     ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">     ssl_prefer_server_ciphers on;   </span><br><span class="line">     client_max_body_size   30m; #最大上传限制         </span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        proxy_pass   https://minio;</span><br><span class="line"></span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto https;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_connect_timeout      310;</span><br><span class="line">        proxy_send_timeout         310;</span><br><span class="line">        proxy_read_timeout         310;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    #异常状态码跳转</span><br><span class="line">    error_page  307   https://www.itze.cn;</span><br><span class="line">    error_page  400   https://www.itze.cn;</span><br><span class="line">    error_page  403   https://www.itze.cn;</span><br><span class="line">    error_page  404   https://www.itze.cn;</span><br><span class="line">    error_page  500   https://www.itze.cn;</span><br><span class="line">    error_page  502   https://www.itze.cn;</span><br><span class="line"></span><br><span class="line">&#125;   </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">itze.cn ProxyEnd</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">http forced jump https http强制跳转https配置</span></span><br><span class="line">server&#123;  </span><br><span class="line">    listen 80;</span><br><span class="line">    server_name minio.itze.com;</span><br><span class="line">    rewrite ^(.*)$  https://minio.itze.com;</span><br><span class="line">    location ~ / &#123;</span><br><span class="line">    index index.html index.php index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h3 id="MinIO-配置https"><a href="#MinIO-配置https" class="headerlink" title="MinIO 配置https"></a>MinIO 配置https</h3><h4 id="1-证书准备"><a href="#1-证书准备" class="headerlink" title="1.证书准备"></a>1.证书准备</h4><p>将申请的SSL证书 .key结尾的重命名为：private.key和 .crt结尾的重命名为：public.crt 别问为什么，官方规定，不信自己看官方文档：<a href="https://min.io/docs/minio/linux/operations/network-encryption.html?ref=docs-redirect" title="https://min.io/docs/minio/linux/operations/network-encryption.html?ref=docs-redirect">https://min.io/docs/minio/linux/operations/network-encryption.html?ref=docs-redirect</a> 然后将private.key和public.crt两个文件放到MinIO目录certs下面：&#x2F;你的minio目录&#x2F;config&#x2F;certs，算了还是上个图吧 <a href="https://www.itze.cn/wp-content/uploads/2023/01/wp_editor_md_bfac25e2b2db37fc9519b538b67aaf3e.jpg"><img src="https://www.itze.cn/wp-content/uploads/2023/01/wp_editor_md_bfac25e2b2db37fc9519b538b67aaf3e.jpg"></a></p><h4 id="2-容器更改"><a href="#2-容器更改" class="headerlink" title="2.容器更改"></a>2.容器更改</h4><p>创建容器命令更改为以下，注意，如果原来路径下有文件存在，把原来的minio容器删掉重新创建不会有影响！</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9000:9000 -p 50000:50000 --name minio \</span><br><span class="line">-e &quot;MINIO_ROOT_USER=admin&quot; \</span><br><span class="line">-e &quot;MINIO_ROOT_PASSWORD=123456&quot; \</span><br><span class="line">-e &quot;MINIO_SERVER_URL=https://minio.itze.cn  &quot; \</span><br><span class="line">-v /root/minio/data:/data \</span><br><span class="line">-v /root/minio/config:/root/.minio \</span><br><span class="line">minio/minio server  /data --console-address &quot;:50000&quot; -address &quot;:9000&quot;</span><br></pre></td></tr></table></figure><p>命令解释看文章：<a href="https://www.itze.cn/minio/1096.html" title="Docker部署MinIO">Docker部署MinIO</a></p><h4 id="3-访问"><a href="#3-访问" class="headerlink" title="3.访问"></a>3.访问</h4><p>控制台访问地址：<a href="https://minio.itze.cn:50000/">https://minio.itze.cn:50000</a> API访问地址：<a href="https://minio.itze.cn/">https://minio.itze.cn</a> <strong>注意：这里如果直接访问API的访问地址，MinIO会307默认跳转到控制台页面，控制台登录页面我们当然不想让外部知道，上面的nginx_minio.conf已经做了错误页面配置，如果你的不生效，请检查nginx的默认配置文件nginx.conf中有没有以下一句话：同样放到http{}块中即可，记得重启nginx服务</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">proxy_intercept_errors on;</span><br></pre></td></tr></table></figure><h3 id="重点注意事项"><a href="#重点注意事项" class="headerlink" title="重点注意事项"></a>重点注意事项</h3><p>这里稍微解释一个命令：-e “MINIO_SERVER_URL&#x3D;<a href="https://minio.itze.cn/">https://minio.itze.cn</a> “ 这也是上面nginx里面为什么会那样配置的原因 这个地址是MioIO API访问请求的地址，这里创建容器时是什么，无论在MinIO控制台或者是通过API代码分享的文件链接的前缀就是这个！，这里为什么我们直接写成了域名，而不是网上大部分说的IP+端口号，原因就是文章上面的<strong>nginx_minio.conf</strong>已经做了反向代理，访问<strong><a href="https://minio.itze.cn/">https://minio.itze.cn</a></strong> 就等于访问 <strong><a href="https://123.123.123.123:9000/">https://123.123.123.123:9000</a></strong> 明白了吗 但是如果浏览器直接访问后面这个IP+端口的浏览器会报SSL证书不安全，因为我们签发证书是对<strong>minio.itze.cn</strong>这个域名主题 <strong>MINIO_SERVER_URL等于什么下面分享链接的红色字体就是什么，如果你用的是服务器的外网域名+端口，下面就是IP:端口号，如果硬是改成域名访问会报错</strong> <a href="https://www.itze.cn/wp-content/uploads/2023/01/wp_editor_md_9074d25354fb26b00d511447d6f8f2fa.jpg"><img src="https://www.itze.cn/wp-content/uploads/2023/01/wp_editor_md_9074d25354fb26b00d511447d6f8f2fa.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> MinIO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> MinIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署MinIO</title>
      <link href="/2023/01/06/docker%E5%AE%89%E8%A3%85minio/"/>
      <url>/2023/01/06/docker%E5%AE%89%E8%A3%85minio/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统：CentOS 7 Docker版本：20.10.10</p><h4 id="1-搜索MinIO镜像"><a href="#1-搜索MinIO镜像" class="headerlink" title="1.搜索MinIO镜像"></a>1.搜索MinIO镜像</h4><p>选择第一个，minio&#x2F;minio,或者去<a href="http://hub.docker.com/" title="hub.docker.com">hub.docker.com</a>去搜索也可以</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search minio</span><br></pre></td></tr></table></figure><p><a href="https://www.itze.cn/wp-content/uploads/2023/01/wp_editor_md_5e8ceb4152e4270814dc74a52697766c.jpg"><img src="https://www.itze.cn/wp-content/uploads/2023/01/wp_editor_md_5e8ceb4152e4270814dc74a52697766c.jpg"></a></p><h4 id="2-拉取MinIO镜像"><a href="#2-拉取MinIO镜像" class="headerlink" title="2.拉取MinIO镜像"></a>2.拉取MinIO镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull minio/minio</span><br></pre></td></tr></table></figure><h4 id="3-创建容器"><a href="#3-创建容器" class="headerlink" title="3.创建容器"></a>3.创建容器</h4><p>创建容器之前先创建两个文件夹，用来映射，假设我在服务器创建的路径是:&#x2F;root&#x2F;data和、&#x2F;root&#x2F;config，创建容器的命令如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9000:9000 -p 50000:50000 --name minio \</span><br><span class="line">-e &quot;MINIO_ROOT_USER=admin&quot; \</span><br><span class="line">-e &quot;MINIO_ROOT_PASSWORD=123456&quot; \</span><br><span class="line">-e &quot;MINIO_SERVER_URL=http://127.0.0.1:9000  &quot; \</span><br><span class="line">-v /root/data:/data \</span><br><span class="line">-v /root/config:/root/.minio \</span><br><span class="line">minio/minio server  /data --console-address &quot;:50000&quot; -address &quot;:9000&quot;</span><br></pre></td></tr></table></figure><p>容器命令解释 稍微说一下 -d 后台运行 -p 9000:9000 #前面的9000是打开本机的9000端口映射docker容器中MinIO的9000端口 -e “MINIO_ROOT_USER&#x3D;admin” \ #用户名 -e “MINIO_ROOT_PASSWORD&#x3D;12345678” \ #密码 -e “MINIO_SERVER_URL&#x3D;<a href="http://127.0.0.1:9000/">http://127.0.0.1:9000</a> “ #指定API访问地址，可以不加默认127.0.0.1 -v &#x2F;dataBase&#x2F;minio&#x2F;data:&#x2F;data \ #挂载卷 -v &#x2F;dataBase&#x2F;minio&#x2F;config:&#x2F;root&#x2F;.minio \ #挂载卷 –console-address “:50000” #指定控制台端口为静态端口 -address “:9000” # API访问端口</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>1.映射的9000和50000端口，防火墙必须放行，可以查看文章：<a href="https://www.itze.cn/linux/468.html" title="CentOS 7 开启防火墙及开放指定端口">CentOS 7 开启防火墙及开放指定端口</a> 如果防火墙放行了之后还是端口不通，那就去服务器厂商的控制台去添加端口放行，比如你的服务器是阿里云的，就登陆阿里云控制台一般都会有</p><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p>控制台访问地址：<a href="http://ip:50000，IP换成你的服务器地址">http://ip:50000，IP换成你的服务器地址</a> API地址：<a href="http://ip:9000/">http://ip:9000</a></p>]]></content>
      
      
      <categories>
          
          <category> MinIO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> MinIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab prometheus占用磁盘过大</title>
      <link href="/2022/08/08/gitlab-prometheus%E5%8D%A0%E7%94%A8%E7%A3%81%E7%9B%98%E8%BF%87%E5%A4%A7/"/>
      <url>/2022/08/08/gitlab-prometheus%E5%8D%A0%E7%94%A8%E7%A3%81%E7%9B%98%E8%BF%87%E5%A4%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统：CentOS 7</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>私有化部署gitlab，后期发现磁盘占用过高，经过查询是gitlab中prometheus的data文件夹占用过大，据说这是prometheus的监控日志，我这里每天会产生大概80M左右的文件，默认是保留15天的</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>经过查阅，网上大致给出的都是两种方式 <strong>gitlab配置文件默认位置：&#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</strong></p><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>直接停止prometheus的监控，操作方法,找到配置文件中以下代码块，默认是注释掉的</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prometheus[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prometheus[<span class="string">&#x27;monitor_kubernetes&#x27;</span>] = <span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prometheus[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;gitlab-prometheus&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prometheus[<span class="string">&#x27;group&#x27;</span>] = <span class="string">&#x27;gitlab-prometheus&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prometheus[<span class="string">&#x27;uid&#x27;</span>] = nil</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prometheus[<span class="string">&#x27;gid&#x27;</span>] = nil</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prometheus[<span class="string">&#x27;shell&#x27;</span>] = <span class="string">&#x27;/bin/sh&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prometheus[<span class="string">&#x27;home&#x27;</span>] = <span class="string">&#x27;/var/opt/gitlab/prometheus&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prometheus[<span class="string">&#x27;log_directory&#x27;</span>] = <span class="string">&#x27;/var/log/gitlab/prometheus&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prometheus[<span class="string">&#x27;rules_files&#x27;</span>] = [<span class="string">&#x27;/var/opt/gitlab/prometheus/rules/*.rules&#x27;</span>]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prometheus[<span class="string">&#x27;scrape_interval&#x27;</span>] = 15</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prometheus[<span class="string">&#x27;scrape_timeout&#x27;</span>] = 15</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prometheus[<span class="string">&#x27;external_labels&#x27;</span>] = &#123; &#125;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prometheus[<span class="string">&#x27;env_directory&#x27;</span>] = <span class="string">&#x27;/opt/gitlab/etc/prometheus/env&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prometheus[<span class="string">&#x27;env&#x27;</span>] = &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="string">&#x27;SSL_CERT_DIR&#x27;</span> =&gt; <span class="string">&quot;/opt/gitlab/embedded/ssl/certs/&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2022/08/prometheus.png"> 将配置文件中的</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prometheus[<span class="string">&#x27;enable&#x27;</span>] = <span class="literal">true</span></span></span><br></pre></td></tr></table></figure><p>取消注释后修改为</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">prometheus[&#x27;enable&#x27;] = false</span><br></pre></td></tr></table></figure><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>修改gitlab默认存储天数，默认保留15天，超过这个天数的会自动删除，找到以下代码块，默认是全部被注释掉的，需要打开，截图展示是已经打开过的</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prometheus[<span class="string">&#x27;flags&#x27;</span>] = &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="string">&#x27;storage.tsdb.path&#x27;</span> =&gt; <span class="string">&quot;/var/opt/gitlab/prometheus/data&quot;</span>,<span class="comment">#默认储存路径，可修改</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="string">&#x27;storage.tsdb.retention.time&#x27;</span> =&gt; <span class="string">&quot;3d&quot;</span>,<span class="comment">#默认保留天数是15d,这里修改为3d,代表保留3天</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  <span class="string">&#x27;config.file&#x27;</span> =&gt; <span class="string">&quot;/var/opt/gitlab/prometheus/prometheus.yml&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2022/08/prometheus_flags.png"></p><h2 id="最后重新配置"><a href="#最后重新配置" class="headerlink" title="最后重新配置"></a>最后重新配置</h2><p>停止</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-ctl stop</span><br></pre></td></tr></table></figure><p>重新配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-ctl start</span><br></pre></td></tr></table></figure><p>我的博客即将同步至腾讯云开发者社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=3rv2fz93gikgk" title="https://cloud.tencent.com/developer/support-plan?invite_code=3rv2fz93gikgk">https://cloud.tencent.com/developer/support-plan?invite_code&#x3D;3rv2fz93gikgk</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> GitLab </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/21/hello-world/"/>
      <url>/2022/07/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>It is illegal to call this method if the current request is not in asynchron</title>
      <link href="/2022/07/08/it-is-illegal-to-call-this-method-if-the-current-request-is-not-in-asynchron/"/>
      <url>/2022/07/08/it-is-illegal-to-call-this-method-if-the-current-request-is-not-in-asynchron/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在使用切面+自定义注解实现日志记录时报的错</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>proceedingJoinPoint.getArgs()返回的数组中携带有Request或者Response对象，导致序列化异常</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>过滤掉之后再转换</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取传参信息</span></span><br><span class="line">Object[] args = proceedingJoinPoint.getArgs();</span><br><span class="line"><span class="comment">//过滤无法序列化</span></span><br><span class="line">Stream&lt;?&gt; stream = ArrayUtils.isEmpty(args) ? Stream.empty() : Arrays.stream(args);</span><br><span class="line">List&lt;Object&gt; logArgs = stream</span><br><span class="line">        .filter(arg -&gt; (!(arg <span class="keyword">instanceof</span> HttpServletRequest) &amp;&amp; !(arg <span class="keyword">instanceof</span> HttpServletResponse)))</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line"><span class="comment">//过滤后序列化无异常</span></span><br><span class="line"><span class="type">String</span> <span class="variable">requestParam</span> <span class="operator">=</span> JSON.toJSONString(logArgs);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GeoServer服务wms权限控制</title>
      <link href="/2022/07/06/geoserver%E6%9C%8D%E5%8A%A1wms%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
      <url>/2022/07/06/geoserver%E6%9C%8D%E5%8A%A1wms%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统：CentOS 7 Tomcat版本：8.5.x GeoServer版本：2.21</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>详细权限配置见文章：<a href="https://www.itze.cn/tomcat/1062.html" title="GeoServer服务访问权限控制">GeoServer服务访问权限控制</a></p><h3 id="wms服务验证调用"><a href="#wms服务验证调用" class="headerlink" title="wms服务验证调用"></a>wms服务验证调用</h3><ol><li>假如wms原始不加权限验证调用地址是：<a href="https://127.0.0.1:8080/geoserver/wms/_workspace/wms?service=WMS&amp;version=1.0&amp;request=GetMap&amp;layers=test%5C_layer&amp;styles=&amp;format=application/openlayers">https://127.0.0.1:8080/geoserver/wms\_workspace/wms?service=WMS&amp;version=1.0&amp;request=GetMap&amp;layers=test\_layer&amp;styles=&amp;format=application/openlayers</a></li><li>如果此时按照调用瓦片方式去调用，则地址是： <a href="https://127.0.0.1:8080/geoserver/wms/_workspace/wms?service=WMS&amp;version=1.0&amp;request=GetMap&amp;layers=test%5C_layer&amp;styles=&amp;format=application/openlayers?authkey=123456">https://127.0.0.1:8080/geoserver/wms\_workspace/wms?service=WMS&amp;version=1.0&amp;request=GetMap&amp;layers=test\_layer&amp;styles=&amp;format=application/openlayers?authkey=123456</a> 这种方式经过测试，接口验证地址是拿不到验证的key，geoserver会认为第一个问好：”?”后service是需要调用接口验证的传参</li></ol><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol><li>将验证的key信息放到&#x2F;wms第一个问号:”?”后面 请求地址如：<a href="https://127.0.0.1:8080/geoserver/wms/_workspace/wms?authkey=123456?service=WMS&amp;version=1.0&amp;request=GetMap&amp;layers=test%5C_layer&amp;styles=&amp;format=application/openlayers">https://127.0.0.1:8080/geoserver/wms\_workspace/wms?authkey=123456?service=WMS&amp;version=1.0&amp;request=GetMap&amp;layers=test\_layer&amp;styles=&amp;format=application/openlayers</a></li><li>但是这样会有一个问题，geoserver传参到验证接口会是：123456?service&#x3D;WMS 这个会连带第二个问号后面的service，这个时候就需要验证接口的方法接口参数时处理一下即可</li><li>或者哪位小伙伴有更好的处理wms通过webService方式加验证调用方法，可以邮箱滴滴我📫email：<a href="mailto:&#103;&#105;&#116;&#x6c;&#97;&#x62;&#64;&#49;&#x31;&#49;&#46;&#99;&#111;&#x6d;">&#103;&#105;&#116;&#x6c;&#97;&#x62;&#64;&#49;&#x31;&#49;&#46;&#99;&#111;&#x6d;</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> GeoServer </category>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GeoServer </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GeoServer服务访问权限控制</title>
      <link href="/2022/07/06/geoserver%E6%9C%8D%E5%8A%A1%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
      <url>/2022/07/06/geoserver%E6%9C%8D%E5%8A%A1%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统：CentOS 7</li><li>Tomcat版本：8.5.x</li><li>GeoServer版本：2.21</li></ul><h2 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h2><p>使用geoserver提供的war包，通过tomcat部署运行，具体部署方式略过</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="第一步，设置身份验证器"><a href="#第一步，设置身份验证器" class="headerlink" title="第一步，设置身份验证器"></a>第一步，设置身份验证器</h3><p><a href="https://www.itze.cn/wp-content/uploads/2022/07/wp_editor_md_8ed9d9cfa15b8a398900f1f16bcc8117.jpg"><img src="https://www.itze.cn/wp-content/uploads/2022/07/wp_editor_md_8ed9d9cfa15b8a398900f1f16bcc8117.jpg"></a> <a href="https://www.itze.cn/wp-content/uploads/2022/07/wp_editor_md_490e81bc95264e68191bfe7c3f31b83f.jpg"><img src="https://www.itze.cn/wp-content/uploads/2022/07/wp_editor_md_490e81bc95264e68191bfe7c3f31b83f.jpg"></a></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果第二步中没有显示：AuthKey 这个，就自己去官网下载安装一个 下载地址：<a href="https://sourceforge.net/projects/geoserver/files/GeoServer/2.21.0/extensions/geoserver-2.21.0-authkey-plugin.zip" title="Key authentication">Key authentication</a> 安装方法：将下载好的压缩包中的jar包全部复制到tomcat&#x2F;webapps&#x2F;geoserver&#x2F;WEB-INF&#x2F;lib 文件夹中，然后重启tomcat服务即可 <a href="https://www.itze.cn/wp-content/uploads/2022/07/wp_editor_md_6422d245428dcf2dd8df4c685e19270f.jpg"><img src="https://www.itze.cn/wp-content/uploads/2022/07/wp_editor_md_6422d245428dcf2dd8df4c685e19270f.jpg"></a></p><h3 id="第二步，设置过滤器"><a href="#第二步，设置过滤器" class="headerlink" title="第二步，设置过滤器"></a>第二步，设置过滤器</h3><p><a href="https://www.itze.cn/wp-content/uploads/2022/07/wp_editor_md_becf0a543aabcc0c990e04ebb5206b70.jpg"><img src="https://www.itze.cn/wp-content/uploads/2022/07/wp_editor_md_becf0a543aabcc0c990e04ebb5206b70.jpg"></a> 修改默认 <a href="https://www.itze.cn/wp-content/uploads/2022/07/wp_editor_md_b1861f375a9dee1f4ec973f5e357150e.jpg"><img src="https://www.itze.cn/wp-content/uploads/2022/07/wp_editor_md_b1861f375a9dee1f4ec973f5e357150e.jpg"></a> 添加新的 <a href="https://www.itze.cn/wp-content/uploads/2022/07/wp_editor_md_691ea79300d98d8b0766f189a04d63ac.jpg"><img src="https://www.itze.cn/wp-content/uploads/2022/07/wp_editor_md_691ea79300d98d8b0766f189a04d63ac.jpg"></a> <a href="https://www.itze.cn/wp-content/uploads/2022/07/wp_editor_md_d2e0e64e734795839e5f54ded6b48ceb.jpg"><img src="https://www.itze.cn/wp-content/uploads/2022/07/wp_editor_md_d2e0e64e734795839e5f54ded6b48ceb.jpg"></a> <a href="https://www.itze.cn/wp-content/uploads/2022/07/wp_editor_md_effca544f2eecd31c29c21d2f3ee2b29.jpg"><img src="https://www.itze.cn/wp-content/uploads/2022/07/wp_editor_md_effca544f2eecd31c29c21d2f3ee2b29.jpg"></a></p><h3 id="webService-URL"><a href="#webService-URL" class="headerlink" title="webService URL"></a>webService URL</h3><p>这种方式是通过geoserver自己去调用自定义的接口验证地址，示例代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;geoServerAuth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">geoServerAuth</span><span class="params">(<span class="meta">@RequestParam</span> String authkey)</span> &#123;</span><br><span class="line">        <span class="comment">//验证key业务代码，省略，自己填补</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1</span>==<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(authkey);</span><br><span class="line">        <span class="comment">//这里要根据key验证的用户信息，返回geoserver中用户对应的用户名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//身份验证不通过返回空字符串或者非用户名其他，根据自己业务返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写完验证接口之后，webService RUL中就填写实际线上或者geoserver能调的通的接口地址 比如：<a href="https://www.itze.cn/controller/geoServerAuth?authkey=%7Bkey%7D">https://www.itze.cn/controller/geoServerAuth?authkey={key}</a></p><h3 id="关于使用验证"><a href="#关于使用验证" class="headerlink" title="关于使用验证"></a>关于使用验证</h3><p>比如瓦片原来请求地址：<a href="https://127.0.0.1:8080/geoserver/gwc/service/aaa/1.0.0/123.png">https://127.0.0.1:8080/geoserver/gwc/service/aaa/1.0.0/123.png</a> 添加key请求：<a href="https://127.0.0.1:8080/geoserver/gwc/service/aaa/1.0.0/123.png?authkey=123456">https://127.0.0.1:8080/geoserver/gwc/service/aaa/1.0.0/123.png?authkey=123456</a> 调用geoserver时，geoserver会先把authkey&#x3D;123456这个值去请求webService RUL中自定义验证接口</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>geoserver服务器调用一次验证成功之后，10分钟内请求geoserver不会再去调用验证接口</li><li>关于wms服务的验证调用，因为wms服务链接会自带问号：”?” 此时如果再最后面拼接?authkey&#x3D;123456那么请求验证将拿不到key值，需要将?authkey&#x3D;123456放到&#x2F;wms后面，如&#x2F;wms?authkey&#x3D;123456?service，详细见文章：<a href="https://www.itze.cn/tomcat/1066.html" title="GeoServer服务wms权限控制">GeoServer服务wms权限控制</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> GeoServer </category>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GeoServer </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisTemplate批量获取值</title>
      <link href="/2022/07/01/redistemplate%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E5%80%BC/"/>
      <url>/2022/07/01/redistemplate%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="multiGet方式"><a href="#multiGet方式" class="headerlink" title="multiGet方式"></a>multiGet方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同时获取redis多个key值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> www.itze.cn</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">mGetTypeGetValue</span><span class="params">(Set matchKey)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().multiGet(matchKey);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;异常：&quot;</span>, e);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="plpeline方式，推荐使用该方法"><a href="#plpeline方式，推荐使用该方法" class="headerlink" title="plpeline方式，推荐使用该方法"></a>plpeline方式，推荐使用该方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量获取key值对应的Value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> matchKey</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">pipeLineTypeGetValue</span><span class="params">(Set&lt;String&gt; matchKey)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.executePipelined((RedisCallback&lt;Object&gt;) connection -&gt; &#123;</span><br><span class="line">        <span class="type">StringRedisConnection</span> <span class="variable">conn</span> <span class="operator">=</span> (StringRedisConnection) connection;</span><br><span class="line">        <span class="keyword">for</span> (String key : matchKey) &#123;</span><br><span class="line">            conn.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>plpeline方式共享一个连接，查询返回的结果，和键的顺序是一一对应的，如果没查到，会返回null值 <strong>可以结合文章：</strong><a href="https://www.itze.cn/java/1051.html" title="RedisTemplate使用Redis scan">RedisTemplate使用Redis scan</a>，<strong>批量获取Redis key方法使用</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisTemplate批量获取Key</title>
      <link href="/2022/07/01/redistemplate%E4%BD%BF%E7%94%A8redis-scan/"/>
      <url>/2022/07/01/redistemplate%E4%BD%BF%E7%94%A8redis-scan/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SCAN_COUNT</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用scan遍历key</span></span><br><span class="line"><span class="comment"> * 为什么不使用keys 因为Keys会引发Redis锁，并且增加Redis的CPU占用,特别是数据庞大的情况下。这个命令千万别在生产环境乱用。</span></span><br><span class="line"><span class="comment"> * 支持redis单节点和集群调用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> matchKey</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">scanMatch</span><span class="params">(String matchKey)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; keys = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">    <span class="type">RedisConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> redisTemplate.getConnectionFactory();</span><br><span class="line">    <span class="type">RedisConnection</span> <span class="variable">redisConnection</span> <span class="operator">=</span> connectionFactory.getConnection();</span><br><span class="line">    Cursor&lt;<span class="type">byte</span>[]&gt; scan = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//集群</span></span><br><span class="line">    <span class="keyword">if</span>(redisConnection <span class="keyword">instanceof</span> JedisClusterConnection)&#123;</span><br><span class="line">        <span class="type">RedisClusterConnection</span> <span class="variable">clusterConnection</span> <span class="operator">=</span> connectionFactory.getClusterConnection();</span><br><span class="line">        Iterable&lt;RedisClusterNode&gt; redisClusterNodes = clusterConnection.clusterGetNodes();</span><br><span class="line">        Iterator&lt;RedisClusterNode&gt; iterator = redisClusterNodes.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">RedisClusterNode</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            scan = clusterConnection.scan(next, ScanOptions.scanOptions().match(matchKey).count(Integer.MAX_VALUE).build());</span><br><span class="line">            <span class="keyword">while</span> (scan.hasNext()) &#123;</span><br><span class="line">                keys.add(<span class="keyword">new</span> <span class="title class_">String</span>(scan.next()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(scan !=<span class="literal">null</span>)&#123;</span><br><span class="line">                    scan.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;scan遍历key关闭游标异常&quot;</span>,e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> keys;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//单机</span></span><br><span class="line">    <span class="keyword">if</span>(redisConnection <span class="keyword">instanceof</span> JedisConnection)&#123;</span><br><span class="line">    scan = redisConnection.scan(ScanOptions.scanOptions().match(matchKey + <span class="string">&quot;*&quot;</span>).count(SCAN_COUNT).build());</span><br><span class="line">    <span class="keyword">while</span> (scan.hasNext()) &#123;</span><br><span class="line">        <span class="comment">//找到一次就添加一次</span></span><br><span class="line">        keys.add(<span class="keyword">new</span> <span class="title class_">String</span>(scan.next()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scan != <span class="literal">null</span>) &#123;</span><br><span class="line">            scan.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;scan遍历key关闭游标异常&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> keys;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> keys;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong>Redis scan 命令会获取重复的数据，所以这里使用Set集合</strong> scan命令格式</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SCAN cursor [MATCH pattern] [COUNT count]</span><br></pre></td></tr></table></figure><p>样例</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SCAN 0 MATCH user_* COUNT 10000</span><br></pre></td></tr></table></figure><blockquote><p>来源网络，若侵请告知删除，谢谢。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShardingSphere介绍</title>
      <link href="/2022/06/29/shardingsphere-proxy%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/"/>
      <url>/2022/06/29/shardingsphere-proxy%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>简介 ShardingSphere-JDBC ShardingSphere-Proxy ShardingSphere-Sidecar（TODO）</li><li>混合架构</li><li>解决方案</li><li>线路规划</li></ul><p>ShardingSphere GitHub地址：<a href="https://github.com/apache/shardingsphere" title="https://github.com/apache/shardingsphere">https://github.com/apache/shardingsphere</a> ShardingSphere 官网：<a href="https://shardingsphere.apache.org/index_zh.html" title="https://shardingsphere.apache.org/index_zh.html">https://shardingsphere.apache.org/index_zh.html</a> <a href="https://github.com/apache/shardingsphere/releases" title="&lt;img src=">“&gt;<img src="https://www.itze.cn/wp-content/uploads/2022/06/a3ym4-2skn1.jpg"></a> <a href="https://github.com/apache/shardingsphere/stargazers" title="&lt;img src=">“&gt;<img src="https://www.itze.cn/wp-content/uploads/2022/06/a7bs8-8h8qb.jpg"></a> <a href="https://github.com/apache/shardingsphere/fork" title="&lt;img src=">“&gt;<img src="https://www.itze.cn/wp-content/uploads/2022/06/acgyr-nuq4c.jpg"></a> <a href="https://github.com/apache/shardingsphere/watchers" title="&lt;img src=">“&gt;<img src="https://www.itze.cn/wp-content/uploads/2022/06/aznzn-0e0mn.jpg"></a> **星评增长时间线** <a href="https://starchart.cc/apache/shardingsphere" title="&lt;img src=">“&gt;<img src="https://www.itze.cn/wp-content/uploads/2022/06/star.png"></a> **贡献者增长时间线** <a href="https://api7.ai/contributor-graph?chart=contributorOverTime&repo=apache/shardingsphere" title="&lt;img src=">“&gt;<img src="https://www.itze.cn/wp-content/uploads/2022/06/gongxian-e1656495229927.png"></a> Apache ShardingSphere 产品定位为 Database Plus，旨在构建多模数据库上层的标准和生态。 它关注如何充分合理地利用数据库的计算和存储能力，而并非实现一个全新的数据库。ShardingSphere 站在数据库的上层视角，关注他们之间的协作多于数据库自身。 连接、增量和可插拔是 Apache ShardingSphere 的核心概念。</p><ul><li>连接：通过对数据库协议、SQL 方言以及数据库存储的灵活适配，快速的连接应用与多模式的异构数据库；</li><li>增量：获取数据库的访问流量，并提供流量重定向（数据分片、读写分离、影子库）、流量变形（数据加密、数据脱敏）、流量鉴权（安全、审计、权限）、流量治理（熔断、限流）以及流量分析（服务质量分析、可观察性）等透明化增量功能；</li><li>可插拔：项目采用微内核 + 三层可插拔模型，使内核、功能组件以及生态对接完全能够灵活的方式进行插拔式扩展，开发者能够像使用积木一样定制属于自己的独特系统。</li></ul><p>ShardingSphere 已于2020年4月16日成为 Apache 软件基金会的顶级项目。 <a href="https://www.apache.org/licenses/LICENSE-2.0.html" title="&lt;img src=">“&gt;<img src="https://www.itze.cn/wp-content/uploads/2022/06/ahfw8-td4zj.jpg"></a> <a href="https://github.com/apache/shardingsphere/releases" title="&lt;img src=">“&gt;<img src="https://www.itze.cn/wp-content/uploads/2022/06/a3ym4-2skn1.jpg"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Apache ShardingSphere 由 JDBC、Proxy 和 Sidecar（规划中）这 3 款既能够独立部署，又支持混合部署配合使用的产品组成。 它们均提供标准化的基于数据库作为存储节点的增量功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。 关系型数据库当今依然占有巨大市场份额，是企业核心系统的基石，未来也难于撼动，我们更加注重在原有基础上提供增量，而非颠覆。</p><h3 id="star-ShardingSphere-JDBC"><a href="#star-ShardingSphere-JDBC" class="headerlink" title=":star:ShardingSphere-JDBC"></a>:star:ShardingSphere-JDBC</h3><p><a href="https://mvnrepository.com/artifact/org.apache.shardingsphere/shardingsphere-jdbc" title="&lt;img src=">“&gt;<img src="https://www.itze.cn/wp-content/uploads/2022/06/alalj-9w5uv.jpg"></a> 定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务。 它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。 - 适用于任何基于 JDBC 的 ORM 框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template 或直接使用 JDBC； - 支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, HikariCP 等； - 支持任意实现 JDBC 规范的数据库，目前支持 MySQL，PostgreSQL，Oracle，SQLServer 以及任何可使用 JDBC 访问的数据库。 <img src="https://www.itze.cn/wp-content/uploads/2022/06/shardingsphere-jdbc_v3.png"></p><h3 id="star-ShardingSphere-Proxy"><a href="#star-ShardingSphere-Proxy" class="headerlink" title=":star:ShardingSphere-Proxy"></a>:star:ShardingSphere-Proxy</h3><p><a href="https://apache.org/dyn/closer.cgi?path=shardingsphere/5.0.0-beta/apache-shardingsphere-5.0.0-beta-shardingsphere-proxy-bin.tar.gz" title="&lt;img src=">“&gt;<img src="https://www.itze.cn/wp-content/uploads/2022/06/a23uj-lbcau.jpg"></a> <a href="https://hub.docker.com/r/apache/sharding-proxy" title="&lt;img src=">“&gt;<img src="https://www.itze.cn/wp-content/uploads/2022/06/ajbwj-jvqlt.jpg"></a> 定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。 目前提供 MySQL 和 PostgreSQL（兼容 openGauss 等基于 PostgreSQL 的数据库）版本，它可以使用任何兼容 MySQL&#x2F;PostgreSQL 协议的访问客户端（如：MySQL Command Client, MySQL Workbench, Navicat 等）操作数据，对 DBA 更加友好。</p><ul><li>向应用程序完全透明，可直接当做 MySQL&#x2F;PostgreSQL 使用；</li><li>适用于任何兼容 MySQL&#x2F;PostgreSQL 协议的的客户端。</li></ul><p><img src="https://www.itze.cn/wp-content/uploads/2022/06/shardingsphere-proxy_v2.png"></p><h3 id="star-ShardingSphere-Sidecar（TODO）"><a href="#star-ShardingSphere-Sidecar（TODO）" class="headerlink" title=":star:ShardingSphere-Sidecar（TODO）"></a>:star:ShardingSphere-Sidecar（TODO）</h3><p>定位为 Kubernetes 的云原生数据库代理，以 Sidecar 的形式代理所有对数据库的访问。 通过无中心、零侵入的方案提供与数据库交互的啮合层，即 Database Mesh，又可称数据库网格。 Database Mesh 的关注重点在于如何将分布式的数据访问应用与数据库有机串联起来，它更加关注的是交互，是将杂乱无章的应用与数据库之间的交互进行有效地梳理。 使用 Database Mesh，访问数据库的应用和数据库终将形成一个巨大的网格体系，应用和数据库只需在网格体系中对号入座即可，它们都是被啮合层所治理的对象。 <img src="https://www.itze.cn/wp-content/uploads/2022/06/shardingsphere-sidecar-brief.png"> <img src="https://www.itze.cn/wp-content/uploads/2022/06/%E6%80%A7%E8%83%BD-1.png"></p><h3 id="star-混合架构"><a href="#star-混合架构" class="headerlink" title=":star:混合架构"></a>:star:混合架构</h3><p>ShardingSphere-JDBC 采用无中心化架构，与应用程序共享资源，适用于 Java 开发的高性能的轻量级 OLTP 应用； ShardingSphere-Proxy 提供静态入口以及异构语言的支持，独立于应用程序部署，适用于 OLAP 应用以及对分片数据库进行管理和运维的场景。 Apache ShardingSphere 是多接入端共同组成的生态圈。 通过混合使用 ShardingSphere-JDBC 和 ShardingSphere-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，使得架构师更加自由地调整适合于当前业务的最佳系统架构。 <img src="https://www.itze.cn/wp-content/uploads/2022/06/shardingsphere-hybrid-architecture_v2.png"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><img src="https://www.itze.cn/wp-content/uploads/2022/06/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-1.png"></p><h2 id="线路规划"><a href="#线路规划" class="headerlink" title="线路规划"></a>线路规划</h2><p><img src="https://www.itze.cn/wp-content/uploads/2022/06/roadmap_v2.png"></p><blockquote><p><em>说明：以上内容摘抄ShardingSphere官网，一切以官网为准，若有侵权，请联系删除，谢谢</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ShardingSphere </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShardingSphere </tag>
            
            <tag> ShardingSphere-JDBC </tag>
            
            <tag> ShardingSphere-Proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次Msyql崩溃导致无法启动</title>
      <link href="/2022/06/24/%E8%AE%B0%E4%B8%80%E6%AC%A1msyql%E5%B4%A9%E6%BA%83%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/"/>
      <url>/2022/06/24/%E8%AE%B0%E4%B8%80%E6%AC%A1msyql%E5%B4%A9%E6%BA%83%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统：CentOS 7 Mysql版本：Mysql 8.0.x Docker版本：Docker version 20.10.10</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>mysql服务是通过Docker方式部署，一次重启导致mysql容器无法正常启动，查看发现mysql容器一直在不断启动…断开…启动…断开，之所以会这样是因为起初创建mysql容器是设置了：–restart always 就是只要Docker服务活着，该容器就会启动，如果断开了就会自动重启，由于崩溃，Mysql无法启动，然后docker再尝试重启，就这样陷入了循环… 摘取一段mysql容器报错日志</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2022-05-23T03:29:02.744075Z 1 [ERROR] [MY-011972] [InnoDB] Your database may be corrupt or you may have copied the InnoDB tablespace but not the InnoDB log files. Please refer to http://dev.mysql.com/doc/refman/8.0/en/forcing-innodb-recovery.html for information about forcing recovery.</span><br></pre></td></tr></table></figure><p>查看mysql容器日志看到一段信息，大概意思是存储引擎可能已经损坏，给出一个官方文档地址</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>既然官方已经给出了解决文档，就去看了一下，文档地址：<a href="https://dev.mysql.com/doc/refman/8.0/en/forcing-innodb-recovery.html" title="https://dev.mysql.com/doc/refman/8.0/en/forcing-innodb-recovery.html">https://dev.mysql.com/doc/refman/8.0/en/forcing-innodb-recovery.html</a> 翻译了一下网页 <img src="https://www.itze.cn/wp-content/uploads/2022/06/innodb.png"> 官方的意思是，通过设置存储引擎强制恢复的级别来实现暂时能使mysql服务启动，以方便把数据备份出来，一共给了6个级别</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">innodb_force_recovery <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用的时候，可以先从小往大一个级别一个级别去设置，不要直接从1调到5&#x2F;6这样，小编是尝试设置到了3就能正常启动了，不过启动后，mysql只有查询权限，没有写入权限，官方文档里也说了，这样就是为了暂时启动，将数据备份出来 <strong>关于如何在docker容器方式部署mysql时修改配置文件，参考：</strong><a href="https://www.itze.cn/mysql/819.html" title="Docker环境下Mysql跳过密码验证">Docker环境下Mysql跳过密码验证</a></p><h2 id="摘取官方"><a href="#摘取官方" class="headerlink" title="摘取官方"></a>摘取官方</h2><p>作为安全措施，InnoDB防止 INSERT、 UPDATE、 或 大于 0DELETE时的操作 。只读模式下 4 位或更多位的设置。innodb_force_recoveryinnodb_force_recoveryInnoDB 1 ( SRV_FORCE_IGNORE_CORRUPT) 让服务器即使检测到损坏的 页面也能运行。尝试 跳过损坏的索引记录和页面，这有助于转储表。 SELECT * FROM tbl_name 2 ( SRV_FORCE_NO_BACKGROUND) 阻止主线程和任何清除线程运行。如果在清除操作期间发生意外退出，此恢复值会阻止它。 3 ( SRV_FORCE_NO_TRX_UNDO) 崩溃恢复后 不运行事务 回滚。 4 ( SRV_FORCE_NO_IBUF_MERGE) 防止插入缓冲区合并操作。如果它们会导致崩溃，请不要这样做。不计算表 统计信息。此值可能会永久损坏数据文件。使用此值后，准备删除并重新创建所有二级索引。设置 InnoDB为只读。 5 ( SRV_FORCE_NO_UNDO_LOG_SCAN) 启动数据库时 不查看撤消日志InnoDB：甚至将不完整的事务视为已提交。此值可能会永久损坏数据文件。设置InnoDB为只读。 6 ( SRV_FORCE_NO_LOG_REDO) 不执行与恢复相关的重做日志 前滚。此值可能会永久损坏数据文件。使数据库页面处于过时状态，这反过来可能会给 B 树和其他数据库结构带来更多损坏。设置 InnoDB为只读。 您可以SELECT从表中转储它们。innodb_force_recovery值为 3 或更少时，您可以或 DROP表格 CREATE。DROP TABLE也支持 innodb_force_recovery大于 3的值。DROP TABLE不允许 innodb_force_recovery大于 4 的值。 如果您知道给定表导致回滚时意外退出，则可以将其删除。如果遇到由于批量导入失败而导致的失控回滚ALTER TABLE，您可以终止 mysqld 进程并设置 innodb_force_recovery为 3在不回滚的情况下启动数据库，然后DROP是导致失控回滚的表。 如果表数据中的损坏阻止您转储整个表内容，则带有子句的查询可能能够转储损坏部分之后的表部分。 ORDER BY primary_key DESC innodb_force_recovery 如果start 需要 一个高值InnoDB，则可能存在损坏的数据结构，这可能导致复杂查询（包含WHERE、ORDER BY或其他子句的查询）失败。在这种情况下，您可能只能运行基本SELECT * FROM t 查询。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql通过ibd文件恢复数据</title>
      <link href="/2022/06/24/mysql%E9%80%9A%E8%BF%87ibd%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/06/24/mysql%E9%80%9A%E8%BF%87ibd%E6%96%87%E4%BB%B6%E6%81%A2%E5%A4%8D%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统：CentOS 7 Mysql版本：8.0.x</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如果Mysql服务无法启动，则可以通过Mysql表对应的.ibd文件恢复数据，如果你的Mysql服务可以正常启动，就不要使用这种方式了</p><h2 id="办法"><a href="#办法" class="headerlink" title="办法"></a>办法</h2><ol><li>创建一张表，表结构与原表结构一致</li><li>删除新建的表空间</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>table_name<span class="operator">&gt;</span> DISCARD TABLESPACE;</span><br></pre></td></tr></table></figure><ol start="3"><li>将待恢复的.ibd文件copy到目标数据库文件夹下，并修改文件权限:</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp &lt;table_name&gt;.ibd /var/lib/mysql/&lt;database_name&gt;</span><br><span class="line">cd /var/lib/mysql/&lt;database_name&gt;</span><br><span class="line">chown mysql:mysql &lt;table_name&gt;.ibd</span><br></pre></td></tr></table></figure><p><strong>注意：如果mysql服务是通过Docker方式部署，需要将.ibd文件拷贝到，映射到Mysql的Docker容器路径下，修改权限需要进入到Mysql所在的Docker容器！重点，不是直接在安装Docker那台机器上修改权限，一定要进入到myslq所在的docker容器</strong> docker进入某容器命令，假如我的容器名是docker_mysql</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it docker_mysql /bin/bash</span><br></pre></td></tr></table></figure><ol start="4"><li>导入表空间</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ALTER TABLE &lt;table_name&gt; IMPORT TABLESPACE;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GeoServer启动报错：java.lang.NoClassDefFoundError: Could not initialize class javax.media.jai.JAI</title>
      <link href="/2022/06/24/geoserver%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99%EF%BC%9Ajava-lang-noclassdeffounderror-could-not-initialize-class-javax-media-jai-jai/"/>
      <url>/2022/06/24/geoserver%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99%EF%BC%9Ajava-lang-noclassdeffounderror-could-not-initialize-class-javax-media-jai-jai/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统：CentOS 7</li><li>JDK版本：1.8</li><li>Tomcat版本：8.x</li><li>GeoServer版本：Stable 2.21.0</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>CentOS 7系统通过geoserver官方提供的war包形式部署，tomcat启动正常，确定tomcat没问题，将下载的geoserver.war包放置tomcat的webapps路径下，tomcat启动状态会自动部署，通过启动log查看报错：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: Could not initialize <span class="keyword">class</span> <span class="title class_">javax</span>.media.jai.JAI</span><br></pre></td></tr></table></figure><p>tomcat在linux上启动时查看控制台命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tomcat/bin/start.sh &amp;&amp; tail -f tomcat/logs/catalina.out</span><br></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>1.下载JAI Java Advanced Imaging (JAI) 是Oracle开发的用于高级图像处理的库。 GeoServer无需它即可运行， 因为它随附了纯Java版本的JAI。 安装JAI可以大大提高处理图像时的性能， 即栅格格式数据。 如果您不打算使用空间栅格数据， 当您索要地图时，GeoServer可以使用图像格式，例如， 在WMS GetMap 请求中，因此将它放在生产站点上很值得 通过wget命令下载</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://download.java.net/media/jai/builds/release/1_1_3/jai-1_1_3-lib-linux-amd64-jre.bin</span><br></pre></td></tr></table></figure><p>2.将文件复制到安装JRE的文件夹中，然后运行它：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp jai-1_1_3-lib-linux-amd64-jre.bin /jre1.8.0/.(改成你的jre安装路径)</span><br></pre></td></tr></table></figure><p>切入到你的jre路径下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/lib/jvm/jre1.8.0/(改成你的jre安装路径)</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh jai-1_1_3-lib-linux-amd64-jre.bin</span><br></pre></td></tr></table></figure><p>然后会出现类似用户许可协议，看完就行了，按键盘回车（Enter） 出现下面的Done代表已经完成</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    inflating: COPYRIGHT-jai.txt</span><br><span class="line">    inflating: DISTRIBUTIONREADME-jai.txt</span><br><span class="line">    inflating: LICENSE-jai.txt</span><br><span class="line">    inflating: THIRDPARTYLICENSEREADME-jai.txt</span><br><span class="line">    inflating: UNINSTALL-jai</span><br><span class="line">    inflating: lib/amd64/libmlib_jai.so</span><br><span class="line">    inflating: lib/ext/jai_core.jar</span><br><span class="line">    inflating: lib/ext/jai_codec.jar</span><br><span class="line">    inflating: lib/ext/mlibwrapper_jai.jar</span><br><span class="line">Done</span><br></pre></td></tr></table></figure><h3 id="安装完毕之后如果还是报错，再尝试安装下面的jai-imageio"><a href="#安装完毕之后如果还是报错，再尝试安装下面的jai-imageio" class="headerlink" title="安装完毕之后如果还是报错，再尝试安装下面的jai_imageio"></a>安装完毕之后如果还是报错，再尝试安装下面的jai_imageio</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://download.java.net/media/jai-imageio/builds/ release/1.1/jai_imageio-1_1-lib-linux-amd64-jre.bin</span><br></pre></td></tr></table></figure><p>下载之后操作和上面的完全相同 也可以直接下载该jar包，<a href="https://layui.itze.cn/static/download/java/jai_imageio-1.1.jar" title="jai_imageio-1.1.jar">jai_imageio-1.1.jar</a>点击下载，然后将下载的jar包放到安装jdk路径下，jdk1.8.0（前面这里换成你自己的路径，后面不用变）&#x2F;jre&#x2F;lib&#x2F;ext的下面</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jdk1.8.0（前面这里换成你自己的路径，后面不用变）/jre/lib/ext</span><br></pre></td></tr></table></figure><h3 id="最后重启tomcat服务"><a href="#最后重启tomcat服务" class="headerlink" title="最后重启tomcat服务"></a>最后重启tomcat服务</h3>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> GeoServer </category>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> GeoServer </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS对已有卷组扩容</title>
      <link href="/2022/03/30/centos%E5%AF%B9%E5%B7%B2%E6%9C%89%E5%8D%B7%E7%BB%84%E6%89%A9%E5%AE%B9/"/>
      <url>/2022/03/30/centos%E5%AF%B9%E5%B7%B2%E6%9C%89%E5%8D%B7%E7%BB%84%E6%89%A9%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统：Centos 7</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>对已有的一块挂载磁盘卷组进行扩容 <img src="https://www.itze.cn/wp-content/uploads/2022/03/71969909-2A18-4f21-9234-0DC2578ADF8D.png"></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>添加一块新磁盘 查看磁盘</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure><p>比如新加的磁盘名称为：&#x2F;dev&#x2F;vdd 2. 将新添加的磁盘创建物理卷</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pvcreate /dev/vdd</span><br></pre></td></tr></table></figure><ol start="3"><li>将新创建的物理卷加入已存在需要扩容的卷组 查看卷组信息</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vgdisplay</span><br></pre></td></tr></table></figure><p>加入第二步中新创建的卷组</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vgextend centos /dev/vdd </span><br></pre></td></tr></table></figure><ol start="4"><li>将新添加的大小全部给到卷组</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lvextend -l +100%FREE /dev/mapper/centos-lvname</span><br></pre></td></tr></table></figure><ol start="5"><li>重新加载卷组大小</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">resize2fs /dev/mapper/centos-lvname</span><br></pre></td></tr></table></figure><ol start="6"><li>查看</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -Th</span><br></pre></td></tr></table></figure><h2 id="注意项"><a href="#注意项" class="headerlink" title="注意项"></a>注意项</h2><ul><li>如果你的磁盘是使用的和本文章这样是将多个磁盘使用LVM通过创建物理卷然后创建卷组，通过挂载卷组磁盘的方式，扩容时不要在已经初始化为物理卷的磁盘上直接扩容</li><li>比如，&#x2F;dev&#x2F;vda 这块磁盘已经被创建成物理卷并且添加至卷组，不要在这块磁盘上直接扩容这块磁盘的大小，目前已知华为云是可以直接在已有的磁盘上直接扩容，这种方式扩容了也没法用</li><li>要新加一块新的磁盘，然后按照本文章操作即可</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次Mysql数据迁移至Mycat</title>
      <link href="/2022/03/04/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/"/>
      <url>/2022/03/04/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>数据库：Mysql8</li><li>操作系统：Windows10、CentOS7</li><li>中间件：Mycat1.6.7</li></ul><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>数据库使用的mysql，起初是单库单表，时间久了单表的数据量越来越大，一个表中的数据量达到3个多亿，mysql单表数据量达到800万左右就达到瓶颈了，不得不分表了,使用mycat中间件</p><h2 id="迁移前准备"><a href="#迁移前准备" class="headerlink" title="迁移前准备"></a>迁移前准备</h2><ol><li>部署好新的数据库节点，服务器磁盘容量保证要从充足</li><li>分析需要迁移的单表数据量，计算现有数据量及估算每日新增大概数据量，按照单表800万左右存储，计算单表需要拆分成多少个分片</li><li>在新的数据库节点创建好相应的分片表及mycat配置，建议涉及到的索引这个时候也创建好</li></ol><h2 id="导出原始数据"><a href="#导出原始数据" class="headerlink" title="导出原始数据"></a>导出原始数据</h2><p>导出数据的方式有很多种，也可以参考这篇文章：<a href="https://www.itze.cn/mysql/858.html" title="Mysql千万级数据量批量快速迁移">Mysql千万级数据量批量快速迁移</a> - mysqldump 方式 - load data 方式 - 利用Navicat For Mysql可视化工具方式 - 第三方开源工具yugong - … <strong>注：以上几种最快的方式是第二种load data</strong> - 实际测试如果将导出的数据通mycat1.6.7版本导入到新的数据节点，load data方式不支持，根据mycat1.x官方文档的描述，使用load data方式迁移数据分配路由，schema.xml配置文件中dbDriver方式必须为native，实际测试并没有用，mycat社区委员会俊文也表示不建议通过mycat1.x使用load data方式 - 由于作者使用的是mycat1.6.7版本所以，没能使用load data迁移，最后选择使用mysqldump方式，有一张单表数据量达到了将近4亿，在处理这张表的时候，考虑到数据量比较大，以及有其他程序也在源源不断的写入新的数据，所以采用按条件分割处理，分析表结构，如果有ID自增主键这种，可以按照ID来分割，或者按照其他旧数据不会再新增的条件，这里根据自己实际业务需求 导出语句示例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p123456 <span class="operator">-</span>h127<span class="number">.0</span><span class="number">.1</span> <span class="operator">-</span>P3306 <span class="comment">--default-character-set=utf8 -c -t --skip-add-locks --databases testDB --tables user --where=&quot;user_id BETWEEN 0 AND 10000&quot;&gt; D:\user_id_0_10000.sql</span></span><br></pre></td></tr></table></figure><p>mysqldump -uroot -p123456 -h127.0.1 -P3306 –default-character-set&#x3D;utf8 -c -t –skip-add-locks –databases testDB –tables user –where&#x3D;”user_id BETWEEN 0 AND 10000”&gt; D:\user_id_0_10000.sql 参数解释 - -u（小写）：mysql用户名 - -p（小写）：mysql密码 - -h（小写）：mysql所在主机地址，可以是远程可以是本机，本机可以省略 - -P（大写）：mysql端口号 - -c（小写）：使用完整的insert语句(包含列名称)。这么做能提高插入效率，但是可能会受到max_allowed_packet参数的影响而导致插入失败。 - -t（小写）:只导出数据，而不添加CREATE TABLE 语句。 - –default-character-set&#x3D;utf8：设置默认字符集，默认值为utf8 - –skip-add-locks：取消在每个表导出之前增加LOCK TABLES（默认存在锁） - –databases：导出的数据名，这里只需要导出的表所在的数据名字 - –tables：需要导出的表名 - –where：添加条件，示例：user_id BETWEEN 0 AND 10000，这里只会导出user_id大于等于0小于10000的数据，可以理解为执行导出了以下sql结果：SELECT * FROM user WHERE user_id BETWEEN 0 AND 10000; - D:\user_id_0_10000.sql：导出位置，如果使用的windows本机机器导出远程服务器上的数据，这里就是本地的路径，如果在linux上执行，路径就换成linux上的即可比如：&#x2F;root&#x2F;user_id_0_10000.sql</p><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><h4 id="如果要对原表进行分片，然后通过mycat导入"><a href="#如果要对原表进行分片，然后通过mycat导入" class="headerlink" title="如果要对原表进行分片，然后通过mycat导入"></a>如果要对原表进行分片，然后通过mycat导入</h4><p>如果原表单表导入到新节点之后做了分片，这里举例，假如原来一张单表通过mycat分片导入之后分成了3个分片表，也就是原来的一张表数据分散导入到三张表中 以下配置前提已经创建好了分片表，假如分片表名为user1、user2、user3 mycat配置文件schemal.xml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table name=&quot;user&quot; primaryKey=&quot;user_id&quot; autoIncrement=&quot;true&quot; dataNode=&quot;dn1&quot; subTables=&quot;user$1-3&quot; rule=&quot;mod_Name&quot;&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>这里全局序列号采用：自增长主键方式，具体参考文章：<a href="https://www.itze.cn/mycat/958.html" title="Mycat1.6.7.6全局序列号的使用">Mycat1.6.7.6全局序列号的使用</a> 分片算法采用：取模 配置完成之后重启mycat开始执行导入即可，mycat会自动路由将原来的数据较均匀分配到各个分片中</p><h4 id="本地导入"><a href="#本地导入" class="headerlink" title="本地导入"></a>本地导入</h4><p>如果本地能链接mycat服务，或者mycat做了高可用个，可以通过haproxy链接，重点是本地如果能够连接成功mycat，那么前面导出的user_id_0_10000.sql文件就不需要上传到服务器了，作者实际测试本地windows上的mysql服务并不能够成功连接到Linux上的mycat服务，如果本地你能够连接成功，那么执行以下命令导入数据到新的数据节点即可，注意路径切换到你自己的</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">source D:\user_id_0_10000.sql</span><br></pre></td></tr></table></figure><h4 id="服务器导入"><a href="#服务器导入" class="headerlink" title="服务器导入"></a>服务器导入</h4><p>如果本地不能连接到mycat服务，不能通过本地实现，就需要多一步，将导出的sql文件上传至装有mysql服务的服务器，任意一台即可，前提安装有mysql服务，上传完成之后就和本地类似了，通过mysql服务连接到mycat，然后执行以下命令即可，注意路径切换到你自己的</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">source <span class="operator">/</span>root<span class="operator">/</span>user_id_0_10000.sql</span><br></pre></td></tr></table></figure><p>接下来就是慢慢的等待执行完成~ 实际测试平均执行效率大概每秒插入1000条左右</p><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>导入完成之后需要检查数据的一致性，这里就很简答了，比如导出之前在原始数据库上查一下导出的数据数量，按照本文示例统计查询</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> user_id <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">10000</span>;</span><br></pre></td></tr></table></figure><p>然后在新的数据节点执行同样的命令，对比两次查询结果即可</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
          <category> Mycat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Mycat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mycat1.6.7.6全局序列号的使用</title>
      <link href="/2022/03/03/mycat1-6-7-6%E5%85%A8%E5%B1%80%E5%BA%8F%E5%88%97%E5%8F%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/03/03/mycat1-6-7-6%E5%85%A8%E5%B1%80%E5%BA%8F%E5%88%97%E5%8F%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统：CentOS 7</li><li>Mysql版本：Mysql8</li><li>Mycat版本：Mycat1.6.7.6</li></ul><h2 id="全局序列号-sequence"><a href="#全局序列号-sequence" class="headerlink" title="全局序列号(sequence)"></a>全局序列号(sequence)</h2><p>数据切分后，原有的关系数据库中的主键约束在分布式条件下将无法使用，因此需要引入外部机制保证数据 唯一性标识，这种保证全局性的数据唯一标识的机制就是全局序列号（sequence），因此一般全局序列号用于分表情况</p><h2 id="全局序列号介绍"><a href="#全局序列号介绍" class="headerlink" title="全局序列号介绍"></a>全局序列号介绍</h2><p>在实现分库分表的情况下，数据库自增主键已无法保证自增主键的全局唯一。为此，MyCat提供了全局sequence，并且提供了包含本地配置和数据库配置等多种实现方式。</p><h3 id="1-本地文件方式"><a href="#1-本地文件方式" class="headerlink" title="1.本地文件方式"></a>1.本地文件方式</h3><p><strong>原理：</strong> 此方式MyCAT将sequence配置到文件中，当使用到sequence中的配置后，MyCAT会更下 classpath中的sequence_conf.properties文件中sequence当前的值。 <strong>配置方式：</strong> 在 sequence_conf.properties 文件中做如下配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GLOBAL_SEQ.HISIDS= GLOBAL_SEQ.MINID=1001</span><br><span class="line">GLOBAL_SEQ.MAXID=1000000000</span><br><span class="line">GLOBAL_SEQ.CURID=1000</span><br></pre></td></tr></table></figure><p>其中 HISIDS 表示使用过的历史分段(一般无特殊需要可不配置)，MINID表示最小ID值，MAXID表示最大ID值，CURID表示当前ID值。 server.xml 中配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;system&gt;</span><br><span class="line">    &lt;property name=&quot;sequnceHandlerType&quot;&gt;0&lt;/property&gt;</span><br><span class="line">&lt;/system&gt;</span><br></pre></td></tr></table></figure><p>注：sequnceHandlerType 需要配置为 0，表示使用本地文件方式。 <strong>使用示例：</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table1(id,name) <span class="keyword">values</span>(<span class="string">&#x27;next value for MYCATSEQ_GLOBAL&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>函数：next value for MYCATSEQ_GLOBAL 会在下面数据库模式讲到</strong> <strong>缺点：</strong> 当 MyCAT 重新发布后，配置文件中的 sequence 会恢复到初始值。 <strong>优点：</strong>本地加载，读取速度较快。</p><h3 id="2-数据库方式"><a href="#2-数据库方式" class="headerlink" title="2.数据库方式"></a>2.数据库方式</h3><p><strong>原理：</strong> 在数据库中建立一张表，存放 sequence 名称(name)，sequence 当前值(current_value)，步长(increment int类型每次读取多少个sequence，假设为K)等信息 <strong>Sequence获取步骤：</strong> 1. 当初次使用该sequence时，根据传入的sequence名称，从数据库这张表中读取current_value，和increment到MyCat中，并将数据库中的current_value设置为原 current_value值+increment值。 2. MyCat将读取到current_value+increment作为本次要使用的sequence值，下次使用时，自动加1，当使用 increment次后，执行步骤1)相同的操作。 3. MyCat负责维护这张表，用到哪些sequence，只需要在这张表中插入一条记录即可。若某次读取的sequence 没有用完，系统就停掉了，则这次读取的sequence剩余值不会再使用 <strong>配置方式：</strong> server.xml 配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;system&gt;</span><br><span class="line">    &lt;property name=&quot;sequnceHandlerType&quot;&gt;1&lt;/property&gt;</span><br><span class="line">&lt;/system&gt;</span><br></pre></td></tr></table></figure><p>注：sequnceHandlerType 需要配置为1，表示使用数据库方式生成sequence <strong>数据库配置：</strong> 1. 创建 MYCAT_SEQUENCE 表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> MYCAT_SEQUENCE (NAME <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,current_value <span class="type">INT</span> <span class="keyword">NOT</span></span><br><span class="line"><span class="keyword">NULL</span>,increment <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">100</span>, <span class="keyword">PRIMARY</span> KEY(NAME)) ENGINE<span class="operator">=</span>INNODB;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建相关函数 <img src="https://www.itze.cn/wp-content/uploads/2022/03/function_1.png"></li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#获取当前 sequence 的值 (返回当前值,增量）</span><br><span class="line">#注意！此处后面加空格加两个美元符号，编辑器显示！如：DELIMITER 空格 美元符号<span class="number">1</span>美元符号<span class="number">2</span>，<span class="keyword">END</span>后面同理，以下三个函数同理</span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mycat_seq_currval(seq_name <span class="type">VARCHAR</span>(<span class="number">50</span>)) <span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">64</span>)</span><br><span class="line"><span class="keyword">DETERMINISTIC</span> </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> retval <span class="type">VARCHAR</span>(<span class="number">64</span>);</span><br><span class="line"><span class="keyword">SET</span> retval<span class="operator">=</span>&quot;-999999999,null&quot;;</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="built_in">CAST</span>(current_value <span class="keyword">AS</span> <span class="type">CHAR</span>),&quot;,&quot;,<span class="built_in">CAST</span>(increment <span class="keyword">AS</span> <span class="type">CHAR</span>)) <span class="keyword">INTO</span> retval <span class="keyword">FROM</span></span><br><span class="line">MYCAT_SEQUENCE <span class="keyword">WHERE</span> NAME <span class="operator">=</span> seq_name;</span><br><span class="line"><span class="keyword">RETURN</span> retval;</span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line">DELIMITER ;</span><br><span class="line">#设置sequence值</span><br><span class="line">DELIMITER $$ </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mycat_seq_setval(seq_name <span class="type">VARCHAR</span>(<span class="number">50</span>),<span class="keyword">VALUE</span> <span class="type">INTEGER</span>) <span class="keyword">RETURNS</span> </span><br><span class="line"><span class="type">VARCHAR</span>(<span class="number">64</span>)</span><br><span class="line"><span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">UPDATE</span> MYCAT_SEQUENCE <span class="keyword">SET</span> current_value <span class="operator">=</span> <span class="keyword">VALUE</span></span><br><span class="line"><span class="keyword">WHERE</span> NAME <span class="operator">=</span> seq_name;</span><br><span class="line"><span class="keyword">RETURN</span> mycat_seq_currval(seq_name);</span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line">DELIMITER ;</span><br><span class="line">#获取下一个sequence值</span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mycat_seq_nextval(seq_name <span class="type">VARCHAR</span>(<span class="number">50</span>)) <span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">64</span>) </span><br><span class="line"><span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">UPDATE</span> MYCAT_SEQUENCE</span><br><span class="line"><span class="keyword">SET</span> current_value <span class="operator">=</span> current_value <span class="operator">+</span> increment <span class="keyword">WHERE</span> NAME <span class="operator">=</span> seq_name;</span><br><span class="line"><span class="keyword">RETURN</span> mycat_seq_currval(seq_name);</span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>初始化一个值</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#初始化序列表记录</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> MYCAT_SEQUENCE(NAME,current_value,increment) <span class="keyword">VALUES</span> (<span class="string">&#x27;GLOBAL&#x27;</span>, <span class="number">100</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>此时情况如下图 <img src="https://www.itze.cn/wp-content/uploads/2022/03/function.png"></p><ol start="3"><li>sequence_db_conf.properties相关配置,指定 sequence 相关配置在哪个节点上： 例如，上图中mycat_sequence中有一条数据的NAME值为GLOBAL sequence_db_conf.properties配置如下,配置中的dn1，根据自己实际schema.xml中配置的主机对应的节点！ GLOBAL&#x3D;dn1 <strong>注意：</strong> MYCAT_SEQUENCE表和以上的3个function，需要放在同一个节点上。function请直接在具体节点的数据库上执行，如果执行的时候报： <strong>you might want to use the less safe log_bin_trust_function_creators variable</strong> 需要对数据库做如下设置：</li></ol><p>- windows下 my.ini[mysqld]加上 log_bin_trust_function_creators&#x3D;1 - linux下&#x2F;etc&#x2F;my.cnf 下 my.ini[mysqld]加上 log_bin_trust_function_creators&#x3D;1 修改完后，即可在mysql数据库中执行上面的函数。 <strong>使用示例：</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table1(id,name) <span class="keyword">values</span>(<span class="string">&#x27;next value for MYCATSEQ_GLOBAL&#x27;</span>,&quot;testName&quot;)；</span><br></pre></td></tr></table></figure><h4 id="注意：-next-value-for-MYCATSEQ-GLOBAL函数亲测1-6-7需要添加单引号！单引号不能省略！否则无法识别函数！"><a href="#注意：-next-value-for-MYCATSEQ-GLOBAL函数亲测1-6-7需要添加单引号！单引号不能省略！否则无法识别函数！" class="headerlink" title="注意： next value for MYCATSEQ_GLOBAL函数亲测1.6.7需要添加单引号！单引号不能省略！否则无法识别函数！"></a>注意： next value for MYCATSEQ_GLOBAL函数亲测1.6.7需要添加单引号！单引号不能省略！否则无法识别函数！</h4><p>函数使用格式：next value for MYCATSEQ_+MYCAT_SEQUENCE表中NAME的值</p><h3 id="本地时间戳方式"><a href="#本地时间戳方式" class="headerlink" title="本地时间戳方式"></a>本地时间戳方式</h3><p>ID&#x3D;64位二进制(42(毫秒)+5(机器 ID)+5(业务编码)+12(重复累加)换算成十进制为18位数的long类型，每毫秒可以并发 12 位二进制的累加。 使用方式： 1. 配置 server.xml</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>property name<span class="operator">=</span>&quot;sequnceHandlerType&quot;<span class="operator">&gt;</span><span class="number">2</span><span class="operator">&lt;</span><span class="operator">/</span>property<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在mycat下配置：sequence_time_conf.properties WORKID&#x3D;0-31 任意整 DATAACENTERID&#x3D;0-31 任意整数 多个个 mycat 节点下每个 mycat 配置的 WORKID，DATAACENTERID 不同，组成唯一标识，总共支持32*32&#x3D;1024 种组合。 ID 示例：5676308347551</li></ol><h3 id="分布式ZK-ID生成器"><a href="#分布式ZK-ID生成器" class="headerlink" title="分布式ZK ID生成器"></a>分布式ZK ID生成器</h3><p>配置server.xml</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>property name<span class="operator">=</span>&quot;sequnceHandlerType&quot;<span class="operator">&gt;</span><span class="number">3</span><span class="operator">&lt;</span><span class="operator">/</span>property<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>Zk的连接信息统一在myid.properties的zkURL属性中配置。 基于ZK与本地配置的分布式ID生成器(可以通过 ZK 获取集群（机房）唯一 InstanceID，也可以通过配置文 件配置 InstanceID) ID 结构：long 64 位，ID 最大可占 63 位 * current time millis(微秒时间戳 38 位,可以使用 17 年)clusterId（机房或者 ZKid，通过配置文件配置 5 位）instanceId（实例 ID，可以通过 ZK 或者配置文件获取，5 位）threadId（线程 ID，9 位） increment(自增,6 位) * 一共 63 位，可以承受单机房单机器单线程 1000_(2^6)&#x3D;640000 的并发。 * 一共 63 位，可以承受单机房单机器单线程 1000_(2^7)&#x3D;1280000 的并发。 * 无悲观锁，无强竞争，吞吐量更高 配置文件：sequence_distributed_conf.properties，只要配置里面：INSTANCEID&#x3D;ZK 就是从 ZK 上获取 InstanceID。</p><h3 id="Zk递增方式"><a href="#Zk递增方式" class="headerlink" title="Zk递增方式"></a>Zk递增方式</h3><p>配置server.xml</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>property name<span class="operator">=</span>&quot;sequnceHandlerType&quot;<span class="operator">&gt;</span><span class="number">4</span><span class="operator">&lt;</span><span class="operator">/</span>property<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>Zk的连接信息统一在myid.properties 的zkURL属性中配置 * 配置文件：sequence_conf.properties * 只要配置好ZK地址和表名的如下属性 * TABLE.MINID 某线程当前区间内最小值 * TABLE.MAXID 某线程当前区间内最大值 * TABLE.CURID 某线程当前区间内当前值 * 文件配置的 MAXID 以及 MINID 决定每次取得区间，这个对于每个线程或者进程都有效 * 文件中的这三个属性配置只对第一个进程的第一个线程有效，其他线程和进程会动态读取ZK</p><h3 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h3><ol><li>使用catelet注解方式 &#x2F;*!mycat:catlet&#x3D;demo.catlets.BatchGetSequence *&#x2F;SELECT mycat_get_seq(‘GLOBAL’,100); 注：此方法表示获取 GLOBAL 的 100 个 sequence 值，例如当前 GLOBAL 的最大 sequence 值为 5000， 则通过此方式返回的是 5001，同时更新数据库中的 BLOBAL 的最大 sequence 值为 5100。</li><li>利用zookeeper方式实现…</li></ol><h3 id="自增长主键方式"><a href="#自增长主键方式" class="headerlink" title="自增长主键方式"></a>自增长主键方式</h3><p><strong>说明：</strong> 1. mysql 本身对非自增长主键，使用 last_insert_id()是不会返回结果的，只会返回 0； 2. mysql 只会对定义自增长主键，可以用 last_insert_id()返回主键值； 3. MyCAT目前提供了自增长主键功能，但是如果对应的mysql节点上数据表，没有定义auto_increment，那么在 MyCAT层调用last_insert_id()也是不会返回结果的。 <strong>正确的配置方式</strong> 1. 首先你的表需要有自增ID主键 2. 在mycat配置文件schema.xml中配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table name=&quot;talbeName&quot; primaryKey=&quot;id&quot; autoIncrement=&quot;true&quot; dataNode=&quot;dn1&quot; subTables=&quot;talbeName$0-10&quot; rule=&quot;modRuleName&quot;&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>主要是添加primaryKey&#x3D;”id” autoIncrement&#x3D;”true” 这两个属性 3. 在MYCAT_SEQUENCE表中，添加记录值，这里操作同数据库模式中，但是添加的记录值需要时schema.xml配置中table标签中的name值的全部大写 例如：name&#x3D;”talbeName”，那么MYCAT_SEQUENCE表中NAME值应该是：TABLENAME 4. 修改mycat对应 sequence_db_conf.properties 增加相应设置，这一步同数据库模式，如下 TABLENAME&#x3D;dn1</p><h4 id="完成所有配置后不要忘记重启mycat服务！"><a href="#完成所有配置后不要忘记重启mycat服务！" class="headerlink" title="完成所有配置后不要忘记重启mycat服务！"></a>完成所有配置后不要忘记重启mycat服务！</h4><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>作者在测试使用数据库模式时，会遇到1062问题，即mysql在插入一条数据是报自增主键值已存在，多次测试均会出现，目前mycat官方社区还没有回复这个问题，不知道是不是1.6.7版本的问题 第一次测试写入93条数据，出现了20次 第二次测试写入722条数据，636条成功写入，86条同样的原因失败 作者最后使用的是自增长主键方式，暂时没有出现1062问题</p>]]></content>
      
      
      <categories>
          
          <category> Mycat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mycat </tag>
            
            <tag> 全局序列号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于HA机制的Mycat高可用</title>
      <link href="/2022/01/27/%E5%9F%BA%E4%BA%8Eha%E6%9C%BA%E5%88%B6%E7%9A%84mycat%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
      <url>/2022/01/27/%E5%9F%BA%E4%BA%8Eha%E6%9C%BA%E5%88%B6%E7%9A%84mycat%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统：CentOS 7</li><li>Mycat版本：Mycat1.6.7.6</li><li>HAproxy版本：1.5.18</li><li>Keepalived版本：1.4.2</li></ul><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>Mycat安装：<a href="https://www.itze.cn/linux/937.html" title="CentOS安装Keepalived">CentOS安装Keepalived</a></li><li>HAproxy安装：<a href="https://www.itze.cn/linux/866.html" title="CentOS安装HAproxy">CentOS安装HAproxy</a></li><li>Keepalived：<a href="https://www.itze.cn/mycat/890.html" title="Mycat1.6.7.6安装与启动">Mycat1.6.7.6安装与启动</a></li></ul><h2 id="高可用方案"><a href="#高可用方案" class="headerlink" title="高可用方案"></a>高可用方案</h2><p>在实际项目中，Mycat服务也需要考虑高可用性，如果Mycat所在服务器出现宕机，或Mycat服务故障，需要有备机提供服务，需要考虑Mycat集群，可以使用 <strong>HAProxy + Keepalived</strong> 配合两台+Mycat搭起Mycat集群实现高可用性。HAProxy实现了MyCat多节点的集群高可用和负载均衡，而HAProxy自身的高可用则可以通过Keepalived来实现 <img src="https://www.itze.cn/wp-content/uploads/2022/01/MASTER_BACKUP.png"> <img src="https://www.itze.cn/wp-content/uploads/2022/01/host.png"></p><h2 id="HAproxy配置"><a href="#HAproxy配置" class="headerlink" title="HAproxy配置"></a>HAproxy配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">global</span><br><span class="line">         log 127.0.0.1 local0</span><br><span class="line">         #log 127.0.0.1 local1 notice</span><br><span class="line">         #log loghost local0 info</span><br><span class="line">         maxconn 4096</span><br><span class="line">         chroot /usr/local/haproxy</span><br><span class="line">         pidfile /usr/data/haproxy/haproxy.pid</span><br><span class="line">         uid 99</span><br><span class="line">         gid 99</span><br><span class="line">         daemon</span><br><span class="line">         #debug</span><br><span class="line">         #quiet</span><br><span class="line">defaults</span><br><span class="line">         log global</span><br><span class="line">         mode tcp</span><br><span class="line">         option abortonclose</span><br><span class="line">         option redispatch</span><br><span class="line">         retries 3</span><br><span class="line">         maxconn 2000</span><br><span class="line">         timeout connect 5000</span><br><span class="line">         timeout client 50000</span><br><span class="line">         timeout server 50000</span><br><span class="line">listen proxy_status </span><br><span class="line">     bind :8081</span><br><span class="line">         mode tcp</span><br><span class="line">         balance roundrobin</span><br><span class="line">         server mycat_12 192.168.100.11:8066 check inter 10s</span><br><span class="line">         server mycat_12 192.168.100.12:8066 check inter 10s</span><br><span class="line">frontend admin_stats </span><br><span class="line">     bind :8082</span><br><span class="line">         mode http</span><br><span class="line">         stats enable</span><br><span class="line">         option httplog</span><br><span class="line">         maxconn 10</span><br><span class="line">         stats refresh 30s</span><br><span class="line">         stats uri /admin</span><br><span class="line">         stats auth admin:123456</span><br><span class="line">         stats hide-version</span><br><span class="line">         stats admin if TRUE</span><br></pre></td></tr></table></figure><p>配置完HAproxy，可以先验证一下负载均衡,把配置的Mycat服务都启动起来，我这里只配置了两台Mycat服务，根据实际需求可更改，启动Mycat，再启动HAproxy，以访问Mycat的形式访问，把端口号和IP改为HAproxy的，举例</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -umycat -p123456 -h192.168.100.13 -P8081</span><br></pre></td></tr></table></figure><p>访问HAproxyWeb端页面地址：<a href="http://192.168.100.13:8082/admin">http://192.168.100.13:8082/admin</a> 用户名：admin，密码：123456，界面截图略过 这里配置一台HAproxy之后，配置多台Mycat服务，到这里已经可以达到一定抗风险能力，此时就可以把原来操作Mycat服务链接改成HAproxy，让原来走Mycat服务操作数据库更改为通过HAproxy访问，此时流程应该是这样 <img src="https://www.itze.cn/wp-content/uploads/2022/01/HAproxy_mycat.png"> 经测试，手动模拟其中一台Mycat服务宕机，通过HAproxy依然能够访问数据</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果以下Keepalived配置“IP漂移”不成功，只配置HAproxy也是可以的，网络上大多数配置Keepalived的“IP漂移”都是建立在虚拟机上，很少有文章讲在真实服务器上如何配置，至少作者是没遇到一个讲解在真实服务器如何配置，详情见下方Keepalived配置 注：如果需要继续配置使用Keepalived，两台HAproxy配置要保持一致</p><h2 id="Keepalived配置"><a href="#Keepalived配置" class="headerlink" title="Keepalived配置"></a>Keepalived配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">    notification_email &#123;</span><br><span class="line">        gitlab@111.com</span><br><span class="line">    &#125;</span><br><span class="line">     notification_email_from gitlab@111.com</span><br><span class="line">     smtp_server smtp.itze.cn</span><br><span class="line">     smtp_connect_timeout 30</span><br><span class="line">     router_id LVS_DEVEL</span><br><span class="line">     vrrp_skip_check_adv_addr</span><br><span class="line">     vrrp_garp_interval 0</span><br><span class="line">     vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">     #主机配MASTER，备机配BACKUP</span><br><span class="line">     state MASTER</span><br><span class="line">     #所在机器网卡,通过：ifconfig 查看</span><br><span class="line">     interface eth0</span><br><span class="line">     virtual_router_id 51</span><br><span class="line">     #数值越大优先级越高</span><br><span class="line">     priority 100</span><br><span class="line">     advert_int 1</span><br><span class="line">     authentication &#123;</span><br><span class="line">         auth_type PASS</span><br><span class="line">         auth_pass 1111</span><br><span class="line">     &#125;</span><br><span class="line">     virtual_ipaddress &#123;</span><br><span class="line">         #虚拟IP</span><br><span class="line">         192.168.100.20</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.100.20 8081 &#123;</span><br><span class="line">     delay_loop 6</span><br><span class="line">     lb_algo rr</span><br><span class="line">     lb_kind NAT</span><br><span class="line">     persistence_timeout 50</span><br><span class="line">     protocol TCP</span><br><span class="line">     real_server 192.168.100.13 8081 &#123;</span><br><span class="line">         weight 1</span><br><span class="line">         TCP_CHECK &#123;</span><br><span class="line">             connect_timeout 3</span><br><span class="line">             retry 3</span><br><span class="line">             delay_before_retry 3</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    real_server 192.168.100.14 8081 &#123;</span><br><span class="line">         weight 1</span><br><span class="line">         TCP_CHECK &#123;</span><br><span class="line">             connect_timeout 3</span><br><span class="line">             nb_get_retry 3</span><br><span class="line">             delay_before_retry 3</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照在虚拟机上配置，这里配置完之后，启动Mycat,启动Haproxy，启动keepalived之后，就可以通过keepalived中配置的虚拟IP访问数据 举例,此时访问数据是如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -umycat -p123456 -h192.168.100.20 -P8081</span><br></pre></td></tr></table></figure><h3 id="关于虚拟IP"><a href="#关于虚拟IP" class="headerlink" title="关于虚拟IP"></a>关于虚拟IP</h3><p>先说要实现的效果，一切顺利的话，到这里已经完成了文章开头插入的效果，应用服务通过虚拟IP访问数据，算了我还是上个图吧… <img src="https://www.itze.cn/wp-content/uploads/2022/01/%E6%96%87%E5%AD%97%E2%80%94%E2%80%94%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1.png"> 图解文字：MASTER主机没有挂掉之前，都是通过MASTER访问，只有MASTER宕机，IP才会飘移至BACKUP备机，此时我们的应用依旧是固定配置的虚拟IP，不需要改变 重点来了，在虚拟机上我们机器IP都是可以定的，如果是虚拟机做测试，虚拟IP要是和Keepalived中配置的服务在同一个网段，比如本文配置的是192.168.100.13和192.168.100.14，虚拟IP就需要配置192.168.100.xx ,但是在真实云服务器上怎么配置呢？比如使用的服务器是阿里云、腾讯、华为等等厂商的，大多是通过弹性公网IP绑定到云主机，通过固定的服务器IP来访问真实服务器</p><h4 id="华为云服务器测试"><a href="#华为云服务器测试" class="headerlink" title="华为云服务器测试"></a>华为云服务器测试</h4><p>起初没配置之前感觉这TM就是在扯淡，通过虚拟IP访问的通？？？怎么可能访问的通这不是把智商按在地上摩擦吗？ 带着不可能的疑惑一顿操作，作者使用测试的是华为弹性云服务器，在真实服务器上做测试，keepalived配置中的虚拟IP不知道配置什么，只是知道要在同一网段，但是服务器买的时候弹性公网IP要挨着买? 于是就先ifconfig看一下网卡的地址，虚拟IP就随便设置了一个和网卡地址相同网段的IP，重启两台机器的Keepalived，访问测试，不通，两台机器更不用说通过虚拟IP通信了，最终经过摸索，能够在一台机器上通过虚拟IP访问数据，但是两台不能通信 <strong>一台真实服务器通过虚拟IP操作数据的情况配置</strong> 修改Keepalived配置中，虚拟IP和virtual_server后面的IP不要配置相同，但是要在一个网段，如下配置，仅能在安装Keepalived的这台本机通过虚拟IP访问数据，如果只能这样，Keepalived只起到了保护真实数据服务IP的作用，主备切换就没实现，倒还不如直接通过HAproxy访问数据</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">virtual_ipaddress &#123;</span><br><span class="line">         #虚拟IP</span><br><span class="line">         192.168.100.20</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.100.21 8081 &#123;</span><br></pre></td></tr></table></figure><p>最后经过探索查阅才知道，比如作者是华为云厂商的服务器，就需要到华为云控制台去手动申请一个虚拟IP地址，然后经过一系列操作才能达到以上在虚拟机中实现的能主备切换，达到高可用，最终因为缺少一个弹性公网IP没去实现真实服务器IP漂移，只能等到后续业务真正需要的时候再来实现，到时候再来更新</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>如果想去捣鼓，这里奉上华为云申请虚拟IP的官方操作文档：<a href="https://support.huaweicloud.com/usermanual-vpc/vpc_vip_0000.html" title="虚拟私有云VPC">虚拟私有云VPC</a> 华为私有云VPC操作PDF版本下载：<a href="https://support.huaweicloud.com/usermanual-vpc/vpc-usermanual.pdf" title="https://support.huaweicloud.com/usermanual-vpc/vpc-usermanual.pdf">https://support.huaweicloud.com/usermanual-vpc/vpc-usermanual.pdf</a> 建议查看PDF版本，PDF版本有实例更为详细，如果你真是服务器环境搞出来了，记得艾特我！至少给我发个邮件:satisfied: :envelope:邮箱：<strong><a href="mailto:&#103;&#x69;&#116;&#108;&#x61;&#98;&#x40;&#49;&#49;&#49;&#x2e;&#99;&#111;&#x6d;">&#103;&#x69;&#116;&#108;&#x61;&#98;&#x40;&#49;&#49;&#49;&#x2e;&#99;&#111;&#x6d;</a></strong> 互相学习!</p>]]></content>
      
      
      <categories>
          
          <category> HAproxy </category>
          
          <category> Keepalived </category>
          
          <category> Mycat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> HAproxy </tag>
            
            <tag> Keepalived </tag>
            
            <tag> Mycat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装Keepalived</title>
      <link href="/2022/01/27/centos%E5%AE%89%E8%A3%85keepalived/"/>
      <url>/2022/01/27/centos%E5%AE%89%E8%A3%85keepalived/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统：CentOS 7</li><li>Keepalived版本：1.4.2</li></ul><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>下载Keepalived安装包 - 方式一，将下载好的安装包上传至服务器，点击下载：<a href="https://itze.cn/uploads/keepalived-1.4.2.tar.gz" title="keepalived-1.4.2.tar.gz">keepalived-1.4.2.tar.gz</a> - 方式二，通过wget命令直接在服务器下载</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://itze.cn/uploads/keepalived-1.4.2.tar.gz</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>解压到&#x2F;usr&#x2F;local&#x2F;src（位置自己可以改变）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf keepalived-1.4.2.tar.gz -C /usr/local/src</span><br></pre></td></tr></table></figure><p>安装依赖插件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y gcc openssl-devel popt-devel</span><br></pre></td></tr></table></figure><p>进入解压后的目录，进行配置，进行编译</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src/keepalived-1.4.2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/keepalived</span><br></pre></td></tr></table></figure><p>进行编译，完成后进行安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>运行前配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/local/src/keepalived-1.4.2/keepalived/etc/init.d/keepalived /etc/init.d/</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /etc/keepalived</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/local/src/keepalived-1.4.2/keepalived/etc/sysconfig/keepalived /etc/sysconfig/</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/local/keepalived/sbin/keepalived /usr/sbin/</span><br></pre></td></tr></table></figure><p>配置文件的修改这里不介绍，根据自己业务需要修改，会在本站文章：基于HA机制的Mycat高可用中有介绍 启动验证</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status keepalived</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Keepalived </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> Keepalived </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ERROR: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</title>
      <link href="/2022/01/21/error-cannot-connect-to-the-docker-daemon-at-unix-var-run-docker-sock-is-the-docker-daemon-running/"/>
      <url>/2022/01/21/error-cannot-connect-to-the-docker-daemon-at-unix-var-run-docker-sock-is-the-docker-daemon-running/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统：CentOS 7 Docker版本：Docker version 20.10.10</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>docker更改默认存储目录，CentOS默认存储目录位置：&#x2F;var&#x2F;local&#x2F;docker，需要更改至其他挂载目录，比如更改到&#x2F;data&#x2F;docker,发现迁移之后所有docker命令都用不了了</p><h2 id="更改存储位置"><a href="#更改存储位置" class="headerlink" title="更改存储位置"></a>更改存储位置</h2><p>1.停止docker服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><p>2.打包备份docker原文件,建议先备份，以防万一</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /var/lib/</span><br></pre></td></tr></table></figure><p>打包备份</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -cvf docker.tar docker/</span><br></pre></td></tr></table></figure><p>3.移动文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /var/lib/docker /data/</span><br></pre></td></tr></table></figure><p>4.修改默认存储位置,在图中标注红框位置加上–graph&#x3D;&#x2F;data&#x2F;docker 指定存储位置，保存并退出</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2022/01/ExecStart.png"> 正确配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd --graph=/data/docker -H fd:// --containerd=/run/containerd/containerd.sock -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl start docker</span><br></pre></td></tr></table></figure><p>查看存储位置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker infogrep Dir</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# docker infogrep Dir</span><br><span class="line"> Docker Root Dir: /var/lib/docker</span><br></pre></td></tr></table></figure><h2 id="解决题目错误"><a href="#解决题目错误" class="headerlink" title="解决题目错误"></a>解决题目错误</h2><p>一切都是想象的那么顺利，然后启动后发现容器都没了，存储路径是改变了，这里容易犯错的地方是在移动的地方 正确的是mv &#x2F;var&#x2F;lib&#x2F;docker &#x2F;data&#x2F; 错误的移动mv &#x2F;var&#x2F;lib&#x2F;docker &#x2F;data&#x2F;docker 看出问题了吗，就是在后面路径多加一层docker，这样执行之后路径便是&#x2F;data&#x2F;docker&#x2F;docker，所以报找不到。 如果此时你并没有报找不到容器，而是报以下错误，docker服务能正常启动，但是所有docker命令都用不了，执行任何docker命令都报以下错误 <strong>ERROR: Cannot connect to the Docker daemon at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock. Is the docker daemon running?</strong> 解决办法 修改</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><p>查看ExecStart，如果和下面一样， ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd -H fd:&#x2F;&#x2F; –containerd&#x3D;&#x2F;run&#x2F;containerd&#x2F;containerd.sock 在最后面添加：-H unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock 添加之后 <strong>ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd -H fd:&#x2F;&#x2F; –containerd&#x3D;&#x2F;run&#x2F;containerd&#x2F;containerd.sock -H unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock</strong> 重启docker服务器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl start docker</span><br></pre></td></tr></table></figure><p>所有docker命令都无法使用这个问题搞了好几个小时没解决，最后同事给解决了</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mycat1.6.7.6对Mysql分表配置</title>
      <link href="/2022/01/18/mycat1-6-7-6%E5%AF%B9mysql%E5%88%86%E8%A1%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/01/18/mycat1-6-7-6%E5%AF%B9mysql%E5%88%86%E8%A1%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统：CentOS 7</li><li>Mysql版本：Mysql8</li><li>Mycat版本：Mycat1.6.7.6</li></ul><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p><strong>需要对用户表分片操作，要求分成3个分片</strong> 用户表结构 <img src="https://www.itze.cn/wp-content/uploads/2022/01/%E5%AD%97%E6%AE%B5.png"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>涉及需要修改的配置文件，schema.xml、rule.xml 先看一下配置，下面解释</p><h3 id="最简单的同一台机器，同一个数据库，分表配置示例"><a href="#最简单的同一台机器，同一个数据库，分表配置示例" class="headerlink" title="最简单的同一台机器，同一个数据库，分表配置示例"></a>最简单的同一台机器，同一个数据库，分表配置示例</h3><p><strong>schema.xml配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;</span><br><span class="line">&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot; randomDataNode=&quot;dn1&quot; dataNode=&quot;dn1&quot;&gt;</span><br><span class="line">        &lt;!-- 配置需要分片的表 --&gt;</span><br><span class="line">        &lt;table name=&quot;t_user&quot; dataNode=&quot;dn1&quot; subTables=&quot;t_user$1-3&quot; rule=&quot;mod_rule&quot;&gt;&lt;/table&gt;</span><br><span class="line">    &lt;/schema&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;localhost1&quot; database=&quot;db1&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;</span><br><span class="line">              writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;</span><br><span class="line">        &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</span><br><span class="line">        &lt;!-- can have multi write hosts --&gt;</span><br><span class="line">        &lt;writeHost host=&quot;hostM1&quot; url=&quot;jdbc:mysql://127.0.0.1:3306&quot; user=&quot;root&quot;</span><br><span class="line">                   password=&quot;123456&quot;&gt;</span><br><span class="line">        &lt;/writeHost&gt;</span><br><span class="line">    &lt;/dataHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mycat:schema&gt;</span><br></pre></td></tr></table></figure><p><strong>rule.xml配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!-- - - Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); </span><br><span class="line">    - you may not use this file except in compliance with the License. - You </span><br><span class="line">    may obtain a copy of the License at - - http://www.apache.org/licenses/LICENSE-2.0 </span><br><span class="line">    - - Unless required by applicable law or agreed to in writing, software - </span><br><span class="line">    distributed under the License is distributed on an &quot;AS IS&quot; BASIS, - WITHOUT </span><br><span class="line">    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. - See the </span><br><span class="line">    License for the specific language governing permissions and - limitations </span><br><span class="line">    under the License. --&gt;</span><br><span class="line">&lt;!DOCTYPE mycat:rule SYSTEM &quot;rule.dtd&quot;&gt;</span><br><span class="line">&lt;mycat:rule xmlns:mycat=&quot;http://io.mycat/&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;tableRule name=&quot;mod_rule&quot;&gt; &lt;!-- 分片规则名称，可随意填写，与schema.xml中rule=&quot;mod_rule&quot;对应即可 --&gt;</span><br><span class="line">        &lt;rule&gt;</span><br><span class="line">            &lt;columns&gt;user_id&lt;/columns&gt; &lt;!-- 对应真实数据表字段，一般是该表ID主键 --&gt;</span><br><span class="line">            &lt;algorithm&gt;mod-long&lt;/algorithm&gt; &lt;!-- 使用哪个分片算法，要与下面函数名称对应 --&gt;</span><br><span class="line">        &lt;/rule&gt;</span><br><span class="line">    &lt;/tableRule&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 以下是官方提供的分片所涉及算法函数 --&gt;</span><br><span class="line">    &lt;!-- 暂时就是使用mod-long这一个函数 --&gt;</span><br><span class="line">    &lt;function name=&quot;mod-long&quot; class=&quot;io.mycat.route.function.PartitionByMod&quot;&gt;</span><br><span class="line">        &lt;!-- how many data nodes --&gt;</span><br><span class="line">        &lt;property name=&quot;count&quot;&gt;3&lt;/property&gt;</span><br><span class="line">    &lt;/function&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mycat:rule&gt;</span><br></pre></td></tr></table></figure><h3 id="配置解释"><a href="#配置解释" class="headerlink" title="配置解释"></a>配置解释</h3><ol><li>schema.xml中部分标签 <strong>table</strong></li></ol><p>- name：如果进行分表操作了，该值为逻辑表表名，不需要存在对应的真实表 - dataNode：节点名称 - subTables：作用可以理解为包含哪些分片，对应的为真实表表名，例如本文章配置中subTables&#x3D;”t_user$1-3”，也可以单独写，中间用英文逗号隔开，则需要在真实dn1节点对应的localhost1这台机器的db1数据库下创建t_user1、t_user2、t_user3三张表，表结构保持一致 本文示例： <img src="https://www.itze.cn/wp-content/uploads/2022/01/t_user.png"> - rule：分片规则，值对应rule.xml中tableRule标签name值 <strong>dataNode</strong> - name：节点名称，可随意填写 - dataHost：对应dataHost标签中name值，保持一致即可 - database：对应dataHost中name值对应的dataHost那台机器中真实存在的数据库名称，比如像本文，需要提前创建好数据库库名为db1的数据库 2. rule.xml中部分标签 <strong>tableRule</strong> - name：分片规则名称 - columns：分片字段，该字段一般为表中的主键 - algorithm：使用那种分片算法对应的函数名 - function中需要注意一点，这里只说取模分片规则的，name&#x3D;”count”对应的数值，需要和分片数量一直，比如本文subTables对应三个分片，这里的数值就要是3 其他标签解释参考：<a href="https://www.itze.cn/mycat/890.html" title="Mycat1.6.7.6安装与启动">Mycat1.6.7.6安装与启动</a> 中的标签解释</p><h3 id="关于操作"><a href="#关于操作" class="headerlink" title="关于操作"></a>关于操作</h3><p>开发者只需要通过操作Mycat服务去操作数据，不需要关心数据在哪个服务器哪个库中，比如你的后端你是Java，只需要将配置数据库的地方改为mycat的服务即可，CRUD和正常操作Mysql一样即可 比如</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jdbc:mysql://127.0.0.1:8066/TESTDB...后面省略</span><br></pre></td></tr></table></figure><ul><li>8066:Mycat服务默认端口</li><li>TESTDB:Mycat配置文件server.xml中配置的逻辑库名</li></ul><p>操作的时候只需操作表名：t_user即可，比如查询</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果使用Mycat1.x版本进行分库操作，需要注意跨库目前不支持JOIN操作，分表不分库Mycat1.6.7.6亲测默认支持JOIN操作，无须配置ER表关系</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
          <category> Mycat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Mycat </tag>
            
            <tag> 分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mycat1.6.7.6对Mysql分库配置</title>
      <link href="/2022/01/17/mycat1-6-7-6%E5%AF%B9mysql%E5%88%86%E5%BA%93%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/01/17/mycat1-6-7-6%E5%AF%B9mysql%E5%88%86%E5%BA%93%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统：CentOS 7</li><li>Mysql版本：Mysql8</li><li>Mycat版本：Mycat1.6.7.6</li><li>host_1:127.0.0.1</li><li>host_2:127.0.0.2</li></ul><h2 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h2><ol><li>方式一：为了方便，可以先通过Mysql账户使用图形化工具Navicat在两台主机不同的Msql服务里创建好数据库及数据表，然后再修改Mycat配置文件，将对应的数据库及数据表配置好</li><li>方式二：提前再Mycat配置文件配置好数据库及数据表，通过Mycat服务去创建，Mycat会帮你自动将不同的数据表创建到配置对应的物理主机的Mysql服务下</li><li>注意：若要通过Mycat1.x版本建表，只能使用建表SQL，Mycat1.x不支持使用Navicat直接建表，这里是指不支持通过Navicat登陆Mycat服务，然后直接创建表，但是可以通过Navicat登陆Mycat</li></ol><h2 id="分库配置"><a href="#分库配置" class="headerlink" title="分库配置"></a>分库配置</h2><p>修改 schema 配置文件</p><h3 id="简单分库配置文件完整示例"><a href="#简单分库配置文件完整示例" class="headerlink" title="简单分库配置文件完整示例"></a>简单分库配置文件完整示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;</span><br><span class="line">&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;</span><br><span class="line">    &lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot; randomDataNode=&quot;dn1&quot; dataNode=&quot;dn1&quot;&gt;</span><br><span class="line">        &lt;table name=&quot;customer&quot; dataNode=&quot;dn2&quot; &gt;&lt;/table&gt;</span><br><span class="line">    &lt;/schema&gt;</span><br><span class="line">    &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;host1&quot; database=&quot;orders&quot; /&gt;</span><br><span class="line">    &lt;dataNode name=&quot;dn2&quot; dataHost=&quot;host2&quot; database=&quot;orders&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dataHost name=&quot;host1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;</span><br><span class="line">              writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;</span><br><span class="line">        &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</span><br><span class="line">        &lt;!-- can have multi write hosts --&gt;</span><br><span class="line">        &lt;writeHost host=&quot;hostM1&quot; url=&quot;jdbc:mysql://127.0.0.1:3306&quot; user=&quot;root&quot;</span><br><span class="line">                   password=&quot;123456&quot;&gt;</span><br><span class="line">        &lt;/writeHost&gt;</span><br><span class="line">    &lt;/dataHost&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dataHost name=&quot;host2&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;</span><br><span class="line">              writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;</span><br><span class="line">        &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</span><br><span class="line">        &lt;!-- can have multi write hosts --&gt;</span><br><span class="line">        &lt;writeHost host=&quot;hostM2&quot; url=&quot;jdbc:mysql://127.0.0.2:3306&quot; user=&quot;root&quot;</span><br><span class="line">                   password=&quot;123456&quot;&gt;</span><br><span class="line">        &lt;/writeHost&gt;</span><br><span class="line">    &lt;/dataHost&gt;</span><br><span class="line">&lt;/mycat:schema&gt;</span><br></pre></td></tr></table></figure><h3 id="配置解释"><a href="#配置解释" class="headerlink" title="配置解释"></a>配置解释</h3><p>如果通过方式二去创建表，只有创建表明为：customer的时候，Mycat会自动帮你把表创建到对应的dn2的Host2主机配置的Mysql服务，创建其他的任意表，都将默认创建到dn1对应的Host1主机配置的Mysql服务</p><h3 id="关于操作"><a href="#关于操作" class="headerlink" title="关于操作"></a>关于操作</h3><p>开发者只需要通过操作Mycat服务去操作数据，不需要关心数据在哪个服务器哪个库中，比如你的后端你是Java，只需要将配置数据库的地方改为mycat的服务即可，CRUD和正常操作Mysql一样即可 比如</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jdbc:mysql://127.0.0.1:8066/TESTDB...后面省略</span><br></pre></td></tr></table></figure><ul><li>8066:Mycat服务默认端口</li><li>TESTDB:Mycat配置文件server.xml中配置的逻辑库名</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果使用Mycat1.x版本进行分库操作，需要注意跨库目前不支持JOIN操作，分表不分库Mycat1.6.7.6亲测默认支持JOIN操作，无须配置ER表关系</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
          <category> Mycat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Mycat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mycat1.6.7.6安装与启动</title>
      <link href="/2022/01/17/mycat1-6-7-6%E5%AE%89%E8%A3%85%E4%B8%8E%E5%90%AF%E5%8A%A8/"/>
      <url>/2022/01/17/mycat1-6-7-6%E5%AE%89%E8%A3%85%E4%B8%8E%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统：CentOS 7</li><li>Mycat版本：Mycat1.6.7.6</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>首先下载Mycat的压缩包，Mycat1官网：<a href="http://www.mycat.org.cn/mycat1.html" title="http://www.mycat.org.cn/mycat1.html">http://www.mycat.org.cn/mycat1.html</a> Mycat1.6.7.6官网下载地址：<a href="http://dl.mycat.org.cn/1.6.7.6/" title="http://dl.mycat.org.cn/1.6.7.6/">http://dl.mycat.org.cn/1.6.7.6/</a> 找到最新日期的下载即可</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>将下载好的压缩包，上传至服务器解压即可，无须编译安装 解压</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf Mycat-server-1.6.7.6-release-linux.tar.gz(名字改成自己下载的压缩包名称)</span><br></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>涉及到需要修改的配置文件 - server.xml：定义用户以及系统相关变量，如端口等 - schema.xml：定义逻辑库，表、分片节点等内容 1. 修改配置文件server.xml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;user name=&quot;mycat&quot; defaultAccount=&quot;true&quot;&gt;       &lt;!-- mycat登陆用户名 --&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot;&gt;123456&lt;/property&gt; &lt;!-- mycat登陆密码 --&gt;</span><br><span class="line">    &lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt;  &lt;!-- mycat连接逻辑库 --&gt;</span><br><span class="line">    &lt;property name=&quot;defaultSchema&quot;&gt;TESTDB&lt;/property&gt;  &lt;!-- mycat连接逻辑库 --&gt;</span><br><span class="line">&lt;/user&gt;</span><br></pre></td></tr></table></figure><p>配置解释 - user name&#x3D;”mycat”：通过Mycat服务连接Mysql服务的用户名，可随意修改 - name&#x3D;”schemas”：Mycat的逻辑库TESTDB，可随意修改 2. 修改配置文件 schema.xml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;</span><br><span class="line">&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot; randomDataNode=&quot;dn1&quot; dataNode=&quot;dn1&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/schema&gt;</span><br><span class="line">    &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;host1&quot; database=&quot;testdb&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dataHost name=&quot;host1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;</span><br><span class="line">              writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;</span><br><span class="line">        &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</span><br><span class="line">        &lt;!-- can have multi write hosts --&gt;</span><br><span class="line">        &lt;writeHost host=&quot;hostM1&quot; url=&quot;jdbc:mysql://127.0.0.1:3306&quot; user=&quot;root&quot;</span><br><span class="line">                   password=&quot;123456&quot;&gt;</span><br><span class="line">        &lt;/writeHost&gt;</span><br><span class="line">    &lt;/dataHost&gt;</span><br><span class="line">&lt;/mycat:schema&gt;</span><br></pre></td></tr></table></figure><h3 id="标签解释"><a href="#标签解释" class="headerlink" title="标签解释"></a>标签解释</h3><h4 id="schema"><a href="#schema" class="headerlink" title="schema"></a>schema</h4><ul><li>name：对应Server.xml中配置的逻辑库名TESTDB</li><li>checkSQLschema：当该值设置为true时，如果我们执行语句select * from TESTDB.travelrecord;则MyCat会把语句修改为select * from travelrecord;即把表示schema的字符去掉，避免发送到后端数据库执行时报（ERROR 1146 (42S02): Table ‘testdb.travelrecord’ doesn’t exist）。不过，即使设置该值为 true ，如果语句所带的是并非是schema指定的名字，例如：select * from db1.travelrecord; 那么MyCat并不会删除db1这个字段，如果没有定义该库的话则会报错，所以在提供SQL语句的最好是不带这个字段。</li><li>sqlMaxLimit：当该值设置为某个数值时。每条执行的SQL语句，如果没有加上limit语句，MyCat也会自动的加上所对应的值。例如设置值为100，执行select * from TESTDB.travelrecord;的效果为和执行select * from TESTDB.travelrecord limit 100;相同设置该值的话，MyCat默认会把查询到的信息全部都展示出来，造成过多的输出。所以，在正常使用中，还是建议加上一个值，用于减少过多的数据返回。当然SQL语句中也显式的指定limit的大小，不受该属性的约束。需要注意的是，如果运行的schema为非拆分库的，那么该属性不会生效。需要手动添加limit语句。</li><li>randomDataNode和dataNode：同时存在，指定默认存储节点，比如建表默认会创建到该节点下</li></ul><h4 id="dataNode"><a href="#dataNode" class="headerlink" title="dataNode"></a>dataNode</h4><ul><li>name：节点名称，可随意填写</li><li>dataHost：对应dataHost标签中name属性值</li><li>database：真实Mysql服务中创建的数据库名称</li></ul><h4 id="dataHost"><a href="#dataHost" class="headerlink" title="dataHost"></a>dataHost</h4><ul><li>name：主机名称，可随意填写</li><li>maxCon：指定每个读写实例连接池的最大连接。也就是说，标签内嵌套的writeHost、readHost标签都会使用这个属性的值来实例化出连接池的最大连接数。</li><li>minCon：指定每个读写实例连接池的最小连接，初始化连接池的大小。</li><li>balance：负载均衡类型，目前的取值有3种： balance&#x3D;”0”, 不开启读写分离机制，所有读操作都发送到当前可用的writeHost上。 balance&#x3D;”1”，全部的readHost与stand by writeHost参与select语句的负载均衡，简单的说，当双主双从模式(M1-&gt;S1，M2-&gt;S2，并且M1与 M2互为主备)，正常情况下，M2,S1,S2都参与select语句的负载均衡。balance&#x3D;”2”，所有读操作都随机的在writeHost、readhost上分发。balance&#x3D;”3”，所有读请求随机的分发到wiriterHost对应的readhost执行，writerHost不负担读压力，注意balance&#x3D;3只在1.4及其以后版本有，1.3没有。</li><li>writeType：负载均衡类型，目前的取值有3种：writeType&#x3D;”0”, 所有写操作发送到配置的第一个writeHost，第一个挂了切到还生存的第二个writeHost，重新启动后已切换后的为准，切换记录在配置文件中:dnindex.properties，writeType&#x3D;”1”，所有写操作都随机的发送到配置的writeHost，1.5以后废弃不推荐。switchType属性 1 表示不自动切换。 1 默认值，自动切换。 2 基于MySQL主从同步的状态决定是否切换。</li><li>dbType：指定后端连接的数据库类型，目前支持二进制的mysql协议，还有其他使用JDBC连接的数据库。例如：mongodb、oracle、spark等。</li><li>dbDriver：指定连接后端数据库使用的Driver，目前可选的值有native和JDBC。使用native的话，因为这个值执行的是二进制的mysql协议，所以可以使用mysql和maridb。其他类型的数据库则需要使用JDBC驱动来支持。从1.6版本开始支持postgresql的native原始协议。 如果使用JDBC的话需要将符合JDBC 4标准的驱动JAR包放到MYCAT\lib目录下，并检查驱动JAR包中包括如下目录结构的文件：META-INF\services\java.sql.Driver。在这个文件内写上具体的Driver类名，例如：com.mysql.jdbc.Driver。</li><li>switchType： -1 表示不自动切换 1 默认值，自动切换 2 基于MySQL主从同步的状态决定是否切换 心跳语句为 show slave status 3 基于MySQL galary cluster的切换机制（适合集群）（1.4.1） 心跳语句为 show status like ‘wsrep%’</li></ul><h4 id="heartbeat"><a href="#heartbeat" class="headerlink" title="heartbeat"></a>heartbeat</h4><p>这个标签内指明用于和后端数据库进行心跳检查的语句。例如,MYSQL可以使用select user()，Oracle可以使用select 1 from dual等。 这个标签还有一个connectionInitSql属性，主要是当使用Oracla数据库时，需要执行的初始化SQL语句就这个放到这里面来。例如：alter session set nls_date_format&#x3D;’yyyy-mm-dd hh24：mi:ss’(把这里的中文冒号改为英文冒号)，1.4主从切换的语句必须是：show slave status</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>mycat启动相关命令，要先cd 到mycat\bin\路径下 linux 环境为：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./mycat start 启动</span><br><span class="line">./mycat stop 停止</span><br><span class="line">./mycat console 前台运行</span><br><span class="line">./mycat restart 重启服务</span><br><span class="line">./mycat pause 暂停</span><br><span class="line">./mycat status 查看启动状态</span><br></pre></td></tr></table></figure><p>window 启动为： 直接双击运行 startup_nowrap.bat ，如果闪退用 cmd 模式运行查看日志 建议先使用前台运行，便宜查看运行情况</p><h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h2><p>登陆前提，需要机器装有Mysql服务环境，Mycat默认服务端口8066，后台维护端口9066 登陆数据窗口</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -umycat -p123456 -P8066 -h127.0.0.1（换成Mycat服务安装机器IP）</span><br></pre></td></tr></table></figure><p>执行一下命令，查看，注意TESTDB是Server.xml中配置的逻辑库名称</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show database;</span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2022/01/TESTDB.png"></p>]]></content>
      
      
      <categories>
          
          <category> Mycat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mycat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mycat1.6.7.6对Mysql读写分离配置</title>
      <link href="/2022/01/17/mycat1-6-7-6%E5%AF%B9mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/01/17/mycat1-6-7-6%E5%AF%B9mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统：CentOS 7</li><li>Mysql版本：Mysql8</li><li>Mycat版本：Mycat1.6.7.6</li></ul><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>前提Mysql服务已经搭建好主从复制，Mysql搭建主从复制可参考：<a href="https://www.itze.cn/mysql/870.html" title="Mysql8实现主从复制">Mysql8实现主从复制</a></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>涉及到需要修改的配置文件 - server.xml：定义用户以及系统相关变量，如端口等 - schema.xml：定义逻辑库，表、分片节点等内容 1. 修改配置文件server.xml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;user name=&quot;mycat&quot; defaultAccount=&quot;true&quot;&gt;       &lt;!-- mycat登陆用户名 --&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot;&gt;123456&lt;/property&gt; &lt;!-- mycat登陆密码 --&gt;</span><br><span class="line">    &lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt;  &lt;!-- mycat连接逻辑库 --&gt;</span><br><span class="line">    &lt;property name=&quot;defaultSchema&quot;&gt;TESTDB&lt;/property&gt;  &lt;!-- mycat连接逻辑库 --&gt;</span><br><span class="line">&lt;/user&gt;</span><br></pre></td></tr></table></figure><p>配置解释 - user name&#x3D;”mycat”：通过Mycat服务连接Mysql服务的用户名，可随意修改 - name&#x3D;”schemas”：Mycat的逻辑库TESTDB，可随意修改 2. 修改配置文件 schema.xml 删除schema标签间的表信息，dataNode标签只留一个，dataHost标签只留一个，writeHost、readHost只留一对</p><h3 id="读写分离完整配置文件（一主一从）"><a href="#读写分离完整配置文件（一主一从）" class="headerlink" title="读写分离完整配置文件（一主一从）"></a>读写分离完整配置文件（一主一从）</h3><p>这里的配置是一主一从，如果服务器数量条件允许建议搭建双主双从</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;</span><br><span class="line">&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot; randomDataNode=&quot;dn1&quot; dataNode=&quot;dn1&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/schema&gt;</span><br><span class="line">    &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;host1&quot; database=&quot;testdb&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dataHost name=&quot;host1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;2&quot;</span><br><span class="line">              writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;</span><br><span class="line">        &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;</span><br><span class="line">        &lt;!-- can have multi write hosts --&gt;</span><br><span class="line">        &lt;writeHost host=&quot;hostM1&quot; url=&quot;jdbc:mysql://127.0.0.1:3306&quot; user=&quot;root&quot;</span><br><span class="line">                   password=&quot;123456&quot;&gt;</span><br><span class="line">                   &lt;readHost host=&quot;hostS1&quot; url=&quot;jdbc:mysql://127.0.0.2:3306&quot; user=&quot;root&quot; </span><br><span class="line">                    password=&quot;123456&quot; /&gt;</span><br><span class="line">        &lt;/writeHost&gt;</span><br><span class="line">    &lt;/dataHost&gt;</span><br><span class="line">&lt;/mycat:schema&gt;</span><br></pre></td></tr></table></figure><h3 id="标签解释"><a href="#标签解释" class="headerlink" title="标签解释"></a>标签解释</h3><h4 id="schema"><a href="#schema" class="headerlink" title="schema"></a>schema</h4><ul><li>name：对应Server.xml中配置的逻辑库名TESTDB</li><li>checkSQLschema：当该值设置为true时，如果我们执行语句select * from TESTDB.travelrecord;则MyCat会把语句修改为select * from travelrecord;即把表示schema的字符去掉，避免发送到后端数据库执行时报（ERROR 1146 (42S02): Table ‘testdb.travelrecord’ doesn’t exist）。不过，即使设置该值为 true ，如果语句所带的是并非是schema指定的名字，例如：select * from db1.travelrecord; 那么MyCat并不会删除db1这个字段，如果没有定义该库的话则会报错，所以在提供SQL语句的最好是不带这个字段。</li><li>sqlMaxLimit：当该值设置为某个数值时。每条执行的SQL语句，如果没有加上limit语句，MyCat也会自动的加上所对应的值。例如设置值为100，执行select * from TESTDB.travelrecord;的效果为和执行select * from TESTDB.travelrecord limit 100;相同设置该值的话，MyCat默认会把查询到的信息全部都展示出来，造成过多的输出。所以，在正常使用中，还是建议加上一个值，用于减少过多的数据返回。当然SQL语句中也显式的指定limit的大小，不受该属性的约束。需要注意的是，如果运行的schema为非拆分库的，那么该属性不会生效。需要手动添加limit语句。</li><li>randomDataNode和dataNode：同时存在，指定默认存储节点，比如建表默认会创建到该节点下</li></ul><h4 id="dataNode"><a href="#dataNode" class="headerlink" title="dataNode"></a>dataNode</h4><ul><li>name：节点名称，可随意填写</li><li>dataHost：对应dataHost标签中name属性值</li><li>database：真实Mysql服务中创建的数据库名称</li></ul><h4 id="dataHost"><a href="#dataHost" class="headerlink" title="dataHost"></a>dataHost</h4><ul><li>name：主机名称，可随意填写</li><li>maxCon：指定每个读写实例连接池的最大连接。也就是说，标签内嵌套的writeHost、readHost标签都会使用这个属性的值来实例化出连接池的最大连接数。</li><li>minCon：指定每个读写实例连接池的最小连接，初始化连接池的大小。</li><li>balance：负载均衡类型，目前的取值有3种： balance&#x3D;”0”, 不开启读写分离机制，所有读操作都发送到当前可用的writeHost上。 balance&#x3D;”1”，全部的readHost与stand by writeHost参与select语句的负载均衡，简单的说，当双主双从模式(M1-&gt;S1，M2-&gt;S2，并且M1与 M2互为主备)，正常情况下，M2,S1,S2都参与select语句的负载均衡。balance&#x3D;”2”，所有读操作都随机的在writeHost、readhost上分发。balance&#x3D;”3”，所有读请求随机的分发到wiriterHost对应的readhost执行，writerHost不负担读压力，注意balance&#x3D;3只在1.4及其以后版本有，1.3没有。</li><li>writeType：负载均衡类型，目前的取值有3种：writeType&#x3D;”0”, 所有写操作发送到配置的第一个writeHost，第一个挂了切到还生存的第二个writeHost，重新启动后已切换后的为准，切换记录在配置文件中:dnindex.properties，writeType&#x3D;”1”，所有写操作都随机的发送到配置的writeHost，1.5以后废弃不推荐。switchType属性 1 表示不自动切换。 1 默认值，自动切换。 2 基于MySQL主从同步的状态决定是否切换。</li><li>dbType：指定后端连接的数据库类型，目前支持二进制的mysql协议，还有其他使用JDBC连接的数据库。例如：mongodb、oracle、spark等。</li><li>dbDriver：指定连接后端数据库使用的Driver，目前可选的值有native和JDBC。使用native的话，因为这个值执行的是二进制的mysql协议，所以可以使用mysql和maridb。其他类型的数据库则需要使用JDBC驱动来支持。从1.6版本开始支持postgresql的native原始协议。 如果使用JDBC的话需要将符合JDBC 4标准的驱动JAR包放到MYCAT\lib目录下，并检查驱动JAR包中包括如下目录结构的文件：META-INF\services\java.sql.Driver。在这个文件内写上具体的Driver类名，例如：com.mysql.jdbc.Driver。</li><li>switchType： -1 表示不自动切换 1 默认值，自动切换 2 基于MySQL主从同步的状态决定是否切换 心跳语句为 show slave status 3 基于MySQL galary cluster的切换机制（适合集群）（1.4.1） 心跳语句为 show status like ‘wsrep%’</li></ul><h4 id="heartbeat"><a href="#heartbeat" class="headerlink" title="heartbeat"></a>heartbeat</h4><p>这个标签内指明用于和后端数据库进行心跳检查的语句。例如,MYSQL可以使用select user()，Oracle可以使用select 1 from dual等。 这个标签还有一个connectionInitSql属性，主要是当使用Oracla数据库时，需要执行的初始化SQL语句就这个放到这里面来。例如：alter session set nls_date_format&#x3D;’yyyy-mm-dd hh24：mi:ss’(把这里的中文冒号改为英文冒号)，1.4主从切换的语句必须是：show slave status</p><h4 id="writeHost（写主机）、readHost（读主机）"><a href="#writeHost（写主机）、readHost（读主机）" class="headerlink" title="writeHost（写主机）、readHost（读主机）"></a>writeHost（写主机）、readHost（读主机）</h4><p>这两个标签都指定后端数据库的相关配置给mycat，用于实例化后端连接池。唯一不同的是，writeHost指定写实例、readHost指定读实例，组着这些读写实例来满足系统的要求。 在一个dataHost内可以定义多个writeHost和readHost。但是，如果writeHost指定的后端数据库宕机，那么这个writeHost绑定的所有readHost都将不可用。另一方面，由于这个writeHost宕机系统会自动的检测到，并切换到备用的writeHost上去。</p><h3 id="最后重启Mycat服务即可"><a href="#最后重启Mycat服务即可" class="headerlink" title="最后重启Mycat服务即可"></a>最后重启Mycat服务即可</h3><p>mycat启动相关命令，要先cd 到mycat\bin\路径下 linux 环境为：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./mycat start 启动</span><br><span class="line">./mycat stop 停止</span><br><span class="line">./mycat console 前台运行</span><br><span class="line">./mycat restart 重启服务</span><br><span class="line">./mycat pause 暂停</span><br><span class="line">./mycat status 查看启动状态</span><br></pre></td></tr></table></figure><p>window 启动为： 直接双击运行 startup_nowrap.bat ，如果闪退用 cmd 模式运行查看日志</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>在写主机插入：insert into mytbl values (1,@@hostname); 这里只是举例，测试的时候可以找到一个varchar类型的新增数据时插入：@@hostname @@hostname：不同主机上的名字会显示不一样，再测试查询这个插入的字段对比是哪台机器的即可，注意查询是要通过登陆Mycat服务查询</p><h3 id="关于操作"><a href="#关于操作" class="headerlink" title="关于操作"></a>关于操作</h3><p>开发者只需要通过操作Mycat服务去操作数据，不需要关心数据在哪个服务器哪个库中，比如你的后端你是Java，只需要将配置数据库的地方改为mycat的服务即可，CRUD和正常操作Mysql一样即可 比如</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jdbc:mysql://127.0.0.1:8066/TESTDB...后面省略</span><br></pre></td></tr></table></figure><ul><li>8066:Mycat服务默认端口</li><li>TESTDB:Mycat配置文件server.xml中配置的逻辑库名</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果使用Mycat1.x版本进行分库操作，需要注意跨库目前不支持JOIN操作，分表不分库Mycat1.6.7.6亲测默认支持JOIN操作，无须配置ER表关系</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
          <category> Mycat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Mycat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mycat1.6.7.6对Mysql8支持使用配置</title>
      <link href="/2022/01/17/mycat1-6-7-6%E5%AF%B9mysql8%E6%94%AF%E6%8C%81%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/01/17/mycat1-6-7-6%E5%AF%B9mysql8%E6%94%AF%E6%8C%81%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统：CentOS 7</li><li>Mysql版本：Mysql8</li><li>Mycat版本：Mycat1.6.7.6</li></ul><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>前提需求是已经完成安装了Mysql服务，Mysql的安装可参考：<a href="https://www.itze.cn/mysql/510.html" title="Docker安装Mysql">Docker安装Mysql</a> 这里只介绍Mycat1.6.7.6对Mysql8支持使用配置,其他基于mycat完成读写分离、分库分表等配置详见本站其他文章</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Mycat安装参考：<a href="https://www.itze.cn/mycat/890.html" title="Mycat1.6.7.6安装与启动">Mycat1.6.7.6安装与启动</a></p><h2 id="支持Mysql8配置修改"><a href="#支持Mysql8配置修改" class="headerlink" title="支持Mysql8配置修改"></a>支持Mysql8配置修改</h2><ol><li>替换原有Mysql连接驱动Jar包 去<a href="https://mvnrepository.com/artifact/mysql/mysql-connector-java" title="Maven仓库">Maven仓库</a>下载你对应的Mysql8的驱动Jar包，注意是Jar包不是pom文件配置 <img src="https://www.itze.cn/wp-content/uploads/2022/01/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220117104733.png"> 下载好之后将Jar包放置解压出来mycat&#x2F;lib&#x2F;路径下，删除mycat安装包原有自带的mysql-connector-java-5.x.x.jar</li><li>修改模拟版本号,修改server.xml配置文件 注意该行原本是被注释掉的，需要手动去除注释，并且修改版本号 <img src="https://www.itze.cn/wp-content/uploads/2022/01/%E7%89%88%E6%9C%AC%E5%8F%B7.png"> <strong>重启Mycat服务即可</strong></li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果mycat配置文件schema.xml中配置主机的地方dbDriver&#x3D;”native”，使用mysql8需要将更改mysql的加密方式，dbDriver&#x3D;”jdbc”则不需要。 更改加密方式</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span> PASSWORD EXPIRE NEVER;</span><br></pre></td></tr></table></figure><p>更新密码</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><p>刷新权限</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
          <category> Mycat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Mycat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql8实现主从复制</title>
      <link href="/2022/01/14/mysql8%E5%AE%9E%E7%8E%B0%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2022/01/14/mysql8%E5%AE%9E%E7%8E%B0%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统：CentOS 7</li><li>Mysql版本：8.0</li><li>MysqlServer_1：M1（主）</li><li>MysqlServer_2：M2（从）</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li>修改M1配置文件：vim &#x2F;etc&#x2F;my.cnf （my.cnf路径位置根据自己实际路径更改）</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主服务器唯一ID</span></span><br><span class="line">server-id=1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启用二进制日志</span></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置不要复制的数据库(可设置多个)</span></span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">binlog-ignore-db=information_schema</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置需要复制的数据库</span></span><br><span class="line">binlog-do-db=需要复制的主数据库名字</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置logbin格式</span></span><br><span class="line">binlog_format=STATEMENT</span><br></pre></td></tr></table></figure><ol start="2"><li>修改M2配置文件：vim &#x2F;etc&#x2F;my.cnf （my.cnf路径位置根据自己实际路径更改）</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从服务器唯一ID</span></span><br><span class="line">server-id=2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启用中继日志</span></span><br><span class="line">relay-log=mysql-relay</span><br></pre></td></tr></table></figure><ol start="3"><li><p>依次重启主机M1、从机M2服务，注意是指重启Mysql服务不是机器重启</p></li><li><p>在主机上建立帐户slave</p></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create user &#x27;slave&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><ol start="5"><li>授权，这里只授予SLAVE权限，当然也可以授所有权限</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grant REPLICATION SLAVE on *.* to &#x27;slave&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure><ol start="6"><li>在M1主机MySQL里执行命令，查询master的状态</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2022/01/status.png"> 记录下File和Position的值 <strong>注意：执行完此步骤后不要再操作主服务器MySQL，防止主服务器状态值变化</strong></p><ol start="7"><li>在M2从机上配置需要复制的主机,修改完毕之后再M2服务上执行该SQL</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER TO MASTER_HOST=&#x27;主机的IP地址&#x27;,</span><br><span class="line">MASTER_USER=&#x27;slave&#x27;,</span><br><span class="line">MASTER_PASSWORD=&#x27;123456&#x27;,</span><br><span class="line">MASTER_LOG_FILE=&#x27;mysql-bin.具体数字&#x27;,MASTER_LOG_POS=具体值;</span><br></pre></td></tr></table></figure><ol start="8"><li>启动从服务器复制功能</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure><ol start="9"><li>查看从服务器状态</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2022/01/slave.png"> <strong>下面两个参数都是Yes，则说明主从配置成功！</strong> - Slave_IO_Running: Yes - Slave_SQL_Running: Yes <strong>接下来就可以去M1主机新建库、建表等测试了，观察M2从机服务是否会跟着改变</strong> 如何停止从服务复制功能</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure><p>如果需要重新配置，需要先停止，然后重置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure><p>重置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reset master;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果使用Mysql的主从复制，需要考虑的问题，比如如何持续保证数据一直问题，就比如一旦主从关系断开之后，再次建立主从，比如可以写脚本去监控Mysql服务等等</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装HAproxy</title>
      <link href="/2022/01/14/centos%E5%AE%89%E8%A3%85haproxy/"/>
      <url>/2022/01/14/centos%E5%AE%89%E8%A3%85haproxy/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统：CentOS 7</p><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><p>通过yum安装工具直接安装，简单快捷，通过系统服务启动，添加开机启动等都很方便 安装命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install haproxy</span><br></pre></td></tr></table></figure><p>安装完成之后查看版本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">haproxy -version</span><br></pre></td></tr></table></figure><p>启动haproxy服务，查看启动状态就把start换成status，停止就是stop</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start haproxy</span><br></pre></td></tr></table></figure><p>默认haproxy.cnf配置文件是在**&#x2F;etc&#x2F;haproxy&#x2F;haproxy.cnf**</p><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><p>通过下载安装包编译安装，相对方式一较为麻烦 首先下载安装包，这里提供一份，点击下载：<a href="https://itze.cn/uploads/haproxy-1.5.18.tar.gz" title="haproxy-1.5.18.tar.gz">haproxy-1.5.18.tar.gz</a> 或者使用wget命令直接下载到服务器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://itze.cn/uploads/haproxy-1.5.18.tar.gz</span><br></pre></td></tr></table></figure><p>解压到&#x2F;usr&#x2F;local&#x2F;src</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf haproxy-1.5.18.tar.gz -C /usr/local/src</span><br></pre></td></tr></table></figure><p>进入解压后的目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src/haproxy-1.5.18</span><br></pre></td></tr></table></figure><p>查看内核版本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">arch</span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2022/01/uname-r.png"> 编译</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make TARGET=linux310 PREFIX=/usr/local/haproxy ARCH=x86_64</span><br></pre></td></tr></table></figure><ul><li>ARGET&#x3D;linux310，内核版本，使用uname -r查看内核，如：3.10.0-514.el7，此时该参数就为linux310</li><li>ARCH&#x3D;x86_64，系统位数</li><li>PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;haprpxy #&#x2F;usr&#x2F;local&#x2F;haprpxy，为haprpxy安装路径</li></ul><p>编译完成后，进行安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make install PREFIX=/usr/local/haproxy</span><br></pre></td></tr></table></figure><p>安装完成后，创建目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/data/haproxy/</span><br></pre></td></tr></table></figure><p>创建HAProxy配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/local/haproxy/haproxy.conf</span><br></pre></td></tr></table></figure><p>haproxy.cnf内容，listen proxy_status中替换成真实需求内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">global</span><br><span class="line">         log 127.0.0.1 local0</span><br><span class="line">         #log 127.0.0.1 local1 notice</span><br><span class="line">         #log loghost local0 info</span><br><span class="line">         maxconn 4096</span><br><span class="line">         chroot /usr/local/haproxy</span><br><span class="line">         pidfile /usr/data/haproxy/haproxy.pid</span><br><span class="line">         uid 99</span><br><span class="line">         gid 99</span><br><span class="line">         daemon</span><br><span class="line">         #debug</span><br><span class="line">         #quiet</span><br><span class="line">defaults</span><br><span class="line">         log global</span><br><span class="line">         mode tcp</span><br><span class="line">         option abortonclose</span><br><span class="line">         option redispatch</span><br><span class="line">         retries 3</span><br><span class="line">         maxconn 2000</span><br><span class="line">         timeout connect 5000</span><br><span class="line">         timeout client 50000</span><br><span class="line">         timeout server 50000</span><br><span class="line">listen proxy_status </span><br><span class="line">     bind :8081</span><br><span class="line">         mode tcp</span><br><span class="line">         balance roundrobin</span><br><span class="line">         server serverName_1 127.x.x.x:8080 check inter 10s</span><br><span class="line">         server serverName_2 127.x.x.x:8080 check inter 10s</span><br><span class="line">frontend admin_stats </span><br><span class="line">     bind :8082</span><br><span class="line">         mode http</span><br><span class="line">         stats enable</span><br><span class="line">         option httplog</span><br><span class="line">         maxconn 10</span><br><span class="line">         stats refresh 30s</span><br><span class="line">         stats uri /admin</span><br><span class="line">         stats auth admin:123456</span><br><span class="line">         stats hide-version</span><br><span class="line">         stats admin if TRUE</span><br></pre></td></tr></table></figure><p>启动HAProxy</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/haproxy/sbin/haproxy -f /usr/local/haproxy/haproxy.conf</span><br></pre></td></tr></table></figure><p>查看HAProxy进程</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -efgrep haproxy</span><br></pre></td></tr></table></figure><p>打开浏览器访问,<a href="http://127.0.0.1:8082/admin">http://127.0.0.1:8082/admin</a> 账户：admin;密码：123456，将ip换成实际安装haproxy服务器IP</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果安装之后访问不了，请检查服务器端口是否开放，本文配置端口web端口是8082，服务端口是8081，可根据实际需求更改，关于开放端口参考：<a href="https://www.itze.cn/linux/468.html" title="CentOS 7 开启防火墙及开放指定端口">CentOS 7 开启防火墙及开放指定端口</a> 如果服务器防火墙已经添加放行，仍然无法访问，请检查服务器厂商控制面板是否放行，比如阿里云的服务器就去阿里云控制面板中去查看</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> HAproxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> HAproxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql千万级数据量批量快速迁移</title>
      <link href="/2022/01/13/mysql%E5%8D%83%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E9%87%8F%E6%89%B9%E9%87%8F%E5%BF%AB%E9%80%9F%E8%BF%81%E7%A7%BB/"/>
      <url>/2022/01/13/mysql%E5%8D%83%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E9%87%8F%E6%89%B9%E9%87%8F%E5%BF%AB%E9%80%9F%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Mysql版本：8.0</p><h2 id="迁移说明"><a href="#迁移说明" class="headerlink" title="迁移说明"></a>迁移说明</h2><p>Mysql数据的迁移，推荐两种方式 1. mysqldump mysqldump比较适合几十万上百万的较小数据的迁移使用 2. mysql load data load data infile 语句可以从一个文本文件中以很高的速度读入一个表中，性能大概是 insert 语句的几十倍，比较适合上千万级及更高的海量数据迁移使用</p><h2 id="1-mysqldump"><a href="#1-mysqldump" class="headerlink" title="1.mysqldump"></a>1.mysqldump</h2><h3 id="1-1导出"><a href="#1-1导出" class="headerlink" title="1.1导出"></a>1.1导出</h3><p><strong>使用环境：只要是有mysql的环境就可以，不限制Linux或者是Windows系统，不同系统最后面的导出位置不一样而已</strong> 导出某个库中的表数据内容，如果是导出整个库，把–tables testtable去掉即可</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p123456 <span class="operator">-</span>h127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span> <span class="operator">-</span>P3306 <span class="comment">--default-character-set=utf8 -c -t --skip-add-locks --databases testbase --tables testtable&gt; \root\move.sql</span></span><br></pre></td></tr></table></figure><p>对应</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 <span class="operator">-</span>h数据库IP地址 <span class="operator">-</span>P端口 <span class="comment">--default-character-set=utf8 -c -t --skip-add-locks --databases 数据库名称 --tables 要导出的表名称&gt; 导出的位置</span></span><br></pre></td></tr></table></figure><p>部分解释 - -c：使用完整的insert语句(包含列名称)。这么做能提高插入效率，但是可能会受到max_allowed_packet参数的影响而导致插入失败。 - -t：只导出数据，而不添加CREATE TABLE 语句。使用该参数，导入之前需要提前建好相同表结构，如果不加该参数则导入时不需要再建表。 - –skip-add-locks：—取消在每个表导出之前增加LOCK TABLES（默认存在锁）</p><h3 id="1-2导入"><a href="#1-2导入" class="headerlink" title="1.2导入"></a>1.2导入</h3><p><strong>使用环境：只要是有mysql的环境就可以，不限制Linux或者是Windows系统，不同系统最后面的导出位置不一样而已</strong> 使用命令登陆到需要被导入数据的mysql服务上</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p123456 <span class="operator">-</span>h127<span class="number">.0</span>.xxx.xxx <span class="operator">-</span>P3306</span><br></pre></td></tr></table></figure><p>切换需要导入的数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use databasename(数据库名称);</span><br></pre></td></tr></table></figure><p>导入数据,source 后面换成你的导出的sql文件路径，然后回车执行命令，静静地等待就好了</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">source <span class="operator">/</span>root<span class="operator">/</span>move.sql;</span><br></pre></td></tr></table></figure><h2 id="2-load-data"><a href="#2-load-data" class="headerlink" title="2.load data"></a>2.load data</h2><h3 id="load-data使用前提"><a href="#load-data使用前提" class="headerlink" title="load data使用前提"></a>load data使用前提</h3><p>查看secure_file_priv该变量的设置</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%secure%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-------+</span></span><br><span class="line"> Variable_name             <span class="keyword">Value</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-------+</span></span><br><span class="line"> require_secure_transport  OFF   </span><br><span class="line"> secure_file_priv                </span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-------+</span></span><br></pre></td></tr></table></figure><p>secure_file_priv的Value不能是null，如果是null是不能导入数据的,可以分以下两种情况 1. Value值是一个路径，比如：&#x2F;root&#x2F;data&#x2F; 在不改变该值的情况下，需要将导出的数据复制到该路径下 2. Value值什么都没有，就像作者这样，这样导出的数据可以在Mysql机器的任意位置</p><h3 id="解决secure-file-priv值问题"><a href="#解决secure-file-priv值问题" class="headerlink" title="解决secure_file_priv值问题"></a>解决secure_file_priv值问题</h3><p>如果你的mysql服务是按照传统的方式安装 编辑配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf（换成你的my.cnf路径）</span><br></pre></td></tr></table></figure><p>在[mysqld]下新增一行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">secure_file_priv=&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>如果是docker容器运行的Mysql， 1.如果在创建容器时，映射的有实际物理主机中my.cnf配置文件，同上方法即可，然后重启mysql容器 2.如果创建容器时并没有映射my.cnf配置文件,参考：<a href="https://www.itze.cn/mysql/819.html" title="Docker环境下Mysql">Docker环境下Mysql</a></p><h2 id="2-1导出"><a href="#2-1导出" class="headerlink" title="2.1导出"></a>2.1导出</h2><p>需要先登陆到mysql服务，load data导出执行一条sql</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span>(表名) <span class="keyword">into</span> outfile <span class="string">&#x27;/root/data.txt&#x27;</span>(导出路径);</span><br></pre></td></tr></table></figure><p>亲测大约2千万的数据，导出耗时只要272.24秒 <img src="https://www.itze.cn/wp-content/uploads/2022/01/loadData.png"></p><h2 id="2-2导入"><a href="#2-2导入" class="headerlink" title="2.2导入"></a>2.2导入</h2><p>同样需要先登陆到mysql服务，load data导入执行一条sql，需要先创建一张和原来结构字段数相同的表，注意几点，比如字段类型可以由原来的int&gt;varchar,但是返过来就不行，字段名和表明可以和原来不一样都可以，但是字段数量要大于等于原来的字段数量，比如原表如下，则需要创建新表字段不能少于3个</p><p>ID</p><p>NAME</p><p>AGE</p><p>1</p><p>Siri</p><p>18</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">load data infile <span class="string">&#x27;/root/data.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> tableName(ID,NAME,AGE);</span><br></pre></td></tr></table></figure><p>导入时可以使用@dummy丢弃不需要的字段，例如丢弃AGE字段值</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">load data infile <span class="string">&#x27;/root/data.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> tableName(ID,NAME,<span class="variable">@dummy</span>);</span><br></pre></td></tr></table></figure><p>执行回车静静的等待就好了 <strong>注意事项</strong> - 如果导出前，表中数据为空值null，导出后会是\N表示 - 数据库字段如果是varchar&#x2F;char，插入空时，load data 默认导入 空字符串 - 数据库字段如果是decimal，插入空时，load data 默认导入 0.00000000 - 数据库字段如果是datetime，插入空时，load data 默认导入 0000-00-00 00:00:00 - 数据库字段如果是datetime，插入yyyy-MM-dd时，load data 默认导入 yyyy-MM-dd 00:00:00，数据正确性能够保证 - 数据库字段如果是datetime，插入HH：mm:ss时（HH后面应是英文冒号），load data 默认导入 0000-00-00 00:00:00，数据正确性不能够保证 <em>注：mysqldump的详解可参考:<a href="https://www.cnblogs.com/chenmh/p/5300370.html">https://www.cnblogs.com/chenmh/p/5300370.html</a> 注意事项有摘抄网络文章，侵告知，立即删除</em></p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot读取外部配置文件</title>
      <link href="/2022/01/11/springboot%E8%AF%BB%E5%8F%96%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2022/01/11/springboot%E8%AF%BB%E5%8F%96%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p><strong>SpringBoot读取外部配置文件，springboot读取配置文件顺序，如下（1,2,3代表优先级）</strong> <img src="https://www.itze.cn/wp-content/uploads/2022/01/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220111141259.png"></p><h2 id="读取优先级（1-2-3代表优先级）"><a href="#读取优先级（1-2-3代表优先级）" class="headerlink" title="读取优先级（1,2,3代表优先级）"></a>读取优先级（1,2,3代表优先级）</h2><ol><li>和Jar包处于同一级的config文件夹中的application.properties配置文件</li><li>在1.config文件夹不存在时，会读取和Jar包处于同一级的application.properties配置文件</li><li>1和2的情况都不存在的时候也就是正常打包出来application.properties配置文件处于项目的 resource&#x2F;application.properties下，才会读取改配置</li></ol><p>如果1，2，3 同时存在，jar包文件会先按照config中的application.properties配置文件，依照优先级来读取</p><h2 id="读取方式"><a href="#读取方式" class="headerlink" title="读取方式"></a>读取方式</h2><p><strong>推荐两种 第一种：使用@Value(“${name}”) 第二种：使用Environment类，配置可参考：</strong><a href="https://www.itze.cn/java/415.html" title="Springboot@Autowired注入为Null">Springboot@Autowired注入为Null</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目打包报错：JavaScript heap out of memory</title>
      <link href="/2021/12/09/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%99%EF%BC%9Ajavascript-heap-out-of-memory/"/>
      <url>/2021/12/09/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%99%EF%BC%9Ajavascript-heap-out-of-memory/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统：CentOS 7</li><li>npm版本：7.21.0</li><li>node版本：v13.14.0</li></ul><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>在Linux环境下，CentOS 7 操作系统下，vue项目打包，一直打包失败，起初刚开始不知道什么原因，有几次打包失败没报错，大概报了个意思是打包进程被杀掉了</p><h2 id="错误示例"><a href="#错误示例" class="headerlink" title="错误示例"></a>错误示例</h2><p><img src="https://www.itze.cn/wp-content/uploads/2021/12/message.png"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在打包的机器上执行，4096这个值可根据自己实际情况改变</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export NODE_OPTIONS=--max_old_space_size=4096</span><br></pre></td></tr></table></figure><p>查看</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $NODE_OPTIONS</span><br></pre></td></tr></table></figure><h3 id="再次进行打包即可"><a href="#再次进行打包即可" class="headerlink" title="再次进行打包即可"></a>再次进行打包即可</h3>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring整合Redis哨兵模式（Sentinel）</title>
      <link href="/2021/11/18/spring%E6%95%B4%E5%90%88redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%EF%BC%88sentinel%EF%BC%89/"/>
      <url>/2021/11/18/spring%E6%95%B4%E5%90%88redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%EF%BC%88sentinel%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>准备Jar包依赖，注意版本不要随意更换，经测试，有的版本会报错</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.8</span><span class="number">.6</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- redis 依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.9</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="redis-properties"><a href="#redis-properties" class="headerlink" title="redis.properties"></a>redis.properties</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#最大空闲数(默认:<span class="number">8</span>)</span><br><span class="line">redis.maxIdle=<span class="number">300</span></span><br><span class="line">#当连接池资源耗尽时,调用者最大阻塞时间,超时将抛出异常.单位:毫秒,默认:-<span class="number">1</span>,表示永不超时.</span><br><span class="line">redis.maxWait=<span class="number">1000</span></span><br><span class="line">#最大连接数(默认:<span class="number">8</span>)</span><br><span class="line">redis.maxTotal=<span class="number">500</span></span><br><span class="line">#指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个 (默认:<span class="literal">false</span>)</span><br><span class="line">redis.testOnBorrow=<span class="literal">true</span></span><br><span class="line">redis.testOnReturn=<span class="literal">true</span></span><br><span class="line">redis.testWhileIdle=<span class="literal">true</span></span><br><span class="line">redis.blockWhenExhausted=<span class="literal">false</span></span><br><span class="line">redis.numTestsPerEvictionRun=<span class="number">1024</span></span><br><span class="line">redis.timeBetweenEvictionRunsMillis=<span class="number">30000</span></span><br><span class="line">redis.minEvictableIdleTimeMillis=<span class="number">1800000</span></span><br><span class="line">redis.maxActive = <span class="number">1024</span></span><br><span class="line">redis.timeOut = <span class="number">10000</span></span><br><span class="line">#Sentinel</span><br><span class="line">redis.sentinel.master = mymaster #这里是配置Redis哨兵sentinel.conf中的名字！一定要一样！</span><br><span class="line">redis.sentinel.auth = <span class="number">123456789</span>  #同样是sentinel.conf中配置的密码，如果没设置可以不写</span><br><span class="line">#Redis哨兵配置的所有服务器和端口号（sentinel.conf中的端口号，不是redis.conf中的！）</span><br><span class="line">redis.sentinel.addr_1 = <span class="number">192.168</span><span class="number">.100</span><span class="number">.1</span></span><br><span class="line">redis.sentinel.port_1 = <span class="number">26379</span></span><br><span class="line">redis.sentinel.addr_2 = <span class="number">192.168</span><span class="number">.100</span><span class="number">.2</span></span><br><span class="line">redis.sentinel.port_2 = <span class="number">26379</span></span><br><span class="line">redis.sentinel.addr_3 = <span class="number">192.168</span><span class="number">.100</span><span class="number">.3</span></span><br><span class="line">redis.sentinel.port_3 = <span class="number">26379</span></span><br></pre></td></tr></table></figure><h3 id="redis-xml"><a href="#redis-xml" class="headerlink" title="redis.xml"></a>redis.xml</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;!--扫描redis配置文件--&gt;</span><br><span class="line">    &lt;context:property-placeholder location=<span class="string">&quot;classpath:redis.properties&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--设置连接池--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;jedisPoolConfig&quot;</span> class=<span class="string">&quot;redis.clients.jedis.JedisPoolConfig&quot;</span>&gt;</span><br><span class="line">        &lt;!-- 最大空闲连接数 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;maxIdle&quot;</span> value=<span class="string">&quot;$&#123;redis.maxIdle&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;!-- 最大连接数 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;maxTotal&quot;</span> value=<span class="string">&quot;$&#123;redis.maxTotal&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;!-- 每次释放连接的最大数目 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;numTestsPerEvictionRun&quot;</span> value=<span class="string">&quot;$&#123;redis.numTestsPerEvictionRun&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;!-- 释放连接的扫描间隔（毫秒） --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;timeBetweenEvictionRunsMillis&quot;</span> value=<span class="string">&quot;$&#123;redis.timeBetweenEvictionRunsMillis&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;!-- 连接最小空闲时间 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;minEvictableIdleTimeMillis&quot;</span> value=<span class="string">&quot;$&#123;redis.minEvictableIdleTimeMillis&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-<span class="number">1</span> --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;maxWaitMillis&quot;</span> value=<span class="string">&quot;$&#123;redis.maxWait&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;!-- 在获取连接的时候检查有效性, 默认<span class="literal">false</span> --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;testOnBorrow&quot;</span> value=<span class="string">&quot;$&#123;redis.testOnBorrow&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;testOnReturn&quot;</span> value=<span class="string">&quot;$&#123;redis.testOnReturn&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;!-- 在空闲时检查有效性, 默认<span class="literal">false</span> --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;testWhileIdle&quot;</span> value=<span class="string">&quot;$&#123;redis.testWhileIdle&#125;&quot;</span>/&gt;</span><br><span class="line">        &lt;!-- 连接耗尽时是否阻塞, <span class="literal">false</span>报异常,ture阻塞直到超时, 默认<span class="literal">true</span> --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;blockWhenExhausted&quot;</span> value=<span class="string">&quot;$&#123;redis.blockWhenExhausted&#125;&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- Sentinel模式 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;sentinelConfiguration&quot;</span> class=<span class="string">&quot;org.springframework.data.redis.connection.RedisSentinelConfiguration&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;master&quot;</span>&gt;</span><br><span class="line">            &lt;bean class=<span class="string">&quot;org.springframework.data.redis.connection.RedisNode&quot;</span>&gt;</span><br><span class="line">                &lt;!--这个值要和Sentinel中指定的master的值一致，不然启动时找不到Sentinel会报错的--&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;$&#123;redis.sentinel.master&#125;&quot;</span>/&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- 指定Sentinel的IP和端口 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;sentinels&quot;</span>&gt;</span><br><span class="line">            &lt;set&gt;</span><br><span class="line">                &lt;bean class=<span class="string">&quot;org.springframework.data.redis.connection.RedisNode&quot;</span>&gt;</span><br><span class="line">                    &lt;constructor-arg name=<span class="string">&quot;host&quot;</span> value=<span class="string">&quot;$&#123;redis.sentinel.addr_1&#125;&quot;</span>/&gt;</span><br><span class="line">                    &lt;constructor-arg name=<span class="string">&quot;port&quot;</span> value=<span class="string">&quot;$&#123;redis.sentinel.port_1&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;/bean&gt;</span><br><span class="line">                &lt;bean class=<span class="string">&quot;org.springframework.data.redis.connection.RedisNode&quot;</span>&gt;</span><br><span class="line">                    &lt;constructor-arg name=<span class="string">&quot;host&quot;</span> value=<span class="string">&quot;$&#123;redis.sentinel.addr_2&#125;&quot;</span>/&gt;</span><br><span class="line">                    &lt;constructor-arg name=<span class="string">&quot;port&quot;</span> value=<span class="string">&quot;$&#123;redis.sentinel.port_2&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;/bean&gt;</span><br><span class="line">                &lt;bean class=<span class="string">&quot;org.springframework.data.redis.connection.RedisNode&quot;</span>&gt;</span><br><span class="line">                    &lt;constructor-arg name=<span class="string">&quot;host&quot;</span> value=<span class="string">&quot;$&#123;redis.sentinel.addr_3&#125;&quot;</span>/&gt;</span><br><span class="line">                    &lt;constructor-arg name=<span class="string">&quot;port&quot;</span> value=<span class="string">&quot;$&#123;redis.sentinel.port_3&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;/bean&gt;</span><br><span class="line">            &lt;/set&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;jedisConnectionFactory&quot;</span> class=<span class="string">&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;</span>&gt;</span><br><span class="line">        &lt;constructor-arg name=<span class="string">&quot;sentinelConfig&quot;</span> ref=<span class="string">&quot;sentinelConfiguration&quot;</span>/&gt;</span><br><span class="line">        &lt;constructor-arg name=<span class="string">&quot;poolConfig&quot;</span> ref=<span class="string">&quot;jedisPoolConfig&quot;</span>/&gt;</span><br><span class="line">        &lt;!-- 如果没有设置密码，下面这行可以注释掉 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;$&#123;redis.sentinel.auth&#125;&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;redisTemplate&quot;</span></span><br><span class="line">          class=<span class="string">&quot;org.springframework.data.redis.core.StringRedisTemplate&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;connectionFactory&quot;</span> ref=<span class="string">&quot;jedisConnectionFactory&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h2 id="Spring上下文配置文件"><a href="#Spring上下文配置文件" class="headerlink" title="Spring上下文配置文件"></a>Spring上下文配置文件</h2><p>在SpringContext的上下文配置文件中导入以上两个配置文件，一般这个上下文配置文件名字都是类似：applicationContext.xml、springContext.xml等等等…这里就不放全部的内容，每个人的项目可能都不太一样，只放需要配置的</p><h3 id="导入redis-properties"><a href="#导入redis-properties" class="headerlink" title="导入redis.properties"></a>导入redis.properties</h3><p>这个一般放在配置文件的较上面位置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引入配置文件 --&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;propertyConfigurer&quot;</span> class=<span class="string">&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 系统配置参数 --&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;locations&quot;</span>&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;!-- redis配置参数 --&gt;</span><br><span class="line">            &lt;value&gt;classpath:redis.properties&lt;/value&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="导入redis-xml"><a href="#导入redis-xml" class="headerlink" title="导入redis.xml"></a>导入redis.xml</h3><p>这个一般放在配置文件的最下面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引入redis配置 --&gt;</span><br><span class="line">&lt;<span class="keyword">import</span> resource=<span class="string">&quot;classpath:redis.xml&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>之后启动项目验证就行了，至于JedisConnectionFactory是怎么实现通过Sentinel帮我们发现并且切换master主节点的，博主有时间再研究一下</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Redis </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker方式Redis主从复制及Sentinel哨兵模式实现</title>
      <link href="/2021/11/18/docker%E6%96%B9%E5%BC%8Fredis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8F%8Asentinel%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/11/18/docker%E6%96%B9%E5%BC%8Fredis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8F%8Asentinel%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统：CentOS 7</li><li>Redis版本：latest 默认拉取最新版</li><li>Docker版本：20.10</li></ul><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ul><li>192.168.100.1</li><li>192.168.100.2</li><li>192.168.100.3</li></ul><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>在三台服务器上已经安装好Docker，并且已经拉取Redis镜像，文章使用的是默认拉取最新版</li><li>三台服务器提前开放6379（Redis默认）和26379（Sentinel默认）端口，如何在CentOS开放指定端口可查看：<a href="https://www.itze.cn/linux/468.html" title="CentOS 7 开启防火墙及开放指定端口">CentOS 7 开启防火墙及开放指定端口</a></li><li>如果你的服务器是阿里云、华为云等一些厂商的，控制面板中也需要防火墙端口放行</li></ul><p>拉取镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><p>查看已存在镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="1-主从复制"><a href="#1-主从复制" class="headerlink" title="1.主从复制"></a>1.主从复制</h2><p>主从复制，这里是一台主（master）两台从（slave）,master主节点可读可写，slave只具备读的权限 我们将 <strong>192.168.100.1</strong> 作为master主节点，其余两台为slave从节点</p><h3 id="1-1-创建Redis配置文件（我们默认三台服务器文件位置均在-x2F-redis-下）"><a href="#1-1-创建Redis配置文件（我们默认三台服务器文件位置均在-x2F-redis-下）" class="headerlink" title="1.1 创建Redis配置文件（我们默认三台服务器文件位置均在 &#x2F;redis 下）"></a>1.1 创建Redis配置文件（我们默认三台服务器文件位置均在 &#x2F;redis 下）</h3><p>以下操作默认为操作路径均为**&#x2F;redis**，一定要记住创建配置文件的位置，下面创建容器需要用到！</p><h4 id="1-1-1-创建master主节点文件：redis-master-conf-内容如下"><a href="#1-1-1-创建master主节点文件：redis-master-conf-内容如下" class="headerlink" title="1.1.1 创建master主节点文件：redis-master.conf 内容如下"></a>1.1.1 创建master主节点文件：redis-master.conf 内容如下</h4><p>首先复制该文件内容，根据你自己的需求更改</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">port 6379</span><br><span class="line"></span><br><span class="line">logfile &quot;redis-master.log&quot;</span><br><span class="line"></span><br><span class="line">dir /redis/data</span><br><span class="line"></span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line">appendfilename appendonly.aof</span><br><span class="line"></span><br><span class="line">masterauth 123456789</span><br><span class="line"></span><br><span class="line">requirepass 123456789</span><br></pre></td></tr></table></figure><p>文件内容解释 - port：Redis端口号，默认6379 - logfile：log文件名 - dir：存储路径，可根据自己实际修改， - appendonly yes ：Redis持久化方式，这里使用AOF，关于Redis持久化方式可参考：<a href="https://www.itze.cn/docker/558.html" title="Docker配置Redis持久化">Docker配置Redis持久化</a> - appendfilename appendonly.aof：AOF持久化保存文件名 - masterauth 123456789 ：主节点密码，可根据实际修改 - requirepass 123456789：建议设置masterauth一样 将配置内容修改复制-修改之后，在服务器创建配置文件，这里默认为创建位置为**&#x2F;redis&#x2F;redis-master.conf**,然后将配置内容粘贴进去，保存即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /redis/redis-master.conf</span><br></pre></td></tr></table></figure><h4 id="1-1-2-创建slave从节点文件内容如下，两个从节点配置文件内容是一样的"><a href="#1-1-2-创建slave从节点文件内容如下，两个从节点配置文件内容是一样的" class="headerlink" title="1.1.2 创建slave从节点文件内容如下，两个从节点配置文件内容是一样的"></a>1.1.2 创建slave从节点文件内容如下，两个从节点配置文件内容是一样的</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">port 6379</span><br><span class="line"></span><br><span class="line">logfile &quot;redis-slave.log&quot;</span><br><span class="line"></span><br><span class="line">dir /redis/data</span><br><span class="line"></span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line">appendfilename appendonly.aof</span><br><span class="line"></span><br><span class="line">replicaof 192.168.100.1 6379</span><br><span class="line"></span><br><span class="line">masterauth 123456789</span><br><span class="line"></span><br><span class="line">requirepass 123456789</span><br></pre></td></tr></table></figure><p>:white_check_mark:从slave从节点文件和master主节点文件就多了一行配置 <strong>replicaof 192.168.100.1 6379</strong> 将内容master主节点服务器IP和端口 分别在其余两台slave从节点相同vim操作 192.168.100.2配置文件命名为：redis-slave.conf 192.168.100.3配置文件命名为：redis-slave.conf 两台从节点服务器配置文件相同命名，自己也可以修改 文件命名可根据自己心情修改，建议方便好记好区分</p><h3 id="1-2-创建容器"><a href="#1-2-创建容器" class="headerlink" title="1.2 创建容器"></a>1.2 创建容器</h3><p>建议先从master主节点服务器创建，依次slave从节点创建</p><h4 id="1-2-1-创建master主节点容器"><a href="#1-2-1-创建master主节点容器" class="headerlink" title="1.2.1 创建master主节点容器"></a>1.2.1 创建master主节点容器</h4><p>回到<strong>192.168.100.1</strong> master主节点服务器，创建主节点容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --restart=always -p 6379:6379 --name redis_master -v /redis/redis-master.conf:/etc/redis/redis.conf -v /redis/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes</span><br></pre></td></tr></table></figure><p>命令解释 - –restart&#x3D;always：docker服务重启时，该容器也会自动启动 - -p 6379:6379：指定端口映射，格式为：主机(宿主)端口:容器端口,映射出一个6379端口，两个相同不好区分，比如-p 6789:6379,对外的端口就是6789，也就是你使用工具连接Redis服务的需要填写的端口 - –name redis_master：给容器起个名字，这里就叫redis_master，可根据心情修改 - -v &#x2F;redis&#x2F;redis-master.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf：文件映射，将本机&#x2F;redis&#x2F;redis-master.conf文件映射到容器的&#x2F;etc&#x2F;redis&#x2F;redis.conf该位置 - -v &#x2F;redis&#x2F;data:&#x2F;data：同上 - -d：后台运行容器，并返回容器ID - –appendonly yes:开启Redis持久化</p><h4 id="1-2-2-创建slave从节点容器，从节点容器启动命令相同，两台从服务器分别都要执行"><a href="#1-2-2-创建slave从节点容器，从节点容器启动命令相同，两台从服务器分别都要执行" class="headerlink" title="1.2.2 创建slave从节点容器，从节点容器启动命令相同，两台从服务器分别都要执行"></a>1.2.2 创建slave从节点容器，从节点容器启动命令相同，两台从服务器分别都要执行</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --restart=always -p 6379:6379 --name redis_slave -v /redis/redis-slave.conf:/etc/redis/redis.conf -v /redis/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes</span><br></pre></td></tr></table></figure><h3 id="1-3-查看并验证主从复制"><a href="#1-3-查看并验证主从复制" class="headerlink" title="1.3 查看并验证主从复制"></a>1.3 查看并验证主从复制</h3><p>查看正在运行的容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>进入master主节点容器查看，按照以下步骤执行 1.进入Redis容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it redis_master(替换成你的容器名) bash</span><br></pre></td></tr></table></figure><p>2.在1的步骤成功进入前提，继续输入下面命令进入Redis服务，由于是后来整理的该文档，并未截图</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>3.看到127.0.0.1:6379&gt;这个出现说明已经成功过进入Redis服务，此时输入info</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info(这里只有info是你输入的)</span><br></pre></td></tr></table></figure><p>不出意外会出现提示：**NOAUTH Authentication required.**因为我们设置了密码，此时输入设置的密码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">auth 123456789</span><br></pre></td></tr></table></figure><p>输入之后回车出现：OK 即成功进入，此时输入命令查看是否有从节点连接</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">info Replication</span><br></pre></td></tr></table></figure><p>出现以下表明成功，本来不想再进去截图了，还是来一张吧，最后出入两次exit退出 <img src="https://www.itze.cn/wp-content/uploads/2021/11/redis-master.png"> 如果进入的容器是其他两台slave从节点服务器容器，role会是：slave</p><h4 id="验证主从复制"><a href="#验证主从复制" class="headerlink" title="验证主从复制"></a>验证主从复制</h4><p>可以通过第三方工具连接Redis服务，也可以在服务器上进入Redis容器测试，进行简单测试，比如写测试</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set name 123</span><br></pre></td></tr></table></figure><p>写完之后我们去连接其他两台从节点Redis服务，会发现其他两台均已存在key值name!其他删除、修改自己测试一下，博主已测试，文章里不再做验证 测试连接其他两台slave从节点服务发现写不进去，因为slave从节点只有只读功能！</p><h2 id="2-哨兵模式"><a href="#2-哨兵模式" class="headerlink" title="2.哨兵模式"></a>2.哨兵模式</h2><h3 id="2-1创建sentinel-conf配置文件"><a href="#2-1创建sentinel-conf配置文件" class="headerlink" title="2.1创建sentinel.conf配置文件"></a>2.1创建sentinel.conf配置文件</h3><p>建议三台服务器创建的位置和redis-xx.conf的配置文件放到相同位置！不要随意地方创建，最后找不到了。 在三台服务器各自创建sentinel.conf配置文件，文件内容相同，如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">port 26379</span><br><span class="line"></span><br><span class="line">dir /tmp</span><br><span class="line"></span><br><span class="line">logfile &quot;sentinel.log&quot;</span><br><span class="line"></span><br><span class="line">sentinel monitor mymaster 192.168.100.1 6379 2</span><br><span class="line"></span><br><span class="line">sentinel down-after-milliseconds mymaster 10000</span><br><span class="line"></span><br><span class="line">sentinel failover-timeout mymaster 60000</span><br><span class="line"></span><br><span class="line">sentinel auth-pass mymaster 123456789</span><br></pre></td></tr></table></figure><p>稍微解释几点 - sentinel monitor mymaster 192.168.100.1 6379 2 - mymaster：名字可以自定，但是一定要相同，且记住这个名字，下篇文章和spring整合需要该名 - 192.168.100.1 6379：我们手动选择的master主节点服务器IP和端口号 - 2：最后面这个2代表有两台节点都认为master主节点挂掉之后才会从现有的slave从节点中选出一个新的master主节点 - sentinel down-after-milliseconds mymaster 10000 - 10000：master主节点挂掉10秒之后开始投票选举新的master主节点，默认是30秒，单位ms</p><h3 id="2-2-创建Sentinel容器"><a href="#2-2-创建Sentinel容器" class="headerlink" title="2.2 创建Sentinel容器"></a>2.2 创建Sentinel容器</h3><p>三台服务器各自都要创建，容器命令相同，切记，相同的前提是sentinel.conf配置文件位置所在位置和文件名均一致开放的端口号也一致，命令我就不再解释了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --restart=always -p 26379:26379 --name redis_sentinel -v /redis/sentinel.conf:/etc/redis/sentinel.conf -v /redis/data:/data -d redis redis-sentinel /etc/redis/sentinel.conf</span><br></pre></td></tr></table></figure><h3 id="2-3-测试哨兵模式"><a href="#2-3-测试哨兵模式" class="headerlink" title="2.3 测试哨兵模式"></a>2.3 测试哨兵模式</h3><p>测试很简单，我们手动模拟master主节点宕机，比如我们手动把master主节点容器停掉，看一下Sentinel会不会在我们设置的时间选出新的master主节点 停止正在运行的容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop redis_master(容器名)</span><br></pre></td></tr></table></figure><h3 id="2-4-验证哨兵模式"><a href="#2-4-验证哨兵模式" class="headerlink" title="2.4 验证哨兵模式"></a>2.4 验证哨兵模式</h3><p>验证同样很简单，使用第三方工具连接没有停掉的Redis节点，查看info Replication信息即可，或者和上面的相同操作进入Redis容器查看也是可以的。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Docker </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> Redis </tag>
            
            <tag> Sentinel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker环境下Mysql跳过密码验证</title>
      <link href="/2021/11/04/docker%E7%8E%AF%E5%A2%83%E4%B8%8Bmysql%E8%B7%B3%E8%BF%87%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81/"/>
      <url>/2021/11/04/docker%E7%8E%AF%E5%A2%83%E4%B8%8Bmysql%E8%B7%B3%E8%BF%87%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>Mysql版本：8.0</li><li>操作系统：CentOS 7</li></ul><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>使用Docker拉取的Mysql并启动的Mysql容器，这个时候如果需要跳过Mysql密码验证，网上流传的最多的就是在Mysql的配置文件my.cnf中添加一行代码，但是这个仅仅是在非Docker容器运行的Mysql使用，如果你的Mysql使用的Docker容器执行的，按照网上修改并无任何作用，甚至找不到my.cnf，废话不多说看操作</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="1-找到docker-cnf"><a href="#1-找到docker-cnf" class="headerlink" title="1.找到docker.cnf"></a>1.找到docker.cnf</h3><p>执行命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -name docker.cnf</span><br></pre></td></tr></table></figure><p>如果出现多个，选择带有<strong>merged</strong>这个 <img src="https://www.itze.cn/wp-content/uploads/2021/11/find_docker.cnf_.png"></p><h3 id="2-编辑docker-cnf"><a href="#2-编辑docker-cnf" class="headerlink" title="2.编辑docker.cnf"></a>2.编辑docker.cnf</h3><p>紧接着使用vim编辑<strong>docker.cnf</strong>文件,在最后一行添加<strong>skip-grant-tables</strong> 保存并退出 执行命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /你的路径/docker.cnf</span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2021/11/skip-grant-tables.png"></p><h3 id="3-重启Mysql容器"><a href="#3-重启Mysql容器" class="headerlink" title="3.重启Mysql容器"></a>3.重启Mysql容器</h3><p>执行命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart mysql(改成你的mysql容器名)</span><br></pre></td></tr></table></figure><p><strong>以上已经完成跳过Mysql密码验证！</strong></p><h3 id="4-验证"><a href="#4-验证" class="headerlink" title="4.验证"></a>4.验证</h3><p>进入容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql(改成你的Mysql容器) bash</span><br></pre></td></tr></table></figure><p>进入Mysql,输入完以下命令直接回车即可，恭喜成功进入，接下来就修改密码吧</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h2 id="修改Mysql密码"><a href="#修改Mysql密码" class="headerlink" title="修改Mysql密码"></a>修改Mysql密码</h2><p>注意，如果按照正常的修改密码，会提示你，大致意思是你现在处于skip-grant-tables，不能修改，废话不多说看操作，进入Mysql之后，按照下面的步骤 1.选择库</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure><p>2.先刷新权限</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>3.修改密码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SET PASSWORD FOR &#x27;root&#x27;@&#x27;%&#x27; = &#x27;123456（这里改成的密码）&#x27;;</span><br></pre></td></tr></table></figure><p>4.再次刷新权限</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><strong>搞定！</strong></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong>修改完成密码之后不要忘记把docker.cnf文件中的skip-grant-tables删除！！！然后重复 3.重启Mysql容器！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Docker </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> Docker </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layui在线文档</title>
      <link href="/2021/10/11/layui%E5%9C%A8%E7%BA%BF%E6%96%87%E6%A1%A3/"/>
      <url>/2021/10/11/layui%E5%9C%A8%E7%BA%BF%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gitlab限制网段访问（私有化部署）</title>
      <link href="/2021/09/22/gitlab%E9%99%90%E5%88%B6%E7%BD%91%E6%AE%B5%E8%AE%BF%E9%97%AE%EF%BC%88%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2%EF%BC%89/"/>
      <url>/2021/09/22/gitlab%E9%99%90%E5%88%B6%E7%BD%91%E6%AE%B5%E8%AE%BF%E9%97%AE%EF%BC%88%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统：CentOS 7</li><li>gitlab版本：14.x</li></ul><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>gitlab在私有化部署之后，设置了域名访问，默认只要有网络都可以访问，要求只能部分网络IP或者指定的IP网段才能访问</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>gitlab私有化部署好之后，默认是自带有Nginx，就通过设置Nginx的相关配置来实现，注意这里不能直接修改gitlab给我们安装的Nginx.conf之类的配置文件，需要修改&#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb这个文件，然后重新配置，gitlab会帮我们修改相关配置 1.查看默认的配置文件是否存在,默认配置文件名：<strong>gitlab.rb</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ll /etc/gitlab/</span><br></pre></td></tr></table></figure><p>2.修改配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure><p>3.找到修改部分，执行2.中的命令以后，按一下键盘：&#x2F; (斜杠) ，然后输入：<strong>custom_gitlab_server_config</strong> 然后回车找到如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx[<span class="string">&#x27;custom_gitlab_server_config&#x27;</span>] = <span class="string">&quot;location ^~ /foo-namespace/bar-project/raw/ &#123;\n deny all;\n&#125;\n&quot;</span></span></span><br></pre></td></tr></table></figure><p>建议不要改变原始内容，在这个上面添加新的内容，内容如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx[&#x27;custom_gitlab_server_config&#x27;] = &quot;location ~* (.*)</span><br><span class="line">         &#123;</span><br><span class="line">                allow 192.168.1.1;</span><br><span class="line">                allow 192.168.3.0/24;</span><br><span class="line">                allow 192.168.0.0/16;</span><br><span class="line">                deny all;</span><br><span class="line">                proxy_cache off;</span><br><span class="line">                proxy_pass  http://gitlab-workhorse;</span><br><span class="line">                root   html;</span><br><span class="line">                index  index.html index.htm;</span><br><span class="line">         &#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="解释一下"><a href="#解释一下" class="headerlink" title="解释一下"></a>解释一下</h3><ul><li>allow 192.168.1.1; 代表允许192.168.1.1，这个IP访问</li><li>allow 192.168.3.0&#x2F;24; 代表允许192.168.3.0~192.168.3.254，这个IP段访问</li><li>allow 192.168.0.0&#x2F;16; 代表允许192.168.※.※（代表星号，shift+8） IP访问</li><li>deny all; 代表除以上允许之外，禁止其他所有网络访问</li></ul><p>下面这几行也放上，官方文档里是让放上，<a href="https://docs.gitlab.com/omnibus/settings/nginx.html#inserting-custom-nginx-settings-into-the-gitlab-server-block" title="官方文档地址">官方文档地址</a> proxy_cache off; proxy_pass <a href="http://gitlab-workhorse/">http://gitlab-workhorse</a>; root html; index index.html index.htm; <strong>注意：这个顺序不能随便写，读取顺序会从上往下，如果把deny all;放到第一行，后面的就不起作用了</strong> 4.最后重新配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>以上处理之后，其他不允许访问的IP访问gitlab就会出现403，只有允许访问的IP才能访问了。</p><h2 id="关于IP的建议"><a href="#关于IP的建议" class="headerlink" title="关于IP的建议"></a>关于IP的建议</h2><p>在获取想要访问的IP推荐一个网站：<a href="https://ip.cn/" title="https://ip.cn/">https://ip.cn/</a> 博主在测试从百度直接获取的IP和ip138获取的IP放上去都不行，百般苦恼，最后从这个网站获取的本机IP放上去才行！</p><h2 id="另外提醒"><a href="#另外提醒" class="headerlink" title="另外提醒"></a>另外提醒</h2><p>如果你的gitlab有使用到gitlab自带的CI&#x2F;DI自动部署，请务必把装有gitlab的服务器本身IP添加允许访问，不然你会发现，咦，Runner怎么离线了，哈哈哈</p>]]></content>
      
      
      <categories>
          
          <category> GitLab </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SourceTree3.2.6跳过注册安装</title>
      <link href="/2021/09/17/sourcetree3-2-6%E8%B7%B3%E8%BF%87%E6%B3%A8%E5%86%8C%E5%AE%89%E8%A3%85/"/>
      <url>/2021/09/17/sourcetree3-2-6%E8%B7%B3%E8%BF%87%E6%B3%A8%E5%86%8C%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统：Windows 10</li><li>SourceTree版本：3.2.6</li><li>Git版本：2.32.0</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>使用SourceTree，首先要安装好Git Git下载：<a href="https://www.git-scm.com/download" title="Git官方下载">Git官方下载</a> SourceTree3.2.6下载：<a href="https://www.aliyundrive.com/s/YaPUrifE6Ta" title="https://www.aliyundrive.com/s/YaPUrifE6Ta">https://www.aliyundrive.com/s/YaPUrifE6Ta</a></p><h3 id="git生成ssh密钥"><a href="#git生成ssh密钥" class="headerlink" title="git生成ssh密钥"></a>git生成ssh密钥</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 2048 -C &quot;gitlab中账户的邮箱地址&quot;</span><br></pre></td></tr></table></figure><h3 id="安装Sourcetree"><a href="#安装Sourcetree" class="headerlink" title="安装Sourcetree"></a>安装Sourcetree</h3><ol><li>双击下载好的<strong>SourceTreeSetup-3.2.6.exe</strong>文件，弹出安装窗口之后，将其关闭</li><li>同时按键盘：windows+r，调出运行框，输入：%LocalAppData%\Atlassian\SourceTree\</li><li>新建文件：accounts.json</li></ol><p><img src="https://www.itze.cn/wp-content/uploads/2021/09/accounts.png"> accounts.json文件内容为以下内容，全部复制进去，Ctrl+S保存</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;$id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;$type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Authenticate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;HostInstance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;$id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;$type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Host&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;$id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;$type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;atlassian account&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;BaseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://id.atlassian.com/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Credentials&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;$id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;$type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Email&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;IsDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><ol start="4"><li>再次同时按键盘：windows+r，调出运行框，输入：%LocalAppData%\Atlassian\</li></ol><p><img src="https://www.itze.cn/wp-content/uploads/2021/09/sourceurl.png"> 进入-3.2.6.3544，找到user.config文件，右键-编辑（选择打开方式-记事本）在最下面添加以下内容，添加到 &lt;&#x2F;SourceTree.Properties.Settings&gt; 这个标签内</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&lt;setting name=<span class="string">&quot;AgreedToEULAVersion&quot;</span> serializeAs=<span class="string">&quot;String&quot;</span>&gt;</span><br><span class="line">    &lt;value&gt;<span class="number">20160201</span>&lt;/value&gt;</span><br><span class="line">&lt;/setting&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>再次双击<strong>SourceTreeSetup-3.2.6.exe</strong>文件，弹出窗口，选择-我不想使用Mercurial</li></ol>]]></content>
      
      
      <categories>
          
          <category> GitLab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> SourceTree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决SSH远程执行nohup不退出问题</title>
      <link href="/2021/09/15/%E8%A7%A3%E5%86%B3ssh%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8Cnohup%E4%B8%8D%E9%80%80%E5%87%BA%E9%97%AE%E9%A2%98/"/>
      <url>/2021/09/15/%E8%A7%A3%E5%86%B3ssh%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8Cnohup%E4%B8%8D%E9%80%80%E5%87%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ul><li>服务器A：CentOS_A，假如IP：1.1.1.1</li><li>服务器B：CentOS_B，假如IP：2.2.2.2 要在服务器B上远程执行存放在服务器A上的test.sh脚本 假如test.sh内容如下</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line">echo &quot;测试&quot;</span><br><span class="line">nohup java -jar springboot.jar &amp;</span><br></pre></td></tr></table></figure><p>nohup挂起，这个命令在我们操作的机器上，一般执行完之后Ctrl+C退出，但是放到脚本里面，或者远程直接执行该命令之后会一直停留，不会退出</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>将命令修改以下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup java -jar springboot.jar &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="注"><a href="#注" class="headerlink" title="注"></a>注</h2><p>服务器之间如何进行免密，见文章：<a href="https://www.itze.cn/linux/784.html" title="CentOS服务器之间免密登陆及传输">CentOS服务器之间免密登陆及传输</a></p><h3 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h3><p>在服务器A远程执行服务器B上的test.sh脚本命令,一定要是绝对路径</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh root@2.2.2.2 &quot;sh /root/test.sh&quot;</span><br></pre></td></tr></table></figure><h3 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h3><p>在服务器A操作存放在服务器A的test.sh脚本内容，执行test.sh到服务器B,test.sh的路径也是要绝对路径</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh root@2.2.2.2 &lt; /root/test.sh</span><br></pre></td></tr></table></figure><p>ps：不过在经测试的时候有个问题，测试情况一的时候，并不会执行nohup这条命令，目前也不知道为什么 <em>参考：<a href="https://blog.csdn.net/oneinmore/article/details/50073443">https://blog.csdn.net/oneinmore/article/details/50073443</a></em></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS服务器之间免密登陆及传输</title>
      <link href="/2021/09/14/centos%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86%E5%8F%8A%E4%BC%A0%E8%BE%93/"/>
      <url>/2021/09/14/centos%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86%E5%8F%8A%E4%BC%A0%E8%BE%93/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ul><li>服务器A：CentOS_A,假如IP为：1.1.1.1</li><li>服务器B：CentOS_B，假如IP为：2.2.2.2 <strong>要求实现服务器A向服务器B通过ssh免密登陆及scp传输文件</strong></li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h4 id="一、登陆服务器A，执行命令生成密钥对"><a href="#一、登陆服务器A，执行命令生成密钥对" class="headerlink" title="一、登陆服务器A，执行命令生成密钥对"></a>一、登陆服务器A，执行命令生成密钥对</h4><p>生成秘钥对命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p><strong>该命令一直按回车（Enter）即可，默认生成位置一般是：~&#x2F;.ssh&#x2F; 如果用户是非root一般位置是：&#x2F;home&#x2F;你的当前用户名&#x2F;.ssh&#x2F;</strong> 查看隐藏文件命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ll -a</span><br></pre></td></tr></table></figure><p>或者是</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -a</span><br></pre></td></tr></table></figure><p>进入该路径，</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh/</span><br></pre></td></tr></table></figure><h4 id="二、下载生成的公钥文件：id-rsa-pub"><a href="#二、下载生成的公钥文件：id-rsa-pub" class="headerlink" title="二、下载生成的公钥文件：id_rsa.pub"></a>二、下载生成的公钥文件：id_rsa.pub</h4><p>找到 <strong>id_rsa.pub</strong> 这个文件，现将这个文件下载到本地，如果是root可以通过sz命令下载</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sz id_rsa.pub</span><br></pre></td></tr></table></figure><h3 id="三、登陆服务器B"><a href="#三、登陆服务器B" class="headerlink" title="三、登陆服务器B"></a>三、登陆服务器B</h3><p>登陆服务器B， 切换路径,如果是root用户切入到该路径：&#x2F;root&#x2F;.ssh</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /root/.ssh</span><br></pre></td></tr></table></figure><p>该路径下会有以下文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">authorized_keys known_hosts</span><br></pre></td></tr></table></figure><p>将步骤二中的服务器A生成的公钥文件 id_rsa.pub 上传至服务器B的该路径（&#x2F;root&#x2F;.ssh）下 此时服务器B中&#x2F;root&#x2F;.ssh 该路径下应该有以下文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">authorized_keys  id_rsa.pub  known_hosts</span><br></pre></td></tr></table></figure><p>最后一步，将服务器A生成的公钥文件id_rsa.pub追加至服务器B的authorized_keys文件 追加命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure><h4 id="大功告成！"><a href="#大功告成！" class="headerlink" title="大功告成！"></a>大功告成！</h4><h2 id="免密登陆"><a href="#免密登陆" class="headerlink" title="免密登陆"></a>免密登陆</h2><p>首先登陆服务器A 此时你可以在服务器A通过ssh root@服务器B的IP 直接登陆服务器B 例如：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh root@2.2.2.2</span><br></pre></td></tr></table></figure><h2 id="免密传输文件"><a href="#免密传输文件" class="headerlink" title="免密传输文件"></a>免密传输文件</h2><p>首先登陆服务器A 命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp /a.txt root@2.2.2.2:/abc.txt</span><br></pre></td></tr></table></figure><p>命令解释：将服务器A的根路径下a.txt文件传输至服务器B的根路径下并且命名为abc.txt</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果第一次免密传输会出现让你确认信息，输入：<strong>yes</strong> 即可 如下图 <img src="https://www.itze.cn/wp-content/uploads/2021/09/ssh.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 磁盘分区</title>
      <link href="/2021/08/13/centos-%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/"/>
      <url>/2021/08/13/centos-%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统：CentOS 7.x</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>查看磁盘</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2021/08/fdisk-l.png"> 可以看出，主要有两块磁盘，vda磁盘下有vda1分区，而磁盘vdb没有分区，磁盘名字每台机器可能不一样，你的可能是&#x2F;dev&#x2F;sda、&#x2F;dev&#x2F;sdb，根据实际情况而定 例如对&#x2F;dev&#x2F;vdb磁盘分区，只分一个主分区</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fdisk /dev/vdb</span><br></pre></td></tr></table></figure><p>然后依次输入一下顺序，不放图了，如果该磁盘已经有主分区，可以添加扩展分区，将第二个<strong>p</strong>改成<strong>e</strong> （1）n:添加 （2）p:主分区 （3）1:1个分区 （4）回车：从默认位置开始 （5）回车：到默认位置结束 （6）p:查看分区内容 （7）w:写入 分区完成,分区名：&#x2F;dev&#x2F;vdb1 不重启使分区立即生效</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">partprobe /dev/vdb1</span><br></pre></td></tr></table></figure><p>格式化刚才的分区，这里使用ext4类型,注意这里是对刚才的分区，进行格式化，不是对磁盘！不要写成：&#x2F;dev&#x2F;vdb</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/vdb1</span><br></pre></td></tr></table></figure><p>分区如果比较大的话，格式化可能时间久一点，等待就行了，格式化完成，就可以挂载使用了 查看磁盘分区结构</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><p>如图中，&#x2F;dev&#x2F;vda下有&#x2F;dev&#x2F;vda1分区 <img src="https://www.itze.cn/wp-content/uploads/2021/08/lsblk.png"> 挂载</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount /dev/vdb1 /tmp</span><br></pre></td></tr></table></figure><ul><li>mount：挂载命令</li><li>&#x2F;dev&#x2F;vdb1：已经格式化的分区</li><li>&#x2F;tmp：需要挂载的地方，这个路径可以是任意路径，前提先创建出来，如果是已经存在的文件夹，挂载之后会把文 件夹里面的全部覆盖掉，切记</li></ul><p>查看磁盘挂载及使用情况，例如图中的将 &#x2F;dev&#x2F;vda1 挂载到根目录 &#x2F; 下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -Th</span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2021/08/%E6%8C%82%E8%BD%BD.png"></p><h2 id="永久生效"><a href="#永久生效" class="headerlink" title="永久生效"></a>永久生效</h2><p>最后使刚才的分区永久生效，不然服务器重启就gg了 查询对应的UUID,记着刚才格式化分区的UUID</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">blkid</span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2021/08/blkid.png"> 添加到&#x2F;etc&#x2F;fstab</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/fstab</span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2021/08/fstab.png"> - UUID&#x3D;x：格式化分区对应的UUID - &#x2F;：格式化分区挂载的路径 - ext4：格式化的方式，按需更改 - defaults：默认这个就好了 - 第一个1：表示要将整个内容备份；为0的话，表示不备份 - 第二个1：1表示检查，如果这里填0，则不检查，如果挂载点为&#x2F;(即根分区)则必须为1 添加好之后保存即可</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7搭建GitLab</title>
      <link href="/2021/08/05/centos%E6%90%AD%E5%BB%BAgitlab/"/>
      <url>/2021/08/05/centos%E6%90%AD%E5%BB%BAgitlab/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统：CentOS 7 GitLab版本：14.1.1</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>服务器留出足够磁盘空间和运行内存 建议：4G以上磁盘空间，4G以上运行内存</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>注意：如果在安装的过程中卡住，一般是内存不够 1.安装相关依赖</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install curl policycoreutils openssh-server openssh-clients postfix</span><br></pre></td></tr></table></figure><p>2.配置yum仓库gitlab镜像源，默认会拉取最高版本，附加：<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/" title="清华镜像源地址">清华镜像源地址</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh  sudo bash</span><br></pre></td></tr></table></figure><p>3.启动postfix邮件服务，并添加到开机启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start postfix &amp;&amp; systemctl enable postfix</span><br></pre></td></tr></table></figure><p>4.安装免费社区版，gitlab-ce：社区版，gitlab-ee：企业版</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y gitlab-ce</span><br></pre></td></tr></table></figure><h2 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h2><p><img src="https://www.itze.cn/wp-content/uploads/2021/08/gitlab_succ.png"></p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>主要修改访问IP和端口，如果有域名可以使用域名，前提域名要解析到该服务器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure><p>将：external_url ‘<a href="http://127.0.0.1:8080&#39;">http://127.0.0.1:8080&#39;</a> 后面改成你的访问地址，如果是127.0.0.1:8080,那么访问地址就是你的服务器外网ip+8080端口号，例如服务器外网IP为：123.123.123.123，那么访问地址就是<a href="http://123.123.123.123:8080/">http://123.123.123.123:8080</a> <img src="https://www.itze.cn/wp-content/uploads/2021/08/ip_port.png"> 注意：修改完成之后要在防火墙放行你的端口号，如何放行见文章：<a href="https://www.itze.cn/linux/468.html" title="CentOS 7 开启防火墙及开放指定端口">CentOS 7 开启防火墙及开放指定端口</a> 如果放行之后还是不通，建议去服务器控制台，比如阿里云，就去阿里云控制台，防火墙也需要添加放行</p><h2 id="使配置生效"><a href="#使配置生效" class="headerlink" title="使配置生效"></a>使配置生效</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>这个过程会有点慢，耐心等待，如果该过程中出现Error，说明重置配置失败，一般不会出现 如果在执行该命令过程中出现了类似：<strong>ruby_block[wait for grafana service socket] action run</strong> 这种错误，可以尝试重启一下gitlab-runsvdir执行一下该命令，然后重新执行上面的重置命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart gitlab-runsvdir</span><br></pre></td></tr></table></figure><h2 id="重启Gitlab"><a href="#重启Gitlab" class="headerlink" title="重启Gitlab"></a>重启Gitlab</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure><p>重启完成去访问即可</p><h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h2><p>新版本第一次登陆，可能不会和网上说的会出现让你强制修改密码，或者说默认账户和密码是：root&#x2F;5iveL!fe 如果登录不进去，通过gitlab控制台修改密码</p><h2 id="重置管理员密码"><a href="#重置管理员密码" class="headerlink" title="重置管理员密码"></a>重置管理员密码</h2><p>1.进入gitlab控制台，在安装gitlab的服务器命令行输入</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-rails console -e production</span><br></pre></td></tr></table></figure><p>出现以下内容说明已经成功进入gitlab控制台 <img src="https://www.itze.cn/wp-content/uploads/2021/08/control.png"> 执行命令，说明该用户为root</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user = User.where(id: 1).first</span><br></pre></td></tr></table></figure><p>修改密码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user.password = &#x27;123456&#x27;</span><br></pre></td></tr></table></figure><p>确认密码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user.password_confirmation = &#x27;123456&#x27;</span><br></pre></td></tr></table></figure><p>保存密码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user.save!</span><br></pre></td></tr></table></figure><p>退出控制台</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>这个时候用root和刚才重置的密码123456去登录即可</p><h2 id="gitlab相关命令"><a href="#gitlab相关命令" class="headerlink" title="gitlab相关命令"></a>gitlab相关命令</h2><p>查看版本号</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure><p>重置配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-ctl status</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-ctl stop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> GitLab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7将nginx服务添加开机启动</title>
      <link href="/2021/07/14/centos-7%E5%B0%86nginx%E6%9C%8D%E5%8A%A1%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/"/>
      <url>/2021/07/14/centos-7%E5%B0%86nginx%E6%9C%8D%E5%8A%A1%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统：CentOS 7</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>目前安装nginx大多有两种方式</p><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><p>通过添加yum源，然后直接通过yum安装，推荐使用过这用，这种方式安装会帮你把依赖、服务都安装好</p><h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><p>通过自己weget下载、或者将安装包上传至服务器，手动编译安装，这种方式缺点就是，要自己安装环境依赖，而且安装好之后，默认是找不到nginx.service服务</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>这篇文章比较适用于通过方式二安装，当然通过方式一安装的添加开机启动更方便 如果通过方式一安装，则直接使用命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure><p>如果通过方式二安装就要稍微麻烦一点了 1.路径切换到 <strong>&#x2F;lib&#x2F;systemd&#x2F;system</strong> 该目录下 2.编辑创建一个新文件 <strong>vim nginx.service</strong> 添加以下内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx - high performance web server</span><br><span class="line">Documentation=http://nginx.org/en/docs/</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Service] </span><br><span class="line">Type=forking</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">application改成你的nginx安装路径</span></span><br><span class="line">Type=forking</span><br><span class="line">ExecStartPre=/application/nginx/sbin/nginx -t -c /application/nginx/conf/nginx.conf</span><br><span class="line">ExecStart=/application/nginx/sbin/nginx -c /application/nginx/conf/nginx.conf</span><br><span class="line">ExecReload=/application/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/application/nginx/sbin/nginx -s stop</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install] </span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>添加完成之后，这个时候就可以使用systemctl操作nginx了 重载配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>添加开机启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure><p>直接启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure><p>查看开机已经启动的服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl list-unit-filesgrep enabled</span><br></pre></td></tr></table></figure><p>禁止开机启动某服务,以nginx为例</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl disable nginx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java微信Native支付扫码支付案例</title>
      <link href="/2021/07/13/java%E5%BE%AE%E4%BF%A1native%E6%94%AF%E4%BB%98%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98%E6%A1%88%E4%BE%8B/"/>
      <url>/2021/07/13/java%E5%BE%AE%E4%BF%A1native%E6%94%AF%E4%BB%98%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>需要使用微信支付中Native模式，完成扫码支付，这里只说代码实现，具体怎么申请微信商户等一些账户，自己解决 NATIVE支付，<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_1" title="官方文档">官方文档</a></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>Jar包依赖</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- WeChat Pay --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.wechatpay-apiv3&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;wechatpay-apache-httpclient&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">0.2</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.wxpay&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;wxpay-sdk&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">0.0</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 解析xml --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.dom4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dom4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.1</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- ZXing 二维码 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.3</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javase&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.3</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 阿里巴巴 Fastjson --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.2</span><span class="number">.49</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><strong>调用方法</strong>，具类在下方</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信支付</span></span><br><span class="line"><span class="comment"> * 将画好的二维码，以输出流输出，不做存储，输出结果就是一张二维码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> jsonParam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: gitlab@111.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;wxPay&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wxPay</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    response.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;No-cache&quot;</span>);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">    response.setDateHeader(<span class="string">&quot;Expires&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    <span class="comment">//传参方式，根据自己定义</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">out_trade_no</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">trade_fee</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> WeChatPayUtil.goPay(body, out_trade_no, Integer.parseInt(trade_fee));</span><br><span class="line">        <span class="type">String</span> <span class="variable">return_code</span> <span class="operator">=</span> object.getString(<span class="string">&quot;return_code&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result_code</span> <span class="operator">=</span> object.getString(<span class="string">&quot;result_code&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (return_code.equals(WXPayConstants.SUCCESS) &amp;&amp; result_code.equals(WXPayConstants.SUCCESS)) &#123;</span><br><span class="line">            <span class="comment">//获取支付url</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">code_url</span> <span class="operator">=</span> object.getString(<span class="string">&quot;code_url&quot;</span>);</span><br><span class="line">            <span class="comment">//转二维码</span></span><br><span class="line">            WeChatPayUtil.createQRCode(code_url, response.getOutputStream());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//错误异常处理，根据自己业务补充</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>WeChatPayUtil工具类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.github.wxpay.sdk.WXPayConstants;</span><br><span class="line"><span class="keyword">import</span> com.github.wxpay.sdk.WXPayUtil;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.BarcodeFormat;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.EncodeHintType;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.MultiFormatWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.client.j2se.MatrixToImageWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.BitMatrix;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentHelper;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.tree.DefaultElement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IDEA</span></span><br><span class="line"><span class="comment"> * Author: www.itze.cn</span></span><br><span class="line"><span class="comment"> * Email：gitlab@111.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeChatPayUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取本机IP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnknownHostException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getLocalIp</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">localHost</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">        <span class="keyword">return</span> localHost.getHostAddress();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析字符串形式的XML内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xmlContent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> DocumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">xmlToJson</span><span class="params">(String xmlContent)</span> <span class="keyword">throws</span> DocumentException &#123;</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> DocumentHelper.parseText(xmlContent);</span><br><span class="line">        <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> rootElement.elementIterator();</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">DefaultElement</span> <span class="variable">defaultElement</span> <span class="operator">=</span> (DefaultElement) iterator.next();</span><br><span class="line">            jsonObject.fluentPut(defaultElement.getName(), defaultElement.getStringValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out_trade_no</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> trade_fee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnknownHostException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">xmlContent</span><span class="params">(String body, String out_trade_no, String trade_fee)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">appid</span> <span class="operator">=</span> <span class="string">&quot;改成你微信商户绑定的APPID&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">mchid</span> <span class="operator">=</span> <span class="string">&quot;商户账户分配的APPID&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">notifyUrl</span> <span class="operator">=</span> <span class="string">&quot;回调通知地址，一定要外网可以访问&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;自己生成的API私钥&quot;</span>;</span><br><span class="line">        TreeMap&lt;String, String&gt; paramMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加必须请求参数，额外请求参数详情见官方文档</span></span><br><span class="line">        paramMap.put(<span class="string">&quot;appid&quot;</span>, appid);</span><br><span class="line">        paramMap.put(<span class="string">&quot;mch_id&quot;</span>, mchid);</span><br><span class="line">        paramMap.put(<span class="string">&quot;nonce_str&quot;</span>, WXPayUtil.generateNonceStr());</span><br><span class="line">        paramMap.put(<span class="string">&quot;body&quot;</span>, body);</span><br><span class="line">        paramMap.put(<span class="string">&quot;out_trade_no&quot;</span>, out_trade_no);</span><br><span class="line">        paramMap.put(<span class="string">&quot;total_fee&quot;</span>, trade_fee);<span class="comment">//订单金额，单位分，不能带小数点！</span></span><br><span class="line">        paramMap.put(<span class="string">&quot;spbill_create_ip&quot;</span>, getLocalIp());</span><br><span class="line">        paramMap.put(<span class="string">&quot;notify_url&quot;</span>, notifyUrl);</span><br><span class="line">        paramMap.put(<span class="string">&quot;trade_type&quot;</span>, <span class="string">&quot;NATIVE&quot;</span>);</span><br><span class="line">        <span class="comment">//加签</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">signature</span> <span class="operator">=</span> WXPayUtil.generateSignature(paramMap, key);</span><br><span class="line">        paramMap.put(<span class="string">&quot;sign&quot;</span>, signature);</span><br><span class="line">        <span class="comment">//请求内容</span></span><br><span class="line">        <span class="keyword">return</span> WXPayUtil.mapToXml(paramMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out_trade_no</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> trade_fee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnknownHostException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> DocumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">goPay</span><span class="params">(String body, String out_trade_no, <span class="type">int</span> trade_fee)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sendContent</span> <span class="operator">=</span> xmlContent(body, out_trade_no, String.valueOf(trade_fee));</span><br><span class="line">        <span class="comment">//发送请求</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> sendPostData(WXPayConstants.UNIFIEDORDER_URL, sendContent, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//转换请求结果</span></span><br><span class="line">        <span class="keyword">return</span> xmlToJson(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用微信支付</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urlParam</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sendPostData</span><span class="params">(String urlParam, String param, String contentType)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(urlParam);</span><br><span class="line">            <span class="type">URLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> url.openConnection();</span><br><span class="line">            connection.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">            connection.setConnectTimeout(<span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">            connection.setReadTimeout(<span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(contentType))</span><br><span class="line">                connection.setRequestProperty(<span class="string">&quot;content-type&quot;</span>, contentType);</span><br><span class="line">            <span class="type">OutputStreamWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(connection.getOutputStream(), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (param == <span class="literal">null</span>)</span><br><span class="line">                param = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            writer.write(param);</span><br><span class="line">            writer.flush();</span><br><span class="line">            writer.close();</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream(), <span class="string">&quot;utf-8&quot;</span>))) &#123;</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">while</span> ((content = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    builder.append(content);</span><br><span class="line">                    builder.append(<span class="string">&quot;\r\n&quot;</span>);<span class="comment">//写入回车</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> builder.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content  二维码内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream 输出流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Email</span>: gitlab@111.com</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createQRCode</span><span class="params">(String content, OutputStream outputStream)</span> &#123;</span><br><span class="line">        <span class="comment">//定义长宽</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> <span class="number">160</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">160</span>;</span><br><span class="line">        <span class="comment">//定义格式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> <span class="string">&quot;jpg&quot;</span>;</span><br><span class="line">        <span class="comment">//定义二维码参数</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(EncodeHintType.CHARACTER_SET, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 纠错能力</span></span><br><span class="line"><span class="comment">         * L:约可纠错7%的数据码字</span></span><br><span class="line"><span class="comment">         * M:约可纠错15%的数据码字</span></span><br><span class="line"><span class="comment">         * Q:约可纠错25%的数据码字</span></span><br><span class="line"><span class="comment">         * H:约可纠错30%的数据码字</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        hashMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.M);</span><br><span class="line">        <span class="comment">//边距</span></span><br><span class="line">        hashMap.put(EncodeHintType.MARGIN, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">BitMatrix</span> <span class="variable">matrix</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MultiFormatWriter</span>()</span><br><span class="line">                    .encode(content, BarcodeFormat.QR_CODE, width, height, hashMap);</span><br><span class="line">            MatrixToImageWriter.writeToStream(matrix, format, outputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微信支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java支付宝API电脑网站支付</title>
      <link href="/2021/07/13/java%E6%94%AF%E4%BB%98%E5%AE%9Dapi%E7%94%9F%E6%88%90%E6%94%AF%E4%BB%98%E9%93%BE%E6%8E%A5-form%E8%A1%A8%E5%8D%95/"/>
      <url>/2021/07/13/java%E6%94%AF%E4%BB%98%E5%AE%9Dapi%E7%94%9F%E6%88%90%E6%94%AF%E4%BB%98%E9%93%BE%E6%8E%A5-form%E8%A1%A8%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>调用支付宝API，生成支付链接，或者是form表单，返回给前端页面，这里是直接生成的支付链接</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>Jar包依赖</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- AliPay Old --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alipay.sdk&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;alipay-sdk-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">4.12</span><span class="number">.4</span>.ALL&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Created with IDEA</span></span><br><span class="line"><span class="comment">     * Author: www.itze.cn</span></span><br><span class="line"><span class="comment">     * Email：gitlab@111.com</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createPayUrl</span><span class="params">(String orderNumber, String titleName, String amout, String orderDesc)</span> &#123;</span><br><span class="line">        <span class="comment">/** 支付宝网关 **/</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;支付宝网关&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 应用id，如何获取请参考：https://opensupport.alipay.com/support/helpcenter/190/201602493024 **/</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">APP_ID</span> <span class="operator">=</span> <span class="string">&quot;改成你的AppID&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 应用私钥，如何获取请参考：https://opensupport.alipay.com/support/helpcenter/207/201602469554 **/</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">APP_PRIVATE_KEY</span> <span class="operator">=</span> <span class="string">&quot;改成你的应用私钥&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 支付宝公钥，如何获取请参考：https://opensupport.alipay.com/support/helpcenter/207/201602487431 **/</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ALIPAY_PUBLIC_KEY</span> <span class="operator">=</span> <span class="string">&quot;改成你的应用公钥&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 初始化 **/</span></span><br><span class="line">        <span class="type">AlipayClient</span> <span class="variable">alipayClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAlipayClient</span>(URL, APP_ID, APP_PRIVATE_KEY, <span class="string">&quot;json&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>, ALIPAY_PUBLIC_KEY, <span class="string">&quot;RSA2&quot;</span>);</span><br><span class="line">        <span class="comment">/** 实例化具体API对应的request类，类名称和接口名称对应,当前调用接口名称：alipay.trade.page.pay（电脑网站支付） **/</span></span><br><span class="line">        <span class="type">AlipayTradePagePayRequest</span> <span class="variable">alipayRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradePagePayRequest</span>();</span><br><span class="line">        <span class="comment">/** 设置业务参数  **/</span></span><br><span class="line">        <span class="type">AlipayTradePagePayModel</span> <span class="variable">model</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradePagePayModel</span>();</span><br><span class="line">        <span class="comment">/** 商户订单号，商户自定义，需保证在商户端不重复，如：20200612000001 **/</span></span><br><span class="line">        model.setOutTradeNo(orderNumber);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 销售产品码，固定值：FAST_INSTANT_TRADE_PAY **/</span></span><br><span class="line">        model.setProductCode(<span class="string">&quot;FAST_INSTANT_TRADE_PAY&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**订单标题 **/</span></span><br><span class="line">        model.setSubject(titleName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 订单金额，精确到小数点后两位 **/</span></span><br><span class="line">        model.setTotalAmount(amout);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 订单描述 **/</span></span><br><span class="line">        model.setBody(orderDesc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 业务扩展参数 **/</span></span><br><span class="line">        <span class="comment">//ExtendParams extendParams = new ExtendParams();</span></span><br><span class="line">        <span class="comment">/** 花呗分期参数传值前提：必须有该接口花呗收款准入条件，且需签约花呗分期 **/</span></span><br><span class="line">        <span class="comment">/** 指定可选期数，只支持3/6/12期，还款期数越长手续费越高 **/</span></span><br><span class="line">        <span class="comment">// extendParams.setHbFqNum(&quot;3&quot;);</span></span><br><span class="line">        <span class="comment">/** 指定花呗分期手续费承担方式，手续费可以由用户全承担（该值为0），也可以商户全承担（该值为100），但不可以共同承担，即不可取0和100外的其他值。 **/</span></span><br><span class="line">        <span class="comment">//extendParams.setHbFqSellerPercent(&quot;0&quot;);</span></span><br><span class="line">        <span class="comment">//model.setExtendParams(extendParams);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 将业务参数传至request中 **/</span></span><br><span class="line">        alipayRequest.setBizModel(model);</span><br><span class="line">        <span class="comment">/** 注：支付结果以异步通知为准，不能以同步返回为准，因为如果实际支付成功，但因为外力因素，如断网、断电等导致页面没有跳转，则无法接收到同步通知；**/</span></span><br><span class="line">        <span class="comment">/** 同步通知地址，以http或者https开头，支付完成后跳转的地址，用于用户视觉感知支付已成功，传值外网可以访问的地址，如果同步未跳转可参考该文档进行确认：https://opensupport.alipay.com/support/helpcenter/193/201602474937 **/</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">returnUrl</span> <span class="operator">=</span> <span class="string">&quot;可以是一个自己的外网可以访问的页面，也可以为空，用于支付完成后页面跳转&quot;</span>;</span><br><span class="line"></span><br><span class="line">        alipayRequest.setReturnUrl(returnUrl);</span><br><span class="line">        <span class="comment">/** 异步通知地址，以http或者https开头，商户外网可以post访问的异步地址，用于接收支付宝返回的支付结果，如果未收到该通知可参考该文档进行确认：https://opensupport.alipay.com/support/helpcenter/193/201602475759 **/</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">notifyUrl</span> <span class="operator">=</span> <span class="string">&quot;异步通知地址&quot;</span>;</span><br><span class="line"></span><br><span class="line">        alipayRequest.setNotifyUrl(notifyUrl);</span><br><span class="line">        <span class="comment">/** 第三方调用（服务商模式），传值app_auth_token后，会收款至授权app_auth_token对应商家账号，如何获传值app_auth_token请参考文档：https://opensupport.alipay.com/support/helpcenter/79/201602494631 **/</span></span><br><span class="line">        <span class="comment">//request.putOtherTextParam(&quot;app_auth_token&quot;, &quot;传入获取到的app_auth_token值&quot;);</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">form</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/** 调用SDK生成表单form表单 **/</span></span><br><span class="line"><span class="comment">//            form = alipayClient.pageExecute(alipayRequest).getBody();</span></span><br><span class="line">            <span class="comment">/** 调用SDK生成支付链接，可在浏览器打开链接进入支付页面 **/</span></span><br><span class="line">            form = alipayClient.pageExecute(alipayRequest, <span class="string">&quot;GET&quot;</span>).getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlipayApiException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 获取接口调用结果，如果调用失败，可根据返回错误信息到该文档寻找排查方案：https://opensupport.alipay.com/support/helpcenter/97 **/</span></span><br><span class="line"><span class="comment">//        System.out.println(form);</span></span><br><span class="line"><span class="comment">//        response.setContentType(&quot;text/html;charset=&quot; + &quot;utf-8&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 直接将完整的表单html输出到页面 **/</span></span><br><span class="line"><span class="comment">//        response.getWriter().write(form);</span></span><br><span class="line"><span class="comment">//        response.getWriter().flush();</span></span><br><span class="line">        <span class="keyword">return</span> form;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 支付宝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java支付宝异步通知</title>
      <link href="/2021/07/13/java%E6%94%AF%E4%BB%98%E5%AE%9D%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5/"/>
      <url>/2021/07/13/java%E6%94%AF%E4%BB%98%E5%AE%9D%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>Jar包依赖</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- AliPay Old --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alipay.sdk&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;alipay-sdk-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">4.12</span><span class="number">.4</span>.ALL&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>支付宝API，异步通知：<a href="https://opendocs.alipay.com/support/01raw4" title="官方文档">官方文档</a> 说到这一点，支付宝还是比较实在的，调用API整个过程不花一分钱，而且文档详细，人工服务很好联系，这点微信支付应该学习一下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付宝异步通知</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(value = &quot;aliPayCallBack&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">aliPayCallBack</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Map&lt;String, String[]&gt; requestParameterMap = request.getParameterMap();</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//异步验签</span></span><br><span class="line">    log.info(<span class="string">&quot;[支付_支付宝]开始异步验签&quot;</span>);</span><br><span class="line">    map = AliPayUtil.asyncSignVerify(requestParameterMap);</span><br><span class="line">    <span class="type">String</span> <span class="variable">notice</span> <span class="operator">=</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">    <span class="comment">//验签成功</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">boolean</span>) map.get(<span class="string">&quot;succ&quot;</span>)) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;[支付_支付宝]验签成功!&quot;</span>);</span><br><span class="line">        <span class="comment">//获取支付状态</span></span><br><span class="line">        LinkedHashMap&lt;String, String&gt; linkedHashMap = (LinkedHashMap&lt;String, String&gt;) map.get(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">trade_status</span> <span class="operator">=</span> linkedHashMap.get(<span class="string">&quot;trade_status&quot;</span>);</span><br><span class="line">        <span class="keyword">switch</span> (trade_status) &#123;</span><br><span class="line">            <span class="comment">//等待买家付款</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;WAIT_BUYER_PAY&quot;</span>:</span><br><span class="line">                <span class="comment">/**todo 业务处理，省略，根据自己需求**/</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//未付款交易超时关闭，或支付完成后全额退款。</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;TRADE_CLOSED&quot;</span>:</span><br><span class="line">                <span class="comment">/**todo 业务处理，省略，根据自己需求**/</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//交易结束，不可退款。</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;TRADE_FINISHED&quot;</span>:</span><br><span class="line">                <span class="comment">/**todo 业务处理，省略，根据自己需求**/</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//更新订单完成时间</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//交易支付成功。</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;TRADE_SUCCESS&quot;</span>:</span><br><span class="line">                <span class="comment">/**todo 业务处理，省略，根据自己需求**/</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                *注意异步通知处理完成后，必须返回给支付宝：success 这几个字符</span></span><br><span class="line"><span class="comment">                *或者HttpServletResponse输出，详情看官方文档</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                notice = <span class="string">&quot;success&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;[支付_支付宝]验签失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//默认返回验签失败,支付宝会以一定时间间隔持续通知</span></span><br><span class="line">    <span class="keyword">return</span> notice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工具类-x2F-方法"><a href="#工具类-x2F-方法" class="headerlink" title="工具类&#x2F;方法"></a>工具类&#x2F;方法</h2><p>验签方法 AliPayUtil.asyncSignVerify() Jar包依赖，主要是StringUtils这个工具类的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.4</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步验签</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> requestParameterMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> AlipayApiException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String, Object&gt; <span class="title function_">asyncSignVerify</span><span class="params">(Map&lt;String, String[]&gt; requestParameterMap)</span> </span><br><span class="line">        <span class="keyword">throws</span> AlipayApiException &#123;</span><br><span class="line">    <span class="comment">//编码格式,修改成你自己的</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">charset</span> <span class="operator">=</span> <span class="string">&quot;utf-8&quot;</span>;</span><br><span class="line">    <span class="comment">//支付宝公钥,修改成你自己的</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">alipaypublicKey</span> <span class="operator">=</span> <span class="string">&quot;支付宝公钥&quot;</span>;</span><br><span class="line">    <span class="comment">//签名方式,修改成你自己的</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sign_type</span> <span class="operator">=</span> <span class="string">&quot;RSA2&quot;</span>;</span><br><span class="line">    <span class="comment">//拼接返回内容</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, String[]&gt; stringEntry : requestParameterMap.entrySet()) &#123;</span><br><span class="line">        builder.append(stringEntry.getKey()).append(<span class="string">&quot;=&quot;</span>).</span><br><span class="line">                append(StringUtils.removeEnd(</span><br><span class="line">                        StringUtils.removeStart(Arrays.toString(</span><br><span class="line">                                stringEntry.getValue()), <span class="string">&quot;[&quot;</span>), <span class="string">&quot;]&quot;</span>))</span><br><span class="line">                .append(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">resultInfo</span> <span class="operator">=</span> StringUtils.removeEnd(builder.toString(), <span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;[支付_支付宝]待验签内容:&#123;&#125;&quot;</span>, resultInfo);</span><br><span class="line">    <span class="comment">//对待签名字符串数据通过&amp;进行拆分</span></span><br><span class="line">    String[] temp = resultInfo.split(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">    LinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, String&gt;();</span><br><span class="line">    <span class="comment">//把拆分数据放在map集合内</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">        String[] arr = temp[i].split(<span class="string">&quot;=&quot;</span>, <span class="number">2</span>); <span class="comment">//通过&quot;=&quot;号分割成2个数据</span></span><br><span class="line">        String[] tempAagin = <span class="keyword">new</span> <span class="title class_">String</span>[arr.length]; <span class="comment">//再开辟一个数组用来接收分割后的数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            tempAagin[j] = arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(tempAagin[<span class="number">0</span>], tempAagin[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flg</span> <span class="operator">=</span> AlipaySignature.rsaCheckV1(map, alipaypublicKey, charset, sign_type);</span><br><span class="line">    HashMap&lt;String, Object&gt; objectHashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    objectHashMap.put(<span class="string">&quot;data&quot;</span>, map);</span><br><span class="line">    objectHashMap.put(<span class="string">&quot;succ&quot;</span>, flg);</span><br><span class="line">    <span class="keyword">return</span> objectHashMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 支付宝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java微信支付回调通知</title>
      <link href="/2021/07/12/java%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%9B%9E%E8%B0%83%E9%80%9A%E7%9F%A5/"/>
      <url>/2021/07/12/java%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%9B%9E%E8%B0%83%E9%80%9A%E7%9F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- WeChat Pay --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.wechatpay-apiv3&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;wechatpay-apache-httpclient&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">0.2</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.wxpay&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;wxpay-sdk&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">0.0</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>微信支付，支付结果通知：<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_7&index=8" title="官方地址">官方地址</a> 主要方法，工具类在下方</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信支付回调通知</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;wXCallBack&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">wXCallBack</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ServletInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    inputStream = request.getInputStream();</span><br><span class="line">    <span class="type">String</span> <span class="variable">notifyXml</span> <span class="operator">=</span> StreamUtil.inputStreamString(inputStream, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">//验签</span></span><br><span class="line">    <span class="keyword">if</span> (WXPayUtil.isSignatureValid(notifyXml, <span class="string">&quot;your key&quot;</span>)) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;[支付_微信支付]验签成功！&quot;</span>);</span><br><span class="line">        <span class="comment">//解析返回结果</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> WeChatPayUtil.xmlToJson(notifyXml);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result_code</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;result_code&quot;</span>);</span><br><span class="line">        <span class="comment">//判断是否支付成功</span></span><br><span class="line">        <span class="keyword">if</span> (result_code.equals(WXPayConstants.SUCCESS)) &#123;</span><br><span class="line">            <span class="comment">/**todo 处理业务 省略，根据自己业务补充 **/</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//支付成功，回传通知微信已收到交易成功通知</span></span><br><span class="line">            HashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;return_code&quot;</span>, <span class="string">&quot;SUCCESS&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;return_msg&quot;</span>, <span class="string">&quot;OK&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">resultXml</span> <span class="operator">=</span> WXPayUtil.mapToXml(map);</span><br><span class="line">            response.setContentType(<span class="string">&quot;text/xml&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;[支付_微信支付]通知已处理&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> resultXml;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//微信收到校验失败的结果后，会以一定时间间隔持续调用该返回结果</span></span><br><span class="line">    Map&lt;String, String&gt; returnMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    returnMap.put(<span class="string">&quot;return_code&quot;</span>, <span class="string">&quot;FAIL&quot;</span>);</span><br><span class="line">    returnMap.put(<span class="string">&quot;return_msg&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">returnXml</span> <span class="operator">=</span> WXPayUtil.mapToXml(returnMap);</span><br><span class="line">    log.info(<span class="string">&quot;[支付_微信支付]处理失败！&quot;</span>);</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/xml&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> returnXml;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StreamUtil</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IDEA</span></span><br><span class="line"><span class="comment"> * Author: www.itze.cn</span></span><br><span class="line"><span class="comment"> * Date: 2021-07-07</span></span><br><span class="line"><span class="comment"> * Email：gitlab@111.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">_buffer_size</span> <span class="operator">=</span> <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * InputStream流转换成String字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inStream InputStream流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encoding 编码格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">inputStreamString</span><span class="params">(InputStream inStream, String encoding)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">outStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                outStream = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                <span class="type">byte</span>[] tempBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[_buffer_size];</span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> ((count = inStream.read(tempBytes, <span class="number">0</span>, _buffer_size)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    outStream.write(tempBytes, <span class="number">0</span>, count);</span><br><span class="line">                &#125;</span><br><span class="line">                outStream.flush();</span><br><span class="line">                result = <span class="keyword">new</span> <span class="title class_">String</span>(outStream.toByteArray(), encoding);</span><br><span class="line">                outStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            result = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (inStream != <span class="literal">null</span>) inStream.close();</span><br><span class="line">                <span class="keyword">if</span> (outStream != <span class="literal">null</span>) outStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WeChatPayUtil.xmlToJson() 需要Jar依赖</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 解析xml --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.dom4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dom4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.1</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析字符串形式的XML内容</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> xmlContent</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> DocumentException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">xmlToJson</span><span class="params">(String xmlContent)</span> <span class="keyword">throws</span> DocumentException &#123;</span><br><span class="line">    <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> DocumentHelper.parseText(xmlContent);</span><br><span class="line">    <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> rootElement.elementIterator();</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        <span class="type">DefaultElement</span> <span class="variable">defaultElement</span> <span class="operator">=</span> (DefaultElement) iterator.next();</span><br><span class="line">        jsonObject.fluentPut(defaultElement.getName(), defaultElement.getStringValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jsonObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>WXPayUtil、WXPayConstants这两个最上方微信官方依赖中带有</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微信支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信支付：当前商户号暂不支持关联该类型的AppID</title>
      <link href="/2021/07/12/%E5%BD%93%E5%89%8D%E5%95%86%E6%88%B7%E5%8F%B7%E6%9A%82%E4%B8%8D%E6%94%AF%E6%8C%81%E5%85%B3%E8%81%94%E8%AF%A5%E7%B1%BB%E5%9E%8B%E7%9A%84appid/"/>
      <url>/2021/07/12/%E5%BD%93%E5%89%8D%E5%95%86%E6%88%B7%E5%8F%B7%E6%9A%82%E4%B8%8D%E6%94%AF%E6%8C%81%E5%85%B3%E8%81%94%E8%AF%A5%E7%B1%BB%E5%9E%8B%E7%9A%84appid/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>需要使用PC端扫码微信支付，查阅微信支付API文档，符合需求的是Native支付模式</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先吐槽一下微信支付，搞那么多账号干啥，<a href="https://mp.weixin.qq.com/" title="公众号平台">公众号平台</a>，<a href="https://pay.weixin.qq.com/index.php/core/home/login" title="商户平台">商户平台</a>，开放平台，而且每个账户不想通，开通账户想要使用微信支付认证还要花钱，一个认证300块，认证到最后了，绑定AppID去了，提示个：当前商户号暂不支持关联该类型的AppID，真没谁了，找人工也难，这很腾讯 <strong>1.需要认证的公众号订阅号或者服务号或者媒体类订阅号公众号 2.微信商户平台账户</strong></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>PC网站，要开通二维码扫码支付，申请使用NATIVE方式支付，按照文档引导，需要商户ID和appid绑定，登陆商户平台添加appi绑定微信认证的订阅号公众号appid ,提示：当前商户号暂不支持关联该类型的AppID，然后去微信开放平台又花300块认证开发者资质，申请网站应用，给出一个appid去绑定，还是提示当前商户号暂不支持关联该类型的AppID</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>PC网站，需要开通扫描二维码支付 由于我们的公众号是认证的订阅号，并不是服务号，而且也不属于媒体类型的订阅号，所以一开始绑定公众号AppID提示并支持，后来去<a href="https://open.weixin.qq.com/" title="开放平台">开放平台</a> 注册了账户，又花了300块认证了开发者资质认证，申请开通了网站应用，开通之后，发现有微信支付能力，打电话问客服说网站应用不支持微信支付，我去，不支持你放着干啥， <img src="https://www.itze.cn/wp-content/uploads/2021/07/%E7%BD%91%E7%AB%99%E5%BA%94%E7%94%A8.png"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>由于我们是认证的公众号订阅号，注意公众号认证需要花费300块，登陆<a href="https://mp.weixin.qq.com/" title="微信公众平台">微信公众平台</a> 在里面申请注册微信小程序，由于公众号已经认证，注册完成之后会自动关联认证，不需要再花费认证！注册完成微信小程序之后会有<strong>AppID</strong> 这个小程序可以不用发布，不用开发，我们只要他的AppID 然后去<a href="https://pay.weixin.qq.com/index.php/core/home/login" title="微信商户平台">微信商户平台</a> 产品中心-开通Navite支付 然后绑定开通认证的微信小程序AppID,发起授权绑定，然后去登陆微信小程序后台，确认接受绑定即可！ <strong>产品中心-开通Native</strong> <img src="https://www.itze.cn/wp-content/uploads/2021/07/Navite.png"> <strong>绑定AppID</strong> <img src="https://www.itze.cn/wp-content/uploads/2021/07/%E7%BB%91%E5%AE%9AAppID.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微信支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次验证码裂开问题</title>
      <link href="/2021/06/30/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E8%A3%82%E5%BC%80%E9%97%AE%E9%A2%98/"/>
      <url>/2021/06/30/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E8%A3%82%E5%BC%80%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>操作系统：CentOS 7</li><li>数据库：Msql 8.0</li><li>Docker版本：20.10</li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>生产环境、预发环境、所有验证码都裂开</p><h3 id="分析及解决"><a href="#分析及解决" class="headerlink" title="分析及解决"></a>分析及解决</h3><p>发现请求验证码的接口状态一直在pending，想到验证码是要往数据库中写入存储，使用navicat连接数据库发现，正常连接，XShell连接服务器，由于数据库使用docker运行 查看在运行容器及大小</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -s</span><br></pre></td></tr></table></figure><p>在正常运行，心想重启一下dokcer中数据库容器，于是重启容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart 容器名称</span><br></pre></td></tr></table></figure><p>重启之后发现navicat都连接不上了，本来还能连接，使用telnet命令ping一下服务器数据库端口，发现ping通，回到服务器，尝试重启docker</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>docker重启之后，由于创建容器时设置了docker重启会自动启动，查看发现数据库容器正常启动，再次ping端口，发现仍然ping不通，有点着急了，自己观察发现在运行容器的PORTS列为空！也就是说docker启动容器之后并没有映射端口，于是去网上搜索，查看docker 容器的网络配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect  容器名或容器idgrep IPAddress</span><br></pre></td></tr></table></figure><p>输出结果中：IPAddress 为空！果然docker网络配置出现了问题 <img src="https://www.itze.cn/wp-content/uploads/2021/06/%E6%AD%A3%E5%B8%B8.png"> 查看docker的虚拟网络</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><p>输出结果正常 <img src="https://www.itze.cn/wp-content/uploads/2021/06/docker_network_ls.png"></p><h2 id="重置docker网络"><a href="#重置docker网络" class="headerlink" title="重置docker网络"></a>重置docker网络</h2><p>停止docker服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><p>关闭docker相关网卡设备</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip link set docker0 down</span><br></pre></td></tr></table></figure><p>删除 docker0桥接设备</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brctl delbr docker0</span><br></pre></td></tr></table></figure><p>如果提示：brctl command not fount 安装brctl</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install bridge-utils -y</span><br></pre></td></tr></table></figure><p>最后再次启动docker服务，然后启动你的容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>访问发现，数据库正常连接，验证码正常出来，但是！没过两分钟，前端就告知验证码又没了，想了想不应啊，查看服务器磁盘内存发现磁盘内存使用率100%！应该是磁盘内存不够写不进去吧， 查看服务器磁盘内存</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><p>查看当前路径下大文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">du -sh *</span><br></pre></td></tr></table></figure><p>查看指定路径下文件大小</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">du -h /root</span><br></pre></td></tr></table></figure><p>找到几个无用的大文件，删除之后发现验证码恢复正常，后续改进可以把验证码缓存到Redis中。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Linux </category>
          
          <category> Docker </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Java </tag>
            
            <tag> Docker </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>com.mathworks.toolbox.javabuilder.MWException: An error occurred while initializing the component.</title>
      <link href="/2021/06/18/com-mathworks-toolbox-javabuilder-mwexception-an-error-occurred-while-initializing-the-component/"/>
      <url>/2021/06/18/com-mathworks-toolbox-javabuilder-mwexception-an-error-occurred-while-initializing-the-component/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>操作系统：CentOS 7</li><li>JDK版本：1.8.281</li><li>Matlab Runtime版本：2019a</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Java调用Matlab生成的Jar包，出现错误</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.mathworks.toolbox.javabuilder.MWException: An error occurred <span class="keyword">while</span> initializing the component.</span><br></pre></td></tr></table></figure><p>环境错误</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Bundle#<span class="number">11</span> start filed: libXt.so<span class="number">.6</span>: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><p>具体下图 <img src="https://www.itze.cn/wp-content/uploads/2021/06/ERROE.png"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>如果你的同样出现了上面说的：<strong>环境错误</strong>，出现关键字：libXt.so.6，搜索同一台正常能正常运行的机器，发现有这个文件，而这台出问题的却没有，说明缺少这类文件，于是去搜资源，推荐一个网站：<a href="https://pkgs.org/" title="https://pkgs.org">https://pkgs.org</a> <img src="https://www.itze.cn/wp-content/uploads/2021/06/paks.png"> 选择安装方式，Centos推荐yum方式安装，Ubuntu的apt应该也是可以的 <img src="https://www.itze.cn/wp-content/uploads/2021/06/yum.png"> 安装命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install libXt</span><br></pre></td></tr></table></figure><p>安装完成问题解决</p><h3 id="后续问题"><a href="#后续问题" class="headerlink" title="后续问题"></a>后续问题</h3><p>简单的Matlab生成的Jar包可以正常运行，但是发现生成的Jar包有涉及到深度学习的却依然出现问题,大致意思是再Matlab中写的方法函数：algoMethod 没有定义</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.mathworks.toolbox.javabuilder.MWException: Undefined function <span class="string">&#x27;algoMethod&#x27;</span> <span class="keyword">for</span> input arguments of type <span class="string">&#x27;uint8&#x27;</span>.</span><br></pre></td></tr></table></figure><h3 id="后续问题解决办法"><a href="#后续问题解决办法" class="headerlink" title="后续问题解决办法"></a>后续问题解决办法</h3><p>这个后续问题的解决是同事对比了正常能运行机器的MatlabRuntime，所有参数、环境都是一样的，介于上一个问题的解决办法，考虑到应该也是系统环境问题，对比发现出问题的机器lib64文件夹中比正常的少了几个文件，由于两台机器系统都是CentOS 7.6,于是把正常那台机器的lib64整个文件夹打包，记得先备份一份，然后上传到出错误问题的机器，先把错误的这台机器lib64也备份一份，然后解压覆盖原有lib64整个文件夹，发现问题解决了~</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Linux </category>
          
          <category> MATLAB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> Java </tag>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql设置连接超时时间</title>
      <link href="/2021/05/26/mysql%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4/"/>
      <url>/2021/05/26/mysql%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Mysql版本：8.0 操作系统：Centos 7</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>编辑mysql的配置文件，位置：&#x2F;etc&#x2F;my.cnf 命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure><p>添加以下设置 时间单位是秒，2592000秒&#x3D;30天，默认8小时</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wait_timeout=2592000</span><br><span class="line"></span><br><span class="line">interactive_timeout=2592000</span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2021/05/mysqld.png"> 重启mysql服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>如果是docker运行的mysql容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart mysql_name</span><br></pre></td></tr></table></figure><p>查看</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%timeout%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2021/05/timeout.png"></p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java整合Redis及序列化（下）</title>
      <link href="/2021/05/20/java%E6%95%B4%E5%90%88redis%E5%8F%8A%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2021/05/20/java%E6%95%B4%E5%90%88redis%E5%8F%8A%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="接Java整合Redis及序列化（上）"><a href="#接Java整合Redis及序列化（上）" class="headerlink" title="接Java整合Redis及序列化（上）"></a><a href="https://www.itze.cn/java/635.html" title="接Java整合Redis及序列化（上）">接Java整合Redis及序列化（上）</a></h2><p>RedisConfig.java序列化配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.support.spring.GenericFastJsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IDEA</span></span><br><span class="line"><span class="comment"> * Author: www.itze.cn</span></span><br><span class="line"><span class="comment"> * Date: 2021-05-18</span></span><br><span class="line"><span class="comment"> * Email：gitlab@111.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">redisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置序列化</span></span><br><span class="line"><span class="comment">     * key设置String类型序列化</span></span><br><span class="line"><span class="comment">     * value设置阿里的FastJson序列化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplateInit</span><span class="params">()</span> &#123;</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericFastJsonRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setHashValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericFastJsonRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重点！！！在applicationContext.xml上下文配置中引入application-redis.xml</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;import resource=&quot;classpath:redis/application-redis.xml&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>如果application-redis.xml配置文件中，标注&lt;– !!!这段代码可以删除！！！–&gt;里面包含的代码和RedisConfig.java同时存在，Spring将会以RedisConfig.java为高优先级使用过，如果配置了RedisConfig.java，记得在application-redis.xml中引入，本文在xml文件中最下面，xml中注释可删除的代码可有可无</p><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p>针对SpringBoot项目，如果使用的是SpringBoot项目只需要在RedisConfig.java类的上面加上**@Configuration** 注解即可，无需配置文件，SpringBoot启动时会扫描配置类注解</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Redis </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java整合Redis及序列化（上）</title>
      <link href="/2021/05/19/java%E6%95%B4%E5%90%88redis%E5%8F%8A%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2021/05/19/java%E6%95%B4%E5%90%88redis%E5%8F%8A%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>项目使用的是SSM框架，在引入Redis之后需要对Redis中数据类型结构类型进行序列化，如果不进行序列化，那么只能存储String类型，如果存储其他类型将会出现：<strong>can’t cast to String</strong> 错误， Spring-data-Redis中提供的有StringRedisSerializer、JdkSerializationRedisSerializer序列化方式 - StringRedisSerializer：一般是对key进行序列化 - JdkSerializationRedisSerializer：一般是对value进行序列化</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>经过测试使用在SSM框架中引入Redis，以xml配置文件的方式对Redis数据类型结构进行序列化，如果key、value都是以StringRedisSerializer这种方式序列化，那么value也只能是String类型，如果将value改为JdkSerializationRedisSerializer序列化，不影响正常使用get&#x2F;set，但是如果在Redis可视化窗口工具里、如RDM(Redis Desktop Manager)、Another Redis Desktop Manager 可视化工具中查看会出现乱码问题</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>key值使用阿里的FastJson进行序列化</p><h2 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a>完整流程</h2><p>整合Redis完整流程</p><h3 id="添加Maven依赖"><a href="#添加Maven依赖" class="headerlink" title="添加Maven依赖"></a>添加Maven依赖</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.3</span><span class="number">.0</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- redis 依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.4</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 阿里巴巴 Fastjson --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.2</span><span class="number">.49</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：这两个Jar包的版本号如果使用过高可能会出现一些问题</strong></p><h3 id="Redis配置文件"><a href="#Redis配置文件" class="headerlink" title="Redis配置文件"></a>Redis配置文件</h3><p>redis.properties数据配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#Redis</span><br><span class="line">redis.addr = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">redis.port = <span class="number">12345</span></span><br><span class="line">redis.auth = <span class="number">123456</span></span><br><span class="line">#最大空闲数(默认:<span class="number">8</span>)</span><br><span class="line">redis.maxIdle=<span class="number">300</span></span><br><span class="line">#当连接池资源耗尽时,调用者最大阻塞时间,超时将抛出异常.单位:毫秒,默认:-<span class="number">1</span>,表示永不超时.</span><br><span class="line">redis.maxWait=<span class="number">1000</span></span><br><span class="line">#最大连接数(默认:<span class="number">8</span>)</span><br><span class="line">redis.maxTotal=<span class="number">500</span></span><br><span class="line">#指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个 (默认:<span class="literal">false</span>)</span><br><span class="line">redis.testOnBorrow=<span class="literal">true</span></span><br><span class="line">redis.testOnReturn=<span class="literal">true</span></span><br><span class="line">redis.testWhileIdle=<span class="literal">true</span></span><br><span class="line">redis.blockWhenExhausted=<span class="literal">false</span></span><br><span class="line">redis.numTestsPerEvictionRun=<span class="number">1024</span></span><br><span class="line">redis.timeBetweenEvictionRunsMillis=<span class="number">30000</span></span><br><span class="line">redis.minEvictableIdleTimeMillis=<span class="number">1800000</span></span><br><span class="line">redis.maxActive = <span class="number">1024</span></span><br><span class="line">redis.timeOut = <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>application-redis.xml配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;</span><br><span class="line">            http://www.springframework.org/schema/beans</span><br><span class="line">            http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">            http://www.springframework.org/schema/context</span><br><span class="line">            http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line">    &lt;!--扫描redis配置文件--&gt;</span><br><span class="line">    &lt;context:property-placeholder ignore-unresolvable=&quot;true&quot; location=&quot;classpath:properties/redis.properties&quot;/&gt;</span><br><span class="line">    &lt;!--设置连接池--&gt;</span><br><span class="line">    &lt;bean id=&quot;poolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt;</span><br><span class="line">        &lt;!-- 最大空闲连接数 --&gt;</span><br><span class="line">        &lt;property name=&quot;maxIdle&quot; value=&quot;$&#123;redis.maxIdle&#125;&quot;/&gt;</span><br><span class="line">        &lt;!-- 最大连接数 --&gt;</span><br><span class="line">        &lt;property name=&quot;maxTotal&quot; value=&quot;$&#123;redis.maxTotal&#125;&quot;/&gt;</span><br><span class="line">        &lt;!-- 每次释放连接的最大数目 --&gt;</span><br><span class="line">        &lt;property name=&quot;numTestsPerEvictionRun&quot; value=&quot;$&#123;redis.numTestsPerEvictionRun&#125;&quot;/&gt;</span><br><span class="line">        &lt;!-- 释放连接的扫描间隔（毫秒） --&gt;</span><br><span class="line">        &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;$&#123;redis.timeBetweenEvictionRunsMillis&#125;&quot;/&gt;</span><br><span class="line">        &lt;!-- 连接最小空闲时间 --&gt;</span><br><span class="line">        &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;$&#123;redis.minEvictableIdleTimeMillis&#125;&quot;/&gt;</span><br><span class="line">        &lt;!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 --&gt;</span><br><span class="line">        &lt;property name=&quot;maxWaitMillis&quot; value=&quot;$&#123;redis.maxWait&#125;&quot;/&gt;</span><br><span class="line">        &lt;!-- 在获取连接的时候检查有效性, 默认false --&gt;</span><br><span class="line">        &lt;property name=&quot;testOnBorrow&quot; value=&quot;$&#123;redis.testOnBorrow&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;testOnReturn&quot; value=&quot;$&#123;redis.testOnReturn&#125;&quot;/&gt;</span><br><span class="line">        &lt;!-- 在空闲时检查有效性, 默认false --&gt;</span><br><span class="line">        &lt;property name=&quot;testWhileIdle&quot; value=&quot;$&#123;redis.testWhileIdle&#125;&quot;/&gt;</span><br><span class="line">        &lt;!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true --&gt;</span><br><span class="line">        &lt;property name=&quot;blockWhenExhausted&quot; value=&quot;$&#123;redis.blockWhenExhausted&#125;&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--Spring整合Jedis,设置连接属性--&gt;</span><br><span class="line">    &lt;bean id=&quot;connectionFactory&quot; class=&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;</span><br><span class="line">          p:hostName=&quot;$&#123;redis.addr&#125;&quot;</span><br><span class="line">          p:port=&quot;$&#123;redis.port&#125;&quot;</span><br><span class="line">          p:password=&quot;$&#123;redis.auth&#125;&quot;</span><br><span class="line">          p:pool-config-ref=&quot;poolConfig&quot;</span><br><span class="line">          p:timeout=&quot;100000&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;redisTemplate&quot;</span><br><span class="line">          class=&quot;org.springframework.data.redis.core.StringRedisTemplate&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;connectionFactory&quot; ref=&quot;connectionFactory&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- ！！！这段代码可以删除 开始！！！--&gt;</span><br><span class="line">        &lt;!-- 如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can&#x27;t cast to String！！！--&gt;</span><br><span class="line">        &lt;property name=&quot;keySerializer&quot;&gt;</span><br><span class="line">            &lt;!--对key的默认序列化器。默认值是StringSerializer--&gt;</span><br><span class="line">            &lt;bean class=&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;/&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--是对value的默认序列化器，默认值是取自DefaultSerializer的JdkSerializationRedisSerializer。--&gt;</span><br><span class="line">        &lt;property name=&quot;valueSerializer&quot;&gt;</span><br><span class="line">            &lt;bean class=&quot;org.springframework.data.redis.serializer.JdkSerializationRedisSerializer&quot;/&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--存储Map时key需要的序列化配置--&gt;</span><br><span class="line">        &lt;property name=&quot;hashKeySerializer&quot;&gt;</span><br><span class="line">            &lt;bean class=&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;/&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--存储Map时value需要的序列化配置--&gt;</span><br><span class="line">        &lt;property name=&quot;hashValueSerializer&quot;&gt;</span><br><span class="line">            &lt;bean class=&quot;org.springframework.data.redis.serializer.JdkSerializationRedisSerializer&quot;/&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- ！！！这段代码可以删除 结束！！！--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!--配置redis工具类bean--&gt;</span><br><span class="line">    &lt;bean id=&quot;redisUtils&quot; class=&quot;com.beyondtech.common.redis.RedisUtils&quot;&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;!-- 配置redisTemp序列化类bean --&gt;</span><br><span class="line">    &lt;bean id=&quot;redisConfig&quot; class=&quot;com.beyondtech.common.configuration.redisConfig&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Redis </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot打成Jar包及引用第三方Jar包</title>
      <link href="/2021/03/26/springboot%E6%89%93%E6%88%90jar%E5%8C%85%E5%8F%8A%E5%BC%95%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9jar%E5%8C%85/"/>
      <url>/2021/03/26/springboot%E6%89%93%E6%88%90jar%E5%8C%85%E5%8F%8A%E5%BC%95%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9jar%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>先前在网上搜索一下，遇到Springboot打包包含第三方Jar包的时候的问题的不同情况还挺多的</p><h3 id="能打成jar包"><a href="#能打成jar包" class="headerlink" title="能打成jar包"></a>能打成jar包</h3><p>能正常打包完成的情况下，通过java -jar xxx.jar运行之后，遇到的情况一般有下面两类 1.没有主清单属性 2.ClassNotFound，找不到引用第三方Jar包中类方法</p><h3 id="不能打成Jar包"><a href="#不能打成Jar包" class="headerlink" title="不能打成Jar包"></a>不能打成Jar包</h3><p>不能正常打包的情况下，打包的时候就会遇到一些奇奇怪怪的错误，这种情况一般是打包的时候，之前输出过的Jar包被其他程序占用，比如你通过压缩包正在预览这个Jar包，</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>先看下工程目录 <img src="https://www.itze.cn/wp-content/uploads/2021/03/%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95.png"> 1.在resources下建立lib文件夹，将需要用的第三方Jar包放入，记得在Library正常引入 2.修改pom文件，在pom文件中添加第三方Jar依赖和配置，添加修改如下 添加到dependencies标签里面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 第三方Jar包--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;it.download&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;download&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">0.0</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">    &lt;systemPath&gt;$&#123;project.basedir&#125;/src/main/resources/lib/download.jar&lt;/systemPath&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>修改配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;includeSystemScope&gt;<span class="literal">true</span>&lt;/includeSystemScope&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><p>以上修改完成之后，先clean清理一下，如果图中1的clean不能正常清理完成，请检查是否有其他程序正在占用之前输出的Jar包，如有关掉，清理完之后再双击package执行打包 <img src="https://www.itze.cn/wp-content/uploads/2021/03/12.png"></p><h3 id="打包完成"><a href="#打包完成" class="headerlink" title="打包完成"></a>打包完成</h3><p>打包完成之后检查输出的Jar包中时候包含第三方Jar包，如图download就是 <img src="https://www.itze.cn/wp-content/uploads/2021/03/jar%E5%8C%85%E5%AE%8C%E6%88%90%E5%9B%BE.png"> 照着这个做一般情况都能解决</p><h3 id="附上完整POM文件"><a href="#附上完整POM文件" class="headerlink" title="附上完整POM文件"></a>附上完整POM文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">2.4</span><span class="number">.4</span>&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;test&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;test&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project <span class="keyword">for</span> Spring Boot&lt;/description&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;<span class="number">1.8</span>&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;net.coobird&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;thumbnailator&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">0.4</span><span class="number">.13</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.2</span><span class="number">.49</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.mashape.unirest&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;unirest-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.4</span><span class="number">.9</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 第三方Jar包--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;it.download&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;download&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">0.0</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">            &lt;systemPath&gt;$&#123;project.basedir&#125;/src/main/resources/lib/download.jar&lt;/systemPath&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;includeSystemScope&gt;<span class="literal">true</span>&lt;/includeSystemScope&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS添加开机重启自启动脚本</title>
      <link href="/2021/03/03/centos%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E9%87%8D%E5%90%AF%E8%87%AA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"/>
      <url>/2021/03/03/centos%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E9%87%8D%E5%90%AF%E8%87%AA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>操作系统：CentOS</li><li>这里以开启重启自启动tomcat服务为例</li></ul><h3 id="1-准备autoStart-sh脚本"><a href="#1-准备autoStart-sh脚本" class="headerlink" title="1.准备autoStart.sh脚本"></a>1.准备autoStart.sh脚本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">chkconfig: 2345 80 90</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">description:开机自启脚本</span></span><br><span class="line">echo &quot;###############开机自启脚本###############&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以后台挂起的方式执行</span></span><br><span class="line">nohup /root/tomcat/bin/start.sh &amp;</span><br></pre></td></tr></table></figure><h4 id="注意：脚本前三行一定要有，不然会出现“autoStart-sh不支持chkconfig”"><a href="#注意：脚本前三行一定要有，不然会出现“autoStart-sh不支持chkconfig”" class="headerlink" title="注意：脚本前三行一定要有，不然会出现“autoStart.sh不支持chkconfig”"></a>注意：脚本前三行一定要有，不然会出现“autoStart.sh不支持chkconfig”</h4><h4 id="第二行chkconfig-2345-80-90-不要随便填写，规则去网上查一下"><a href="#第二行chkconfig-2345-80-90-不要随便填写，规则去网上查一下" class="headerlink" title="第二行chkconfig:2345 80 90 不要随便填写，规则去网上查一下"></a>第二行chkconfig:2345 80 90 不要随便填写，规则去网上查一下</h4><h3 id="2-将start-sh脚本放到服务器-x2F-etc-x2F-rc-d-x2F-init-d-x2F-目录下"><a href="#2-将start-sh脚本放到服务器-x2F-etc-x2F-rc-d-x2F-init-d-x2F-目录下" class="headerlink" title="2.将start.sh脚本放到服务器&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;目录下"></a>2.将start.sh脚本放到服务器&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;目录下</h3><h3 id="3-添加脚本权限"><a href="#3-添加脚本权限" class="headerlink" title="3.添加脚本权限"></a>3.添加脚本权限</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/rc.d/init.d/</span><br><span class="line">chmod +x autoStart.sh</span><br></pre></td></tr></table></figure><h3 id="4-添加脚本到开机服务"><a href="#4-添加脚本到开机服务" class="headerlink" title="4.添加脚本到开机服务"></a>4.添加脚本到开机服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig --add autoStart.sh</span><br><span class="line">chkconfig autoStart.sh on</span><br></pre></td></tr></table></figure><p>查看开机启动服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig --list</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OkHttp忽略SSL证书验证</title>
      <link href="/2021/02/24/okhttp%E5%BF%BD%E7%95%A5ssl%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/"/>
      <url>/2021/02/24/okhttp%E5%BF%BD%E7%95%A5ssl%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>自签的SSL证书不受信任，可通过将该证书添加至JDK密钥库，<a href="http://www.itwps.com/0e51/74ff" title="jdk信任自签证书">jdk信任自签证书</a>，如果这种方法行不通，可尝试该方式</p><h3 id="使用代码"><a href="#使用代码" class="headerlink" title="使用代码"></a>使用代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IDEA</span></span><br><span class="line"><span class="comment"> * Author: www.itze.cn</span></span><br><span class="line"><span class="comment"> * Date: 2021-02-24</span></span><br><span class="line"><span class="comment"> * Email：gitlab@111.com</span></span><br><span class="line"><span class="comment"> * okhttp忽略所有SSL证书认证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> OkHttpClient <span class="title function_">getUnsafeOkHttpClient</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> TrustManager[] trustAllCerts = <span class="keyword">new</span> <span class="title class_">TrustManager</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">X509TrustManager</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkClientTrusted</span><span class="params">(java.security.cert.X509Certificate[] chain, String authType)</span> &#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkServerTrusted</span><span class="params">(java.security.cert.X509Certificate[] chain, String authType)</span> &#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> java.security.cert.X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">java</span>.security.cert.X509Certificate[]&#123;&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">SSLContext</span> <span class="variable">sslContext</span> <span class="operator">=</span> SSLContext.getInstance(<span class="string">&quot;SSL&quot;</span>);</span><br><span class="line">        sslContext.init(<span class="literal">null</span>, trustAllCerts, <span class="keyword">new</span> <span class="title class_">java</span>.security.SecureRandom());</span><br><span class="line">        <span class="keyword">final</span> javax.net.ssl.<span class="type">SSLSocketFactory</span> <span class="variable">sslSocketFactory</span> <span class="operator">=</span> sslContext.getSocketFactory();</span><br><span class="line">        OkHttpClient.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder();</span><br><span class="line">        builder.sslSocketFactory(sslSocketFactory,(X509TrustManager)(trustAllCerts[<span class="number">0</span>]));</span><br><span class="line">        builder.hostnameVerifier(<span class="keyword">new</span> <span class="title class_">HostnameVerifier</span>() &#123;</span><br><span class="line">            <span class="comment">//这里存放不需要忽略SSL证书的域名，为空即忽略所有证书</span></span><br><span class="line">            String[]ssls = &#123;&#125;;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String hostname, SSLSession session)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (TextUtils.isEmpty(hostname)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> !Arrays.asList(ssls).contains(hostname);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">OkHttpClient</span> <span class="variable">okHttpClient</span> <span class="operator">=</span> builder.connectTimeout(<span class="number">10</span>, TimeUnit.MINUTES).</span><br><span class="line">            writeTimeout(<span class="number">10</span>, TimeUnit.MINUTES).readTimeout(<span class="number">10</span>, TimeUnit.MINUTES).retryOnConnectionFailure(<span class="literal">true</span>).build();</span><br><span class="line">        <span class="keyword">return</span> okHttpClient;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将原来的</span></span><br><span class="line"><span class="type">OkHttpClient</span> <span class="variable">okHttpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line"><span class="comment">//替换为</span></span><br><span class="line"><span class="type">OkHttpClient</span> <span class="variable">okHttpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>().getUnsafeOkHttpClient();  <span class="comment">//Test为类名，若为静态方法直接类名.方法名调用即可</span></span><br></pre></td></tr></table></figure><p><em>注：代码来自互联网，稍做修改，侵告知</em></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> OkHttp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令[更新]</title>
      <link href="/2021/01/19/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/"/>
      <url>/2021/01/19/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>传送门：<a href="https://www.itze.cn/linux/468.html" title="CentOS 7 开启防火墙及开放指定端口">CentOS 7 开启防火墙及开放指定端口</a> 查看所有任务进程</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -aux</span><br></pre></td></tr></table></figure><p>查看某个进程是否在运行，java为例，可查看到PID</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -efgrep java</span><br></pre></td></tr></table></figure><p>查看所有正在运行的端口号</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -anltp</span><br></pre></td></tr></table></figure><p>查看某个端口号的应用是否在运行，可查看到该任务的PID</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -anltpgrep 8080</span><br></pre></td></tr></table></figure><p>结束掉某任务进程</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -9 pid号</span><br></pre></td></tr></table></figure><p>查看正在执行的任务进程占用资源情况</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><p>查看某个进程占用资源的情况</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top -p PID号</span><br></pre></td></tr></table></figure><p>查看磁盘容量的使用情况</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><p>查看当前路径下大文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">du -sh *</span><br></pre></td></tr></table></figure><p>查看指定路径下文件大小</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">du -h /root</span><br></pre></td></tr></table></figure><p>查看a.txt文件内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat a.txt</span><br></pre></td></tr></table></figure><p>带行号的查看a.txt文件内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat -n a.txt</span><br></pre></td></tr></table></figure><p>查看a.txt文件的最后20行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -n 20 a.txt</span><br></pre></td></tr></table></figure><p>查看开机已经启动的服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl list-unit-filesgrep enabled</span><br></pre></td></tr></table></figure><p>禁止开机启动某服务,以nginx为例</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl disable nginx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaGC垃圾回收机制</title>
      <link href="/2021/01/14/javagc%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/2021/01/14/javagc%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="如何确定垃圾回收"><a href="#如何确定垃圾回收" class="headerlink" title="如何确定垃圾回收"></a>如何确定垃圾回收</h3><h4 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h4><p>给使用的每个对象添加一个计数器，每次引用，计数器加1，失去引用，计数器减1，那么当计数器一段时间保持为0的时候，我们认为这个对象就可以被回收 缺点：当两个对象相互引用的时候，由于是两个对象彼此相互引用，已经没有其他引用存在，此时计数器都是1，但是并不会被回收</p><h4 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h4><p>程序把我们所有的引用关系看作一张图，从一个节点的GC ROOT开始分析引用，找到引用，然后继续寻找该引用节点的引用，直到找到所有的引用，那么没有被引用的节点，就是无用的节点</p><h5 id="目前Java中可作为GC-ROOT的对象"><a href="#目前Java中可作为GC-ROOT的对象" class="headerlink" title="目前Java中可作为GC ROOT的对象"></a>目前Java中可作为GC ROOT的对象</h5><ul><li>java虚拟机栈中的引用的对象</li><li>方法区中的类静态属性引用的对象。 （一般指被static修饰的对象，加载类的时候就加载到内存中）</li><li>方法区中的常量引用的对象</li><li>本地方法栈中的JNI（native方法）引用的对象</li></ul><h3 id="GC处理垃圾算法"><a href="#GC处理垃圾算法" class="headerlink" title="GC处理垃圾算法"></a>GC处理垃圾算法</h3><h4 id="标记-清除"><a href="#标记-清除" class="headerlink" title="标记-清除"></a>标记-清除</h4><p>分为标记和清除两个阶段处理内存中的对象，效率不高</p><h4 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h4><p>将可用内存按照容量分为大小相同的两块，使用的时候只使用其中一块区域，当该区域内存满了的时候，就将该块内容中活着的对象复制到另外一块容量区域，然后清理之前用过的那块内存空间，彼此交换两块内存区，完成垃圾收集</p><h4 id="标记-整理（标记-压缩）"><a href="#标记-整理（标记-压缩）" class="headerlink" title="标记-整理（标记-压缩）"></a>标记-整理（标记-压缩）</h4><p>在标记-清除的基础上进行优化，将活着的对象压缩到内存的一端，然后清理除该端边界之外的内存区域</p><h4 id="分区算法"><a href="#分区算法" class="headerlink" title="分区算法"></a>分区算法</h4><p>将整个内存空间分为N个连续不同的内存区域，每个单独使用，独立回收，小颗粒度控制</p><h3 id="GC算法优略评估"><a href="#GC算法优略评估" class="headerlink" title="GC算法优略评估"></a>GC算法优略评估</h3><p>吞度量（Throughput），吞吐量越大越好 停顿时间（pasue time），暂停时间越短越好</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈SpringBean生命周期</title>
      <link href="/2021/01/14/%E6%B5%85%E8%B0%88springbean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2021/01/14/%E6%B5%85%E8%B0%88springbean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="SpringBean生命周期"><a href="#SpringBean生命周期" class="headerlink" title="SpringBean生命周期"></a>SpringBean生命周期</h3><ul><li>SpringBean生命周期的四个阶段</li><li>实例化：createBeanInstance(beanName, mbd, args)</li><li>属性赋值：populateBean(beanName, mbd, instanceWrapper)</li><li>初始化：initializeBean(beanName, exposedObject, mbd)</li><li>销毁：如果 Bean 实现了 DisposableBean 接口，则 Spring 会调用 destory() 方法将 Spring 中的 Bean 销毁；如果在配置文件中通过 destory-method 属性指定了 Bean 的销毁方法，则 Spring 将调用该方法对 Bean 进行销毁。</li></ul><h3 id="doCreateBean方法源码"><a href="#doCreateBean方法源码" class="headerlink" title="doCreateBean方法源码"></a>doCreateBean方法源码</h3><p>在SpringBean源码中的doCreateBean方法中能有体现，该方法依次调用createBeanInstance、populateBean、initializeBean方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">doCreateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span> <span class="keyword">throws</span> BeanCreationException &#123;</span><br><span class="line">    <span class="type">BeanWrapper</span> <span class="variable">instanceWrapper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">        instanceWrapper = (BeanWrapper)<span class="built_in">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (instanceWrapper == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//实例化</span></span><br><span class="line">        instanceWrapper = <span class="built_in">this</span>.createBeanInstance(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> instanceWrapper.getWrappedInstance();</span><br><span class="line">    Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class="line">    <span class="keyword">if</span> (beanType != NullBean.class) &#123;</span><br><span class="line">        mbd.resolvedTargetType = beanType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span>(mbd.postProcessingLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var17) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName, <span class="string">&quot;Post-processing of merged bean definition failed&quot;</span>, var17);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mbd.postProcessed = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">earlySingletonExposure</span> <span class="operator">=</span> mbd.isSingleton() &amp;&amp; <span class="built_in">this</span>.allowCircularReferences &amp;&amp; <span class="built_in">this</span>.isSingletonCurrentlyInCreation(beanName);</span><br><span class="line">    <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logger.trace(<span class="string">&quot;Eagerly caching bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; to allow for resolving potential circular references&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.addSingletonFactory(beanName, () -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getEarlyBeanReference(beanName, mbd, bean);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">exposedObject</span> <span class="operator">=</span> bean;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//属性赋值</span></span><br><span class="line">        <span class="built_in">this</span>.populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        exposedObject = <span class="built_in">this</span>.initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable var18) &#123;</span><br><span class="line">        <span class="keyword">if</span> (var18 <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException)var18).getBeanName())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (BeanCreationException)var18;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName, <span class="string">&quot;Initialization of bean failed&quot;</span>, var18);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">earlySingletonReference</span> <span class="operator">=</span> <span class="built_in">this</span>.getSingleton(beanName, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (earlySingletonReference != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">                exposedObject = earlySingletonReference;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; <span class="built_in">this</span>.hasDependentBean(beanName)) &#123;</span><br><span class="line">                String[] dependentBeans = <span class="built_in">this</span>.getDependentBeans(beanName);</span><br><span class="line">                Set&lt;String&gt; actualDependentBeans = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>(dependentBeans.length);</span><br><span class="line">                String[] var12 = dependentBeans;</span><br><span class="line">                <span class="type">int</span> <span class="variable">var13</span> <span class="operator">=</span> dependentBeans.length;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var14</span> <span class="operator">=</span> <span class="number">0</span>; var14 &lt; var13; ++var14) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">dependentBean</span> <span class="operator">=</span> var12[var14];</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">this</span>.removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                        actualDependentBeans.add(dependentBean);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCurrentlyInCreationException</span>(beanName, <span class="string">&quot;Bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; has been injected into other beans [&quot;</span> + StringUtils.collectionToCommaDelimitedString(actualDependentBeans) + <span class="string">&quot;] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using &#x27;getBeanNamesOfType&#x27; with the &#x27;allowEagerInit&#x27; flag turned off, for example.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">        <span class="keyword">return</span> exposedObject;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BeanDefinitionValidationException var16) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName, <span class="string">&quot;Invalid destruction signature&quot;</span>, var16);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>doCreateBean方法位于SpringBean源码的AbstractAutowireCapableBeanFactory方法中，具体位置如下，有兴趣的可以进行更深一步了解</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装RabbitMQ</title>
      <link href="/2021/01/11/centos%E5%AE%89%E8%A3%85rabbitmq/"/>
      <url>/2021/01/11/centos%E5%AE%89%E8%A3%85rabbitmq/</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>操作系统：CentOS 7</li></ul><h3 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h3><ul><li>RabbitMQ基于Erlang开发，所以需要安装Erlang环境</li><li>Erlang官方下载地址：<a href="https://www.erlang.org/downloads" title="https://www.erlang.org/downloads">https://www.erlang.org/downloads</a></li><li>RabbitMQ官方下载地址：<a href="https://www.rabbitmq.com/download.html" title="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a></li><li>下载可能会比较慢，提供一个分享链接包含Erlang和RabbitMQ</li><li>链接：<a href="https://pan.baidu.com/s/1Tmv7b0Dm8SRRF-cfYogzkw" title="https://pan.baidu.com/s/1Tmv7b0Dm8SRRF-cfYogzkw">https://pan.baidu.com/s/1Tmv7b0Dm8SRRF-cfYogzkw</a></li><li>提取码：itze</li><li>下载完之后上传至Linux服务器</li></ul><h3 id="Erlang安装"><a href="#Erlang安装" class="headerlink" title="Erlang安装"></a>Erlang安装</h3><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc glibc-devel make ncurses-devel openssl-devel xmlto perl wget gtk2-devel binutils-devel</span><br></pre></td></tr></table></figure><p>wget方式下载，下载可能会比较慢，可用上面提供的分享链接，版本相同和这个相同</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://erlang.org/download/otp_src_22.0.tar.gz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf otp_src_22.0.tar.gz</span><br></pre></td></tr></table></figure><p>移动文件，这个貌似和它默认的安装位置有关系</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv otp_src_22.0 /usr/local/</span><br></pre></td></tr></table></figure><p>切换目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/otp_src_22.0/</span><br></pre></td></tr></table></figure><p>创建文件夹</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ../Erlang</span><br></pre></td></tr></table></figure><p>配置安装目录，如果出现配置警告不要管</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/Erlang</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><p>添加环境变量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;export PATH=$PATH:/usr/local/Erlang/bin&#x27; &gt;&gt; /etc/profile</span><br></pre></td></tr></table></figure><p>刷新环境变量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="验证Erlang"><a href="#验证Erlang" class="headerlink" title="验证Erlang"></a>验证Erlang</h4><p>出现版本号即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">erl -version</span><br></pre></td></tr></table></figure><h3 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h3><p>wget方式下载，下载会比较慢，建议使用上面分享链接下载后上传至服务器方式</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.7.15/rabbitmq-server-generic-unix-3.7.15.tar.xz</span><br></pre></td></tr></table></figure><p>安装XZ工具</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y xz</span><br></pre></td></tr></table></figure><p>解压，注意此时应切换至压缩包目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/bin/xz -d rabbitmq-server-generic-unix-3.7.15.tar.xz</span><br></pre></td></tr></table></figure><p>再次解压</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf rabbitmq-server-generic-unix-3.7.15.tar</span><br></pre></td></tr></table></figure><p>迁移目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv rabbitmq_server-3.7.15/ /usr/local/</span><br></pre></td></tr></table></figure><p>重命名</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /usr/local/rabbitmq_server-3.7.15  Rabbitmq</span><br></pre></td></tr></table></figure><p>添加环境变量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;export PATH=$PATH:/usr/local/Rabbitmq/sbin&#x27; &gt;&gt; /etc/profile</span><br></pre></td></tr></table></figure><p>刷新环境变量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>创建配置文件目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /etc/rabbitmq</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmq-server -detached</span><br></pre></td></tr></table></figure><p>挂后台启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup rabbitmq-server -detached &amp;</span><br></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl status</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl stop</span><br></pre></td></tr></table></figure><p>添加web插件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><p>端口开放，如果你开了防火墙，请放行5672和15672端口，具体防火墙操作看这篇文章：<a href="https://www.itze.cn/linux/468.html" title="CentOS 7 开启防火墙及开放指定端口">CentOS 7 开启防火墙及开放指定端口</a></p><h4 id="RabbitMQ页面访问"><a href="#RabbitMQ页面访问" class="headerlink" title="RabbitMQ页面访问"></a>RabbitMQ页面访问</h4><ul><li>安装完成默认开启账户密码都是guest，但是这账户只能安装RabbitMQ的那台机器登陆，建议删除该账户，添加新账户</li><li>访问地址：<a href="http://192.168.6.73:15672/">http://192.168.06.73:15672</a> 这的里IP就是安装RabbitMQ那台机器服务器IP地址</li></ul><h4 id="RabbitMQ账户管理"><a href="#RabbitMQ账户管理" class="headerlink" title="RabbitMQ账户管理"></a>RabbitMQ账户管理</h4><p>查看所有账户</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl list_users</span><br></pre></td></tr></table></figure><p>添加账户</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl add_user admin 123456</span><br></pre></td></tr></table></figure><p>配置权限</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_permissions -p &quot;/&quot; admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure><p>查看账户权限</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl list_user_permissions admin</span><br></pre></td></tr></table></figure><p>设置tags标签,也就是用户组</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure><p>删除guest默认账户</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl delete_user guest</span><br></pre></td></tr></table></figure><p><em>注：本文章有参考网络反馈成功率较高的文章，侵告知</em></p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新一代构建工具Gradle的安装（Window/Linux）</title>
      <link href="/2021/01/07/%E6%96%B0%E4%B8%80%E4%BB%A3%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7gradle%E7%9A%84%E5%AE%89%E8%A3%85%EF%BC%88window-linux%EF%BC%89/"/>
      <url>/2021/01/07/%E6%96%B0%E4%B8%80%E4%BB%A3%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7gradle%E7%9A%84%E5%AE%89%E8%A3%85%EF%BC%88window-linux%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="Windows环境"><a href="#Windows环境" class="headerlink" title="Windows环境"></a>Windows环境</h3><ul><li>操作系统：Window 10</li><li>Java Version：1.8</li></ul><h3 id="Linxu环境"><a href="#Linxu环境" class="headerlink" title="Linxu环境"></a>Linxu环境</h3><ul><li>操作系统：CentOS 7</li><li>Java Version：1.8</li></ul><h3 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h3><ul><li>安装使用Gradle之前需要提前安装JDK环境</li><li>Linux安装JDK看这篇文章：<a href="https://www.itze.cn/java/504.html" title="Linux安装jdk环境">Linux安装jdk环境</a></li><li>windows自行百度</li></ul><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>Gradle官方下载地址：<a href="https://gradle.org/next-steps/?version=6.7.1&format=bin" title="Gradle-6.7.1-bin">Gradle-6.7.1-bin</a></p><h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h3><p>将下载的Gradle安装包解压出来，解压位置可以是任意位置，尽量避免出现中文路径，然后配置环境变量，我的电脑右键属性-高级系统设置-环境变量-系统变量- 新建如图 <img src="https://www.itze.cn/wp-content/uploads/2021/01/gradle_win%E5%8F%98%E9%87%8F.png"> 在系统变量中Path中添加如下图，然后验证 <img src="https://www.itze.cn/wp-content/uploads/2021/01/gradle%E5%AE%89%E8%A3%85.png"></p><h4 id="Windows验证"><a href="#Windows验证" class="headerlink" title="Windows验证"></a>Windows验证</h4><p><img src="https://www.itze.cn/wp-content/uploads/2021/01/gradle_win.png"></p><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><p>将下载的Gradle安装包上传至Linux服务器解压 解压命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip gradle-6.7.1-bin.zip</span><br></pre></td></tr></table></figure><p>添加环境变量，</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>在最后面添加一行,把后面的改成你的解压路径，注意要到bin及目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:/Gradle/gradle-6.7.1/bin</span><br></pre></td></tr></table></figure><h4 id="Linux验证"><a href="#Linux验证" class="headerlink" title="Linux验证"></a>Linux验证</h4><p><img src="https://www.itze.cn/wp-content/uploads/2021/01/gradle_linux.png"></p>]]></content>
      
      
      <categories>
          
          <category> Gradle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Gradle </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker配置Redis持久化</title>
      <link href="/2021/01/04/docker%E9%85%8D%E7%BD%AEredis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2021/01/04/docker%E9%85%8D%E7%BD%AEredis%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>使用Docker拉取的Redis，从docker中启动redis容器，默认是没有配置文件的</p><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><ul><li>RDB：按照一定的时间间隔定时以快照的形式保存，也可主动触发</li><li>AOF：以记录日志的方式进行保存</li><li>Redis持久化方式，目前有RDB和AOF，默认的是RDB，具体每种的保存&#x2F;实现&#x2F;触发机制，以及优缺点，自行百度，这里只介绍如何使用Docker方式启动Redis配置持久化，docker安装redis看这篇文章：<a href="https://www.itze.cn/linux/528.html" title="Docker安装Redis">Docker安装Redis</a></li></ul><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li>去官网下载Reids中redis.conf的配置文件，总之想办法找一份redis.conf的配置文件</li><li>创建文件夹&#x2F;root&#x2F;redis和&#x2F;root&#x2F;redis&#x2F;data用来存放数据，可以是其他位置</li><li>&#x2F;data和&#x2F;etc&#x2F;redis这两个目录最好也自己手动创建</li></ol><h4 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h4><p>注释掉bind，不然只能安装Redis本机访问</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">bind</span> 127.0.0.1</span></span><br></pre></td></tr></table></figure><p>开启AOF持久化</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><p>写入机制</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">每次有修改就立刻写入</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">appendfsync always</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">每秒钟写入一次（推荐该方式）</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">让Redis自动判断</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">appendfsync no</span></span><br></pre></td></tr></table></figure><p>保存文件的名字，默认即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br></pre></td></tr></table></figure><p>保存数据的位置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当前目录，可选择其他目录</span></span><br><span class="line">dir ./</span><br></pre></td></tr></table></figure><p>配置连接密码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">requirepass pwd123456</span><br></pre></td></tr></table></figure><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --restart=always -p 6379:6379 --name docker_redis -v /root/redis/redis.conf:/etc/redis/redis.conf -v /root/redis/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes</span><br></pre></td></tr></table></figure><ul><li>run：运行</li><li>–restart&#x3D;always：当docker重启时，该容器也会重新启动</li><li>-d redis：后台运行redis镜像</li><li>-p：映射端口号，容器内部和服务器内部关联</li><li>--appendonly yes：持久化</li><li>–name docker_redis：启动一个redis并设置docker容器名称为docker_redis</li><li>-v &#x2F;root&#x2F;redis&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf：将服务器中redis.conf文件映射到docker中</li><li>-v &#x2F;root&#x2F;redis&#x2F;data:&#x2F;data：同上</li><li>redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf：以加载配置文件方式启动</li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>运行过之后，重启Redis服务，将会在&#x2F;root&#x2F;redis&#x2F;data文件夹中生成保存的文件 <img src="https://www.itze.cn/wp-content/uploads/2021/01/redis.png"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis相关特性-多数据库及key常用操作</title>
      <link href="/2020/12/31/redis%E7%9B%B8%E5%85%B3%E7%89%B9%E6%80%A7-%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8Akey%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/12/31/redis%E7%9B%B8%E5%85%B3%E7%89%B9%E6%80%A7-%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8Akey%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis多数据库特性"><a href="#Redis多数据库特性" class="headerlink" title="Redis多数据库特性"></a>Redis多数据库特性</h3><p>一个Redis最多可连接16个数据库，下标从0-15，默认连接的是下标0 号数据库</p><h3 id="Demo代码"><a href="#Demo代码" class="headerlink" title="Demo代码"></a>Demo代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisKeyDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Jedis连接池连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedisByPool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">jedisPoolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        <span class="comment">//设置最大连接数</span></span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//设置最大空闲数</span></span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//获取连接池</span></span><br><span class="line">        <span class="type">JedisPool</span> <span class="variable">jedisPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPool</span>(jedisPoolConfig, <span class="string">&quot;192.168.06.37&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Redis key常用操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">keysMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> RedisKeyDemo.getJedisByPool();</span><br><span class="line">        jedis.keys(<span class="string">&quot;*&quot;</span>);<span class="comment">//查看所有key</span></span><br><span class="line">        jedis.keys(<span class="string">&quot;set?&quot;</span>);<span class="comment">//查看所有以set开头的key，eg:sete/set1</span></span><br><span class="line">        jedis.del(<span class="string">&quot;set1&quot;</span>,<span class="string">&quot;aw&quot;</span>);<span class="comment">//删除指定key</span></span><br><span class="line">        jedis.exists(<span class="string">&quot;set1&quot;</span>);<span class="comment">//判断指定key是否存在</span></span><br><span class="line">        jedis.rename(<span class="string">&quot;oldKeyName&quot;</span>,<span class="string">&quot;newKeyName&quot;</span>);<span class="comment">//重命名key名字</span></span><br><span class="line">        jedis.expire(<span class="string">&quot;set1&quot;</span>,<span class="number">10</span>);<span class="comment">//设置key值过期事件，单位秒</span></span><br><span class="line">        jedis.ttl(<span class="string">&quot;set1&quot;</span>);<span class="comment">//查看key值有效期剩余时间，没有设置则返回-1</span></span><br><span class="line">        jedis.type(<span class="string">&quot;set1&quot;</span>);<span class="comment">//获取指定key的类型</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Redis相关特性</span></span><br><span class="line"><span class="comment">     * 多数据库</span></span><br><span class="line"><span class="comment">     * 一个Redis最多可连接16个数据库，下标从0-15</span></span><br><span class="line"><span class="comment">     * 默认连接的是下标0 号数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dataBase</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> RedisKeyDemo.getJedisByPool();</span><br><span class="line">        jedis.select(<span class="number">1</span>);<span class="comment">//切换数据库，选取1号数据库，默认0号数据库</span></span><br><span class="line">        jedis.move(<span class="string">&quot;hello&quot;</span>,<span class="number">1</span>);<span class="comment">//将key值hello移到1号数据库</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 事物相关操作</span></span><br><span class="line"><span class="comment">         * multi:开启一个事物</span></span><br><span class="line"><span class="comment">         * 在此之后的命令都将被放到队列当中直到exec的执行</span></span><br><span class="line"><span class="comment">         * exec:提交</span></span><br><span class="line"><span class="comment">         * discard：回滚</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        jedis.set(<span class="string">&quot;sw&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">multi</span> <span class="operator">=</span> jedis.multi();<span class="comment">//开启事物</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * sw增加1，注意，这里只是放入队列</span></span><br><span class="line"><span class="comment">         * 此时如果去连接Reids，get sw这个key，返回结果仍是1，</span></span><br><span class="line"><span class="comment">         * 应为当前事物并没有提交</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        jedis.incr(<span class="string">&quot;sw&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 提交事物</span></span><br><span class="line"><span class="comment">         * 执行过exec之后再去连接Redis，get sw，返回结果才是2</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        multi.exec();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * *************************************************</span></span><br><span class="line"><span class="comment">         * 回滚操作</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        jedis.set(<span class="string">&quot;a1&quot;</span>,<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">multi1</span> <span class="operator">=</span> jedis.multi();<span class="comment">//开启事物</span></span><br><span class="line">        jedis.set(<span class="string">&quot;a1&quot;</span>,<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 正常情况这里提交事物之后a1将变为tom</span></span><br><span class="line"><span class="comment">         * 执行回滚操作，之后get a1 仍为jack</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        multi.discard();<span class="comment">//回滚</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基本数据结构类型及方法</title>
      <link href="/2020/12/25/redis%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2020/12/25/redis%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis基本数据结构类型"><a href="#Redis基本数据结构类型" class="headerlink" title="Redis基本数据结构类型"></a>Redis基本数据结构类型</h3><ul><li>string</li><li>hash</li><li>list</li><li>set</li><li>zset</li></ul><h4 id="Demo代码"><a href="#Demo代码" class="headerlink" title="Demo代码"></a>Demo代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.ListPosition;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Jedis连接池连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedisByPool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">jedisPoolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        <span class="comment">//设置最大连接数</span></span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//设置最大空闲数</span></span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//获取连接池</span></span><br><span class="line">        <span class="type">JedisPool</span> <span class="variable">jedisPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPool</span>(jedisPoolConfig, <span class="string">&quot;192.168.06.37&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Redis数据结构-String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">redisStringType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> RedisDemo.getJedisByPool();</span><br><span class="line">        jedis.set(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;123&quot;</span>);<span class="comment">//设置字符串类型key,value</span></span><br><span class="line">        jedis.get(<span class="string">&quot;test&quot;</span>);<span class="comment">//获取字符串类型value</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 以下有关增减的只对value数字类的有用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        jedis.incr(<span class="string">&quot;test&quot;</span>);<span class="comment">//将key值为：test的value值加1</span></span><br><span class="line">        jedis.decr(<span class="string">&quot;test&quot;</span>);<span class="comment">//将key值为：test的value值减1</span></span><br><span class="line">        jedis.incrBy(<span class="string">&quot;test&quot;</span>, <span class="number">10</span>);<span class="comment">//将key值为：test的value值加10</span></span><br><span class="line">        jedis.decrBy(<span class="string">&quot;test&quot;</span>, <span class="number">5</span>);<span class="comment">//将key值为：test的value值加5</span></span><br><span class="line">        jedis.append(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;hello&quot;</span>);<span class="comment">//在key值为：test的value值后面拼接：hello</span></span><br><span class="line">        jedis.exists(<span class="string">&quot;test&quot;</span>);<span class="comment">//判断test的key值是否</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Redis数据结构-Hash</span></span><br><span class="line"><span class="comment">     * 存储形式为：key value,其中value为键值对形式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">redisHashType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> RedisDemo.getJedisByPool();</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;sex&quot;</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;user&quot;</span>, map);<span class="comment">//可以直接存入map</span></span><br><span class="line">        jedis.hset(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line">        jedis.hget(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>);<span class="comment">//获取user中name键值对</span></span><br><span class="line">        jedis.hgetAll(<span class="string">&quot;user&quot;</span>);<span class="comment">//获取user中所有的键值对信息</span></span><br><span class="line">        jedis.hincrBy(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="number">2</span>);<span class="comment">//将age加2</span></span><br><span class="line">        jedis.hkeys(<span class="string">&quot;user&quot;</span>);<span class="comment">//查看user中所有的key值，name/sex/age</span></span><br><span class="line">        jedis.hvals(<span class="string">&quot;user&quot;</span>);<span class="comment">//查看user中所有的value值，xiaoming...</span></span><br><span class="line">        jedis.hlen(<span class="string">&quot;user&quot;</span>);<span class="comment">//获取user中键值对的个数</span></span><br><span class="line">        jedis.hdel(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;age&quot;</span>);<span class="comment">//删除age键值对</span></span><br><span class="line">        jedis.hexists(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;age&quot;</span>);<span class="comment">//判断user中是否存在key值为age的键值对</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Redis数据结构-List</span></span><br><span class="line"><span class="comment">     * 双向链表结构,从链表的两头插入、删除元素会比较高效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">redisListType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> RedisDemo.getJedisByPool();</span><br><span class="line">        jedis.lpush(<span class="string">&quot;list1&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);<span class="comment">//将a/b/c从左侧(链表的前)压入list1中</span></span><br><span class="line">        jedis.rpush(<span class="string">&quot;list2&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);<span class="comment">//将a/b/c从右侧(链表的后)压入list2中</span></span><br><span class="line">        jedis.lset(<span class="string">&quot;list1&quot;</span>, <span class="number">1</span>, <span class="string">&quot;123&quot;</span>);<span class="comment">//将下标1的b更改为123</span></span><br><span class="line">        jedis.lrange(<span class="string">&quot;list&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);<span class="comment">//查看list中元素，-1代表最后一个</span></span><br><span class="line">        jedis.linsert(<span class="string">&quot;list&quot;</span>, ListPosition.BEFORE, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;x&quot;</span>);<span class="comment">//在元素a的前面插入x</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * lrem</span></span><br><span class="line"><span class="comment">         * key：list</span></span><br><span class="line"><span class="comment">         * count:2,代表从前向后遍历删除前两个a元素</span></span><br><span class="line"><span class="comment">         * count:0,代表删除list中所有a元素</span></span><br><span class="line"><span class="comment">         * count:-1,代表从后往前遍历删除，从后往前数，第一个a元素</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        jedis.lrem(<span class="string">&quot;list1&quot;</span>, <span class="number">2</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        jedis.llen(<span class="string">&quot;list1&quot;</span>);<span class="comment">//查看list中元素个数</span></span><br><span class="line">        jedis.lpop(<span class="string">&quot;list1&quot;</span>);<span class="comment">//将第一个元素弹出来，弹出之后list1中将不存在该元素</span></span><br><span class="line">        jedis.lpushx(<span class="string">&quot;list1&quot;</span>, <span class="string">&quot;w&quot;</span>);<span class="comment">//仅当list1存在时在头部插入w</span></span><br><span class="line">        jedis.rpoplpush(<span class="string">&quot;lsit1&quot;</span>, <span class="string">&quot;list2&quot;</span>);<span class="comment">//将lsit1的尾部最后一个元素弹出，并压入list2的头部第一个位置</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Redis数据结构-Set</span></span><br><span class="line"><span class="comment">     * 不允许元素重复</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">redisSetType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> RedisDemo.getJedisByPool();</span><br><span class="line">        jedis.sadd(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>);<span class="comment">//添加一个set集合</span></span><br><span class="line">        jedis.sadd(<span class="string">&quot;set2&quot;</span>, <span class="string">&quot;12&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>);<span class="comment">//添加一个set集合</span></span><br><span class="line">        jedis.srem(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;123&quot;</span>);<span class="comment">//删除set1集合中的123元素</span></span><br><span class="line">        jedis.sismember(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;123&quot;</span>);<span class="comment">//判断set1集合中123元素是否存在</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 差集运算</span></span><br><span class="line"><span class="comment">         * 比较两个集合中的差集，和kyes放置的顺序有关系</span></span><br><span class="line"><span class="comment">         * set1:1,2,3/set2:2,3,4,5</span></span><br><span class="line"><span class="comment">         * eg：jesit.sdiff(&quot;set1&quot;,&quot;set2&quot;)</span></span><br><span class="line"><span class="comment">         * 结果：1</span></span><br><span class="line"><span class="comment">         * 会返回set1中哪些元素是set2集合中没有的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        jedis.sdiff(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>);<span class="comment">//差集运算</span></span><br><span class="line">        jedis.sdiffstore(<span class="string">&quot;set3&quot;</span>, <span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>);<span class="comment">//将set1集合和set2集合,差集存到set3集合中</span></span><br><span class="line">        jedis.sinter(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>);<span class="comment">//交集运算，返回两集合中共有的元素</span></span><br><span class="line">        jedis.sinterstore(<span class="string">&quot;set4&quot;</span>, <span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>);<span class="comment">//将set1和set2共有的元素存入set4集合中</span></span><br><span class="line">        jedis.sunion(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>);<span class="comment">//并集运算，返回两个集合所有的元素，set集合会自动去重</span></span><br><span class="line">        jedis.sunionstore(<span class="string">&quot;set5&quot;</span>, <span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>);<span class="comment">//将set1和set2集合中所有元素，存入set5集合</span></span><br><span class="line">        jedis.smembers(<span class="string">&quot;set1&quot;</span>);<span class="comment">//查看set1集合中有哪些元素</span></span><br><span class="line">        jedis.scard(<span class="string">&quot;set1&quot;</span>);<span class="comment">//返回set1集合中元素数量</span></span><br><span class="line">        jedis.srandmember(<span class="string">&quot;set1&quot;</span>);<span class="comment">//随机返回set1集合中的一个元素</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Redis数据结构 sorted-Set</span></span><br><span class="line"><span class="comment">     * 不允许元素重复</span></span><br><span class="line"><span class="comment">     * 每个元素都有一个分数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sortedSetType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> RedisDemo.getJedisByPool();</span><br><span class="line">        Map&lt;String, Double&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;ls&quot;</span>, <span class="number">100.0</span>);</span><br><span class="line">        map.put(<span class="string">&quot;ww&quot;</span>, <span class="number">99.0</span>);</span><br><span class="line">        map.put(<span class="string">&quot;w2&quot;</span>, <span class="number">50.0</span>);</span><br><span class="line">        map.put(<span class="string">&quot;w1&quot;</span>, <span class="number">69.0</span>);</span><br><span class="line">        map.put(<span class="string">&quot;w3&quot;</span>, <span class="number">64.0</span>);</span><br><span class="line">        jedis.zadd(<span class="string">&quot;sortedSet1&quot;</span>, <span class="number">80</span>, <span class="string">&quot;zs&quot;</span>);<span class="comment">//添加元素，返回新添加元素的个数，注意是新添加成功的</span></span><br><span class="line">        jedis.zadd(<span class="string">&quot;sortedSet1&quot;</span>, <span class="number">100</span>, <span class="string">&quot;zs&quot;</span>);<span class="comment">//如果再次添加zs的分值数将会更新成100</span></span><br><span class="line">        jedis.zadd(<span class="string">&quot;sortedSet1&quot;</span>, map);<span class="comment">//添加元素，支持map键值对形式</span></span><br><span class="line">        jedis.zscore(<span class="string">&quot;sortedSet1&quot;</span>, <span class="string">&quot;zs&quot;</span>);<span class="comment">//获取sortedSet1集合中zs的分数，返回结果100</span></span><br><span class="line">        jedis.zcard(<span class="string">&quot;sortedSet1&quot;</span>);<span class="comment">//获取sortedSet1集合成员的数量</span></span><br><span class="line">        jedis.zrem(<span class="string">&quot;sortedSet1&quot;</span>, <span class="string">&quot;zs&quot;</span>);<span class="comment">//删除sortedSet1集合中zs元素</span></span><br><span class="line">        jedis.zrange(<span class="string">&quot;sortedSet1&quot;</span>,<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//查询范围，返回下标0-1也就是前2个元素</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查询范围并按照分数值从小到大排列，</span></span><br><span class="line"><span class="comment">         * 返回结果Set&lt;Tuple&gt;，</span></span><br><span class="line"><span class="comment">         * 遍历得到Tuple类型，</span></span><br><span class="line"><span class="comment">         * getScore：分数值，</span></span><br><span class="line"><span class="comment">         * getElement:元素名</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        jedis.zrangeWithScores(<span class="string">&quot;sortedSet1&quot;</span>,<span class="number">0</span>,-<span class="number">1</span>);<span class="comment">//-1即最后一个元素，按照分数值从小大到</span></span><br><span class="line">        jedis.zrevrangeWithScores(<span class="string">&quot;sortedSet1&quot;</span>,<span class="number">0</span>,-<span class="number">1</span>);<span class="comment">//按照分数值从大到小</span></span><br><span class="line">        jedis.zrangeByScore(<span class="string">&quot;sortedSet1&quot;</span>,<span class="number">60.0</span>,<span class="number">99.0</span>);<span class="comment">//按照分数值范围查找元素名，eg:60.0最小值，99.0最大值，包含边界</span></span><br><span class="line">        jedis.zremrangeByRank(<span class="string">&quot;sortedSet1&quot;</span>,<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//按照范围删除，即删除下标0-1的前两个</span></span><br><span class="line">        jedis.zremrangeByScore(<span class="string">&quot;sortedSet1&quot;</span>,<span class="number">0</span>,<span class="number">60</span>);<span class="comment">//按照分数值范围删除，即删除大于等于0小于等于60的元素</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * zrangeByScoreWithScores</span></span><br><span class="line"><span class="comment">         * 按照分数值从小到大排序</span></span><br><span class="line"><span class="comment">         * 按照分数值范围20.0-90.0</span></span><br><span class="line"><span class="comment">         * 并且限制只要0,3 前3个元素，就如SQL中的limit效果一样</span></span><br><span class="line"><span class="comment">         * zrevrangeByScoreWithScores</span></span><br><span class="line"><span class="comment">         * 按照分数值从大到小排序</span></span><br><span class="line"><span class="comment">         * *********************************************************************</span></span><br><span class="line"><span class="comment">         * 注意：zrangeByScoreWithScores，从小到大的排列</span></span><br><span class="line"><span class="comment">         * key值sortedSet1后面第一个是最小分数值，第二个是最大分数值</span></span><br><span class="line"><span class="comment">         * zrevrangeByScoreWithScores，从大到小的排列</span></span><br><span class="line"><span class="comment">         * key值sortedSet1后面第一个是最大分数值，第二个是最小分数值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        jedis.zrangeByScoreWithScores(<span class="string">&quot;sortedSet1&quot;</span>,<span class="number">20.0</span>,<span class="number">90.0</span>,<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//从小到大</span></span><br><span class="line">        jedis.zrevrangeByScoreWithScores(<span class="string">&quot;sortedSet1&quot;</span>,<span class="number">90.0</span>,<span class="number">20.0</span>,<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//从大到小</span></span><br><span class="line">        jedis.zincrby(<span class="string">&quot;sortedSet1&quot;</span>,<span class="number">30.0</span>,<span class="string">&quot;w3&quot;</span>);<span class="comment">//增加指定元素分数值，eg：w3分数值在原有基础增加30</span></span><br><span class="line">        jedis.zcount(<span class="string">&quot;sortedSet1&quot;</span>,<span class="number">60.0</span>,<span class="number">100.0</span>);<span class="comment">//获取指定分数值范围元素的个数，eg:大于等于60小于等于100的元素个数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装Redis</title>
      <link href="/2020/12/24/docker%E5%AE%89%E8%A3%85redis/"/>
      <url>/2020/12/24/docker%E5%AE%89%E8%A3%85redis/</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>操作系统：CentOS 7</li><li>Docker版本：Docker version 19.03.1</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>docker有关常用命令可以查看这篇文章：<a href="https://www.itze.cn/docker/512.html" title="Docker常用命令[持续更新]">Docker常用命令[持续更新]</a> 拉取镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><p>查看拉取的镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><p>运行容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -itd --name docker_reids -p 6379:6379 redis</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>进入容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it docker_reids /bin/bash</span><br></pre></td></tr></table></figure><p>进入容器之后执行以下命令 <img src="https://www.itze.cn/wp-content/uploads/2020/12/redis.png"> docker安装东西大致都是这个流程</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令[更新]</title>
      <link href="/2020/12/14/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
      <url>/2020/12/14/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><strong>以下有关镜像操作，均已mysql为例</strong> 搜索镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><p>拉取镜像，默认最高版本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><p>拉取指定版本号的镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p>查看已经拉取的镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>删除镜像（需要先删除该镜像创建的容器）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rmi 镜像ID</span><br></pre></td></tr></table></figure><p>启动一个已经存在的容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器ID</span><br></pre></td></tr></table></figure><p>查看最近创建的容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -l</span><br></pre></td></tr></table></figure><p>查看创建的容器包括未启动的</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>停止正在运行的容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop 容器ID</span><br></pre></td></tr></table></figure><p>删除已经创建的容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器ID</span><br></pre></td></tr></table></figure><p>重启容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart 容器ID</span><br></pre></td></tr></table></figure><p>显示运行容器总文件大小</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -s</span><br></pre></td></tr></table></figure><p>进入容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器ID/容器名称 /bin/bash</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装Mysql</title>
      <link href="/2020/12/14/docker%E5%AE%89%E8%A3%85mysql/"/>
      <url>/2020/12/14/docker%E5%AE%89%E8%A3%85mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>操作系统：CentOS 7</li><li>Docker版本：20.10.0</li></ul><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>提前开放好mysql需要用到的端口号，有的还需要去服务器的控制中心添加放行端口号，CentOS 7有关开放端口号的操作可以看这篇文章：<a href="https://www.itze.cn/linux/468.html" title="CentOS 7 开启防火墙及开放指定端口">CentOS 7 开启防火墙及开放指定端口</a></p><h3 id="拉取镜像-默认拉取最高版本-目前应该是mysql-8"><a href="#拉取镜像-默认拉取最高版本-目前应该是mysql-8" class="headerlink" title="拉取镜像,默认拉取最高版本,目前应该是mysql 8"></a>拉取镜像,默认拉取最高版本,目前应该是mysql 8</h3><p>Docker常用的操作命令可以查看这篇文章：<a href="https://www.itze.cn/docker/512.html" title="Docker常用命令[持续更新]">Docker常用命令[持续更新]</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><h3 id="拉取指定版本"><a href="#拉取指定版本" class="headerlink" title="拉取指定版本"></a>拉取指定版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --restart=always -d -p 3306:3306 --privileged=true -v /docker/mysql/conf/my.cnf:/etc/my.cnf -v /docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name docker_mysql mysql</span><br></pre></td></tr></table></figure><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul><li>run：运行</li><li>--restart&#x3D;always：当docker重启时，该容器也会重新启动</li><li>-d：后台运行</li><li>-p：映射端口号，容器内部和服务器内部关联</li><li>--privileged&#x3D;true：设置允许root用户登陆</li><li>-v &#x2F;docker&#x2F;mysql&#x2F;conf&#x2F;my.cnf:&#x2F;etc&#x2F;my.cnf：将服务器中的my.cnf配置映射到docker中的&#x2F;docker&#x2F;mysql&#x2F;conf&#x2F;my.cnf配置</li><li>-v &#x2F;docker&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql：同上,映射数据库的数据目录, 避免以后docker删除重新运行MySQL容器时数据丢失</li><li>-e MYSQL_ROOT_PASSWORD&#x3D;123456：设置root账户密码为123456</li><li>--name docker_mysql mysql：启动一个mysql并设置docker容器名称为docker_mysql</li></ul><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it docker_mysql（docker容器名称） bash</span><br></pre></td></tr></table></figure><h3 id="连接mysql"><a href="#连接mysql" class="headerlink" title="连接mysql"></a>连接mysql</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>创建一个test账户密码为123456，并且允许远程登陆，如果想要test账户只能安装mysql的这台机器登陆，就把’%’改成’localhost’</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CREATE USER &#x27;test&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>授予test账户所有权限</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grant all on *.* to &#x27;test&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果安装的是mysql8,需要更改加密方式才能使用Navicat工具远程连接,所有需要远程连接的账户都要更改，如果不是mysql8，比如mysql5.7是不需要的</p><h4 id="更改加密方式"><a href="#更改加密方式" class="headerlink" title="更改加密方式"></a>更改加密方式</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;test&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27; PASSWORD EXPIRE NEVER;</span><br></pre></td></tr></table></figure><h4 id="更新密码"><a href="#更新密码" class="headerlink" title="更新密码"></a>更新密码</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;test&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><h4 id="刷新权限"><a href="#刷新权限" class="headerlink" title="刷新权限"></a>刷新权限</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h4 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit;</span><br></pre></td></tr></table></figure><p>执行两遍，第一次退出mysql，第二次退出docker容器</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Docker </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Matlab Runtime运行环境</title>
      <link href="/2020/12/14/linux%E5%AE%89%E8%A3%85matlab-runtime%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/"/>
      <url>/2020/12/14/linux%E5%AE%89%E8%A3%85matlab-runtime%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>下载压缩包，官方下载地址：<a href="https://ww2.mathworks.cn/products/compiler/matlab-runtime.html" title="https://ww2.mathworks.cn/products/compiler/matlab-runtime.html">https://ww2.mathworks.cn/products/compiler/matlab-runtime.html</a> 下载好之后将压缩包上传至服务器</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>解压</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip   你的压缩包名.zip</span><br></pre></td></tr></table></figure><p>官方静默安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./install -mode silent -agreeToLicense yes</span><br></pre></td></tr></table></figure><p>安装好之后最后会有一个LD_LIBRARY_PATH的路径，复制下来，添加到系统环境变量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>可以在末尾处添加</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export LD_LIBRARY_PATH=/usr/local/MATLAB/MATLAB_Runtime/#等于号后面改成你的安装后的路径</span><br></pre></td></tr></table></figure><p>刷新环境变量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MATLAB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装jdk环境</title>
      <link href="/2020/12/14/linux%E5%AE%89%E8%A3%85jdk%E7%8E%AF%E5%A2%83/"/>
      <url>/2020/12/14/linux%E5%AE%89%E8%A3%85jdk%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>提前下载好jdk压缩包，我的下载地址：链接：<a href="https://pan.baidu.com/s/1RJSJmWFnsKBhZvpBDidlSQ" title="https://pan.baidu.com/s/1RJSJmWFnsKBhZvpBDidlSQ">https://pan.baidu.com/s/1RJSJmWFnsKBhZvpBDidlSQ</a> 提取码：itze Oracle官方下载地址，需要登陆账户才能下载 <a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" title="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a> 下载好之后，将压缩包上传至服务器</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>解压下载上传到服务器的压缩包</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tar -xvf jdk-8u241-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>配置系统环境变量</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>在最下面添加以下内容</p><h3 id="重要"><a href="#重要" class="headerlink" title="重要!!!"></a>重要!!!</h3><p><strong>下面代码中所有带{}的前面复制之后加上，例如${JAVA_HOME}</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/root/Java/jdk1.8.0_241 #你的压缩包解压出来的路径</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure><p>刷新环境变量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2020/12/javaVersion.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Java </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装Docker</title>
      <link href="/2020/12/11/linux%E5%AE%89%E8%A3%85docker/"/>
      <url>/2020/12/11/linux%E5%AE%89%E8%A3%85docker/</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>操作系统：CentOS 7 内核版本：3.10.0-1062.12.1.el7.x86_64</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>使用命令uname -r查看系统内核版本，据说要3.10及以上</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><ol start="2"><li>更新yum源至最新</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><ol start="3"><li>安装软件包</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><ol start="4"><li>设置yum源</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ol start="5"><li>安装docker，默认安装最高版本</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install docker-ce</span><br></pre></td></tr></table></figure><ol start="6"><li>启动docker</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><ol start="7"><li>查看docker状态</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><ol start="8"><li>添加开机启动</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><ol start="9"><li>验证docker</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>出现版本号即安装成功 注：本篇文章有参考网络反馈成功率较高的文章</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRITICAL:yum.cli:Config Error: Error accessing file for config file:///etc/yum.conf</title>
      <link href="/2020/12/11/criticalyum-cliconfig-error-error-accessing-file-for-config-file-etc-yum-conf/"/>
      <url>/2020/12/11/criticalyum-cliconfig-error-error-accessing-file-for-config-file-etc-yum-conf/</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>操作系统：CentOS 7</li><li>Python版本：Python 2.7.5</li></ul><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>经两次测试，造成这个错误的原因，在操作系统上装完Matlab（版本：MATLAB_Runtime_R2019a）之后，使用任何有关yum的命令都会报：<strong>CRITICAL:yum.cli:Config Error: Error accessing file for config file:&#x2F;&#x2F;&#x2F;etc&#x2F;yum.conf</strong> 这个错</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>先说一下网络上出现的最多的一种办法，实际测试这种把法对我这种情况并没有用，运行到最后一步一样报同样的错误，或许对你们有用不妨可以先试试这种方法。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://yum.baseurl.org/download/3.2/yum-3.2.28.tar.gz</span><br><span class="line">tar xvf yum-3.2.28.tar.gz</span><br><span class="line">cd yum-3.2.28</span><br><span class="line">touch /etc/yum.conf</span><br><span class="line">./yummain.py install yum</span><br></pre></td></tr></table></figure><p>我最后解决的把法是，先把Matlab卸载，然后卸载重装yum</p><h4 id="卸载Matlab"><a href="#卸载Matlab" class="headerlink" title="卸载Matlab"></a>卸载Matlab</h4><p>直接删除该路径下的MATLAB文件夹即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /usr/local/MATLAB</span><br></pre></td></tr></table></figure><h4 id="卸载yum"><a href="#卸载yum" class="headerlink" title="卸载yum"></a>卸载yum</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qagrep yumxargs rpm -e --nodeps</span><br></pre></td></tr></table></figure><h3 id="下载yum包"><a href="#下载yum包" class="headerlink" title="下载yum包"></a>下载yum包</h3><p>yum下载地址：<a href="http://yum.baseurl.org/wiki/releases.html" title="http://yum.baseurl.org/wiki/releases.html">http://yum.baseurl.org/wiki/releases.html</a> <img src="https://www.itze.cn/wp-content/uploads/2020/12/yum.png"> 建议选择最新版的稳定版下载，下载完成之后上传至服务器，使用wget也可以，更方便一点 下面的步骤就和网络上流传的最多的方式很相似了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xvf yum-3.4.3.tar.gz</span><br><span class="line">cd yum-3.4.3</span><br><span class="line">touch /etc/yum.conf</span><br><span class="line">./yummain.py install yum</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>这个时候可能会报错，报一些Pyton有关的错误信息，我的Pyhon版本是Python 2.7.5， 报错如下：<strong>No module named sqlitecachec</strong> 解决办法执行安装命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh http://mirror.centos.org/centos/7/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm --force</span><br></pre></td></tr></table></figure><p>然后再次运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./yummain.py install yum</span><br></pre></td></tr></table></figure><p>最后说一下，这里yum的问题解决了，但是还是没有解决MatlabRuntime和yum共存的问题，后续有研究再做更新。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Matlab </tag>
            
            <tag> yum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-通过注解注入Bean的几种方式(二)</title>
      <link href="/2020/12/01/srping-%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E6%B3%A8%E5%85%A5bean%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E4%BA%8C/"/>
      <url>/2020/12/01/srping-%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E6%B3%A8%E5%85%A5bean%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h4 id="Spring通过注解注入Bean-这里记录一下注入List、Map、String类型的注入"><a href="#Spring通过注解注入Bean-这里记录一下注入List、Map、String类型的注入" class="headerlink" title="Spring通过注解注入Bean,这里记录一下注入List、Map、String类型的注入"></a>Spring通过注解注入Bean,这里记录一下注入List、Map、String类型的注入</h4><p>MyBean.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//List类型注入方式</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;testList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Map类型注入</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Integer&gt; initMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title function_">getInitMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> initMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;springMap&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInitMap</span><span class="params">(Map&lt;String, Integer&gt; initMap)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.initMap = initMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//简单数据类型</span></span><br><span class="line">    <span class="keyword">private</span> String string;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;111&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setString</span><span class="params">(String string)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.string = string;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上下文环境BeanConfig.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.example.demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果需要有List需要注入，Spring会有限考虑第二个String类型</span></span><br><span class="line"><span class="comment">     * 如果同时存在就是需要注入list需要添加BeanId</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">testList</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;List&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;类型&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;springMap&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title function_">initMap</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;aaa&quot;</span>, <span class="number">123</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;bbb&quot;</span>, <span class="number">456</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;ccc&quot;</span>, <span class="number">777</span>);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Order</span>注解类型int 不需要从下标0开始</span></span><br><span class="line"><span class="comment">     * 不需要连续</span></span><br><span class="line"><span class="comment">     * 值越小优先级越高</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(60)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">string1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(50)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">string2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;456&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Map类型使用</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">integer1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">888</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">integer2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">999</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试代码Test.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.demo.spring.BeanConfig;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.spring.MyBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/10/14 11:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取Spring上下文</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(BeanConfig.class);</span><br><span class="line">        <span class="type">MyBean</span> <span class="variable">myBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;myBean&quot;</span>, MyBean.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;myBean = &quot;</span> + myBean);</span><br><span class="line">        <span class="comment">//List类型</span></span><br><span class="line">        <span class="keyword">for</span> (String s : myBean.getList()) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Map类型</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : myBean.getInitMap().entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey());</span><br><span class="line">            System.out.println(<span class="string">&quot;value:&quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//String类型</span></span><br><span class="line">        System.out.println(myBean.getString());</span><br><span class="line">        <span class="comment">//内部接口</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">testList</span> <span class="operator">=</span> myBean.getContext().getBean(<span class="string">&quot;testList&quot;</span>, List.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;======================&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object o : testList) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出结果</span></span><br><span class="line"><span class="comment">         * myBean = com.example.demo.spring.MyBean@62da83ed</span></span><br><span class="line"><span class="comment">         * List</span></span><br><span class="line"><span class="comment">         * 类型</span></span><br><span class="line"><span class="comment">         * aaa</span></span><br><span class="line"><span class="comment">         * value:123</span></span><br><span class="line"><span class="comment">         * ccc</span></span><br><span class="line"><span class="comment">         * value:777</span></span><br><span class="line"><span class="comment">         * bbb</span></span><br><span class="line"><span class="comment">         * value:456</span></span><br><span class="line"><span class="comment">         * 111</span></span><br><span class="line"><span class="comment">         * ======================</span></span><br><span class="line"><span class="comment">         * List</span></span><br><span class="line"><span class="comment">         * 类型</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="注入List类型"><a href="#注入List类型" class="headerlink" title="注入List类型"></a>注入List类型</h4><ol><li>在MyBean.java中生成List的Set、Get方法，在Set方法上使用@Autowired注解，告诉Spring上下文环境中需要一个List类型的Bean</li><li>在BeanConfig.java上下文环境中生成List类型的Bean,即创建返回值为List的方法并在方法上方使用@Bean，将该方法交由Spring管理</li><li>在Test.java获取上下文环境后通过getList()方法获取注入的List&gt;&gt;遍历打印输出，List中元素的顺序即为添加时的顺序</li></ol><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>如果在BeanConfig.java上下文环境中同时存在List类型的Bean和与注入的List<String>泛型相同Bean（也就是返回结果为String类型的方法的Bean），Spring会优先考虑与注入List类型泛型相同的String类型的Bean，并且将该String类型的Bean的返回值放到List中，因而Test.java测试代码输出结果就是该String类型的Bean的返回值。</li><li>如果使用与泛型相同Bean注入，使用@Order控制顺序，@Order注解的值为int类型，值不需要约束从下标0开始，不需要连续，例如：@Order(10)、@Order(20)，@Order(10)注解下的值就会排在前面</li><li>如果需要BeanConfig.java上下文环境中需要同时存在上面两种情况，那么又想使用List类型的Bean，这个时候需要在MyBean.java注入时，指定Bean，需要使用@Qualifier(value &#x3D; “testList”),其中value值为Bean的ID，@Bean默认值为方法名，也可以指定，例如：@Bean(“itze”),那么使用这个Bean就是@Qualifier(value &#x3D; “itze”)</li></ul><h4 id="注入Map类型"><a href="#注入Map类型" class="headerlink" title="注入Map类型"></a>注入Map类型</h4><p>和注入List类型的大差不差 1. 在MyBean.java中生成Map的Set、Get方法，在Set方法上使用@Autowired注解，告诉Spring上下文环境中需要一个Map类型的Bean 2. 在BeanConfig.java上下文环境中生成Map类型的Bean,即创建返回值为Map的方法并在方法上方使用@Bean，将该方法交由Spring管理 3. 在Test.java获取上下文环境后通过getInitMap()方法获取注入的Map&gt;&gt;遍历打印输出</p><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><p>和List规则也是大差不差 - 如果BeanConfig.java上下文环境中同时存在Map类型的Bean和与注入Map&lt;String,Integer&gt;类型泛型value类型相同的Bean(也就是返回值为Integer类型的方法，在方法上加了@Bean注解)，Spring会优先考虑返回值与注入泛型中value类型相同的Bean，并将该Bean的ID作为Map的Key,该Bean的返回值作为Map的Value，因而Test.java测试代码输出Map遍历的结果就是该Integer类型方法名&gt;&gt;&gt;Key,返回值&gt;&gt;&gt;Value - 如果BeanConfig.java上下文环境中同时存在两种类型，又想使用Map类型的Bean，同样方法注入时使用@Qualifier(value &#x3D; “BeanID”)指定Bean的ID</p><h4 id="注入String类型"><a href="#注入String类型" class="headerlink" title="注入String类型"></a>注入String类型</h4><ol><li>同样在MyBean.java中生成String的Set、Get方法，在Set方法上使用@Value(“213”)注解</li><li>在Test.java测试代码中，获取上下文环境之后直接通过getString()获取”213”</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SVN仓库从Windows迁移至Linux(CentOS 7)</title>
      <link href="/2020/11/24/svn%E4%BB%93%E5%BA%93%E4%BB%8Ewindows%E8%BF%81%E7%A7%BB%E8%87%B3linuxcentos-7/"/>
      <url>/2020/11/24/svn%E4%BB%93%E5%BA%93%E4%BB%8Ewindows%E8%BF%81%E7%A7%BB%E8%87%B3linuxcentos-7/</url>
      
        <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><strong>SVN仓库需要从Windows 10操作系统整体迁移至Linux CentOS 7 操作系统</strong></p><h3 id="迁移准备"><a href="#迁移准备" class="headerlink" title="迁移准备"></a>迁移准备</h3><ul><li>需要先在Linux那台操作系统的服务器上安装SVN，具体安装教程看这篇文章：<a href="https://www.itze.cn/linux/460.html" title="Linux（CentOS 7）安装SVN详解">Linux（CentOS 7）安装SVN详解</a></li><li>安装完成以后新建一个新的仓库，仓库名最好和需要迁移的仓库名字对应</li></ul><h3 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h3><p><strong>Windows平台SVN管理使用的是VisualSVN，比如你的仓库路径位置：D:\svn\AProject,（AProject是项目仓库名称），利用svnadmin，Linux操作系统需要的是.dump结尾的文件不是用VisualSVN备份出来的.vsvn.bak结尾文件，下面开始操作命令</strong></p><h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">svnadmin dump AProject &gt; D:\AProject.dump</span><br></pre></td></tr></table></figure><p>D:\AProject.dump 的意思是新的文件导出到D盘下，文件名为AProject.dump 导出是时间和仓库大小有关，这样是所有Version版本号都会导出来，如果只需要导出指定版本</p><h4 id="导出指定版本号"><a href="#导出指定版本号" class="headerlink" title="导出指定版本号"></a>导出指定版本号</h4><p>导出Version版本号为20的所有AProject仓库下的文件，导出到D盘，命名为AProject.dump</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">svnadmin dump AProject -r 20 &gt; D:\AProject.dump</span><br></pre></td></tr></table></figure><p>导出Version版本号100-200之间的</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">svnadmin dump AProject -r 100:200 &gt; D:\AProject.dump</span><br></pre></td></tr></table></figure><p>导出完成之后把导出的AProject.dump上传到服务器</p><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><p>最好提前创建好一个和需要迁移的SVN库名字一样的仓库&#x2F;svn&#x2F;AProject ，AProject为Linux新建的仓库，这里模拟把之前导出的AProject.dump文件上传到了服务器&#x2F;svn下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">svnadmin load /svn/AProject &lt; /svn/AProject.dump</span><br></pre></td></tr></table></figure><p>到此位置算是SVN库迁移完毕，接下来就是配置账户和权限</p><h3 id="账户和权限"><a href="#账户和权限" class="headerlink" title="账户和权限"></a>账户和权限</h3><p>由于Windows操作系统上SVN使用VisualSVN本地密码存储为加密的密文，而Linux操作系统上SVN账户存储为明文，这里唯一麻烦的一点是需要将密文替换成明文</p><h4 id="Windows操作系统VisualSVN管理的账户存储位置"><a href="#Windows操作系统VisualSVN管理的账户存储位置" class="headerlink" title="Windows操作系统VisualSVN管理的账户存储位置"></a>Windows操作系统VisualSVN管理的账户存储位置</h4><ul><li>账户和密码在和项目仓库同级路径下文件名为：htpasswd，右键-打开方式可以用记事本，可以使用NotePad++</li><li>组管理信息在同级路径下文件名为：groups.conf,打开方式同上</li><li>权限分配文件位置，SVN仓库目录的下一级里面，如在：D:\AProject里面找到conf文件双击进入找到文件名为：VisualSVN-SvnAuthz.ini这个就是，如图修改 <img src="https://www.itze.cn/wp-content/uploads/2020/11/code.png"></li></ul><h3 id="配置新SVN仓库账户和权限"><a href="#配置新SVN仓库账户和权限" class="headerlink" title="配置新SVN仓库账户和权限"></a>配置新SVN仓库账户和权限</h3><p>把上面找到的账户和密码，还有权限文件，按照这篇文章里面的设置去修改成一样的即可<a href="https://www.itze.cn/linux/460.html" title="Linux（CentOS 7）安装SVN详解">Linux（CentOS 7）安装SVN详解</a> 最后配置完毕不要忘了重启SVN服务!</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SVN </tag>
            
            <tag> Windwos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux（CentOS 7）安装SVN详解</title>
      <link href="/2020/11/23/linux%EF%BC%88centos-7%EF%BC%89%E5%AE%89%E8%A3%85svn%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/11/23/linux%EF%BC%88centos-7%EF%BC%89%E5%AE%89%E8%A3%85svn%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ul><li>操作系统：Linux(CentOS 7)</li><li>需要提前开放3690端口，CentOS如何开放端口可以查看这篇文章：<a href="https://www.itze.cn/linux/468.html" title="CentOS 7 开启防火墙及开放指定端口">CentOS 7 开启防火墙及开放指定端口</a></li></ul><h3 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y subversion</span><br></pre></td></tr></table></figure><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p><strong>SVN安装完成之后默认的仓库路径是：&#x2F;var&#x2F;svn 通过命令</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/svnserve</span><br></pre></td></tr></table></figure><p><strong>修改位置：OPTIONS&#x3D;”-r &#x2F;var&#x2F;svn”，修改其中的&#x2F;var&#x2F;svn就可以了，默认即可！</strong></p><h3 id="仓库创建"><a href="#仓库创建" class="headerlink" title="仓库创建"></a>仓库创建</h3><p><strong>注意：这里如果上面的默认位置(&#x2F;var&#x2F;svn)没有更改，就把项目仓库创建到默认位置下面，如果修改了，就创建到你修改的路径下</strong></p><h4 id="创建示例"><a href="#创建示例" class="headerlink" title="创建示例"></a>创建示例</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /var/svn/svntest</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">svnadmin create /var/svn/svntest</span><br></pre></td></tr></table></figure><p><strong>执行完上面两个命令之后，查看一下，命令</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ll /var/svn/svntest</span><br></pre></td></tr></table></figure><p><strong>查看结果截图：</strong> <img src="https://www.itze.cn/wp-content/uploads/2020/11/svn.png"></p><h3 id="配置仓库用户及权限"><a href="#配置仓库用户及权限" class="headerlink" title="配置仓库用户及权限"></a>配置仓库用户及权限</h3><p><strong>当前位置：&#x2F;var&#x2F;svn&#x2F;svntest</strong></p><h4 id="配置账号"><a href="#配置账号" class="headerlink" title="配置账号"></a>配置账号</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim conf/passwd</span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2020/11/svnuser.png"> <strong>格式：用户名 &#x3D; 密码 ，用户名前面不能有空格！</strong></p><h4 id="配置权限"><a href="#配置权限" class="headerlink" title="配置权限"></a>配置权限</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim conf/authz</span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2020/11/svnauth.png"></p><h4 id="最后配置svnserve"><a href="#最后配置svnserve" class="headerlink" title="最后配置svnserve"></a>最后配置svnserve</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim conf/svnserve.conf</span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2020/11/svnauthz2-1.png"></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p><strong>启动</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start svnserve</span><br></pre></td></tr></table></figure><p><strong>查看状态</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status svnserve</span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2020/11/svnactive.png"> <strong>或者查看SVN默认端口3690是否在监听</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -anltpgrep 3690</span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2020/11/svnlisten.png"> <strong>添加开机启动</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable svnserve</span><br></pre></td></tr></table></figure><p><strong>查看所有开机启动项</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl list-unit-files</span><br></pre></td></tr></table></figure><p><strong>筛选查看-只查看启动的</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl list-unit-filesgrep enabled</span><br></pre></td></tr></table></figure><h3 id="连接SVN"><a href="#连接SVN" class="headerlink" title="连接SVN"></a>连接SVN</h3><p><strong>Windows使用</strong><a href="https://tortoisesvn.net/downloads.html" title="TortoiseSVN（点击去下载）">TortoiseSVN（点击去下载）</a> <strong>随便找个空文件夹空位置右键-SVN Checkout</strong> <img src="https://www.itze.cn/wp-content/uploads/2020/11/svncheckout.png"> <strong>svn地址输入：svn:&#x2F;&#x2F;ip&#x2F;项目仓库名 如：svn:&#x2F;&#x2F;127.0.0.1&#x2F;test</strong> <img src="https://www.itze.cn/wp-content/uploads/2020/11/svncheckout-1.png"> <img src="https://www.itze.cn/wp-content/uploads/2020/11/svnok.png"> <img src="https://www.itze.cn/wp-content/uploads/2020/11/username-1.png"> <img src="https://www.itze.cn/wp-content/uploads/2020/11/Finished.png"></p><h4 id="大功告成！"><a href="#大功告成！" class="headerlink" title="大功告成！"></a>大功告成！</h4>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SVN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 开启防火墙及开放指定端口</title>
      <link href="/2020/11/23/centos-7-%E5%BC%80%E5%90%AF%E9%98%B2%E7%81%AB%E5%A2%99%E5%8F%8A%E5%BC%80%E6%94%BE%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3/"/>
      <url>/2020/11/23/centos-7-%E5%BC%80%E5%90%AF%E9%98%B2%E7%81%AB%E5%A2%99%E5%8F%8A%E5%BC%80%E6%94%BE%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>查看防火墙状态</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><p>启动防火墙</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure><p>停止某项服务，这里举例停止防火墙</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p>查看防火墙已经开放的端口</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-port</span><br></pre></td></tr></table></figure><p>添加开放指定防火墙</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=这里是需要开启的端口号/tcp --permanent</span><br></pre></td></tr></table></figure><p>重新加载防火墙</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-通过注解注入Bean的几种方式（一）</title>
      <link href="/2020/11/19/srping-%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E6%B3%A8%E5%85%A5bean%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/11/19/srping-%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E6%B3%A8%E5%85%A5bean%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="用到的注解"><a href="#用到的注解" class="headerlink" title="用到的注解"></a>用到的注解</h3><ul><li>@Configuration ：定义配置类，代替了xml文件</li><li>@ComponentScan(value &#x3D; “com.aa”) ：包扫描，Spring会自动扫描com.aa同级以及子类包下的所有类</li><li>@Component : 声明把该类交由Spring，由Spring来帮你完成实例化</li><li>@Autowired : 注入，Spring完成自动装配</li></ul><h3 id="通过构造函数-x2F-Set方法-x2F-Autowired方式"><a href="#通过构造函数-x2F-Set方法-x2F-Autowired方式" class="headerlink" title="通过构造函数&#x2F;Set方法&#x2F;@Autowired方式"></a>通过构造函数&#x2F;Set方法&#x2F;@Autowired方式</h3><p>AnotherBean.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//默认为单例模式</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnotherBean</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyBean.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AnotherBean anotherBean1;</span><br><span class="line">    <span class="keyword">private</span> AnotherBean anotherBean2;</span><br><span class="line">    <span class="comment">//使用@Autowired注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AnotherBean anotherBean3;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过构造方法</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyBean</span><span class="params">(AnotherBean anotherBean1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.anotherBean1 = anotherBean1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过Set方法</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAnotherBean2</span><span class="params">(AnotherBean anotherBean2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.anotherBean2 = anotherBean2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyBean&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;anotherBean1=&quot;</span> + anotherBean1 +</span><br><span class="line">                <span class="string">&quot;, anotherBean2=&quot;</span> + anotherBean2 +</span><br><span class="line">                <span class="string">&quot;, anotherBean3=&quot;</span> + anotherBean3 +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BeanConfig.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.example.demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取Spring上下文</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(BeanConfig.class);</span><br><span class="line">        <span class="type">MyBean</span> <span class="variable">myBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;myBean&quot;</span>, MyBean.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;myBean = &quot;</span> + myBean);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 执行结果：</span></span><br><span class="line"><span class="comment">         * myBean = MyBean&#123;anotherBean1=com.example.demo.spring.AnotherBean@2ca47471,</span></span><br><span class="line"><span class="comment">         *                 anotherBean2=com.example.demo.spring.AnotherBean@2ca47471,</span></span><br><span class="line"><span class="comment">         *                 anotherBean3=com.example.demo.spring.AnotherBean@2ca47471&#125;</span></span><br><span class="line"><span class="comment">         * 这里anotherBean1、anotherBean2、anotherBean3的内容时相同，说明是同一个实例，</span></span><br><span class="line"><span class="comment">         * 解释一下，这样是因为在AnotherBean的类上使用<span class="doctag">@Component</span>注解，默认为单利模式，所以无论谁使用它都是同一个实例</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot打包:Failed to execute goal org.apache.maven.plugins</title>
      <link href="/2020/11/18/springboot%E6%89%93%E5%8C%85failed-to-execute-goal-org-apache-maven-pluginsmaven-resources-plugin3-2-0%EF%BC%8Ccaused-by-org-apache-maven-plugin-mojoexecutionexception-input-length-1/"/>
      <url>/2020/11/18/springboot%E6%89%93%E5%8C%85failed-to-execute-goal-org-apache-maven-pluginsmaven-resources-plugin3-2-0%EF%BC%8Ccaused-by-org-apache-maven-plugin-mojoexecutionexception-input-length-1/</url>
      
        <content type="html"><![CDATA[<h3 id="先贴详细错误"><a href="#先贴详细错误" class="headerlink" title="先贴详细错误"></a>先贴详细错误</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[INFO] Error stacktraces are turned on.</span><br><span class="line">[INFO] Scanning <span class="keyword">for</span> projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] ----------------------&lt; cn.itze &gt;----------------------</span><br><span class="line">[INFO] Building itze <span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-resources-plugin:<span class="number">3.2</span><span class="number">.0</span>:resources (<span class="keyword">default</span>-resources) @ itze ---</span><br><span class="line">[INFO] Using <span class="string">&#x27;UTF-8&#x27;</span> encoding to copy filtered resources.</span><br><span class="line">[INFO] Using <span class="string">&#x27;UTF-8&#x27;</span> encoding to copy filtered properties files.</span><br><span class="line">[INFO] Copying <span class="number">4</span> resources</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD FAILURE</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  <span class="number">1.518</span> s</span><br><span class="line">[INFO] Finished at: <span class="number">2020</span>-<span class="number">11</span>-18T10:<span class="number">04</span>:<span class="number">36</span>+08:<span class="number">00</span></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-resources-plugin:<span class="number">3.2</span><span class="number">.0</span>:resources (<span class="keyword">default</span>-resources) on project itze: <span class="type">Input</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">1</span> -&gt; [Help <span class="number">1</span>]</span><br><span class="line">org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-resources-plugin:<span class="number">3.2</span><span class="number">.0</span>:resources (<span class="keyword">default</span>-resources) on project itze: <span class="type">Input</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">215</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">156</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">148</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:<span class="number">117</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:<span class="number">81</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:<span class="number">56</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:<span class="number">128</span>)</span><br><span class="line">    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:<span class="number">305</span>)</span><br><span class="line">    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:<span class="number">192</span>)</span><br><span class="line">    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:<span class="number">105</span>)</span><br><span class="line">    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:<span class="number">957</span>)</span><br><span class="line">    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:<span class="number">289</span>)</span><br><span class="line">    at org.apache.maven.cli.MavenCli.main (MavenCli.java:<span class="number">193</span>)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">    at java.lang.reflect.Method.invoke (Method.java:<span class="number">498</span>)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:<span class="number">282</span>)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:<span class="number">225</span>)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:<span class="number">406</span>)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:<span class="number">347</span>)</span><br><span class="line">Caused by: org.apache.maven.plugin.MojoExecutionException: <span class="type">Input</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    at org.apache.maven.plugins.resources.ResourcesMojo.execute (ResourcesMojo.java:<span class="number">362</span>)</span><br><span class="line">    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:<span class="number">137</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">210</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">156</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">148</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:<span class="number">117</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:<span class="number">81</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:<span class="number">56</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:<span class="number">128</span>)</span><br><span class="line">    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:<span class="number">305</span>)</span><br><span class="line">    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:<span class="number">192</span>)</span><br><span class="line">    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:<span class="number">105</span>)</span><br><span class="line">    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:<span class="number">957</span>)</span><br><span class="line">    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:<span class="number">289</span>)</span><br><span class="line">    at org.apache.maven.cli.MavenCli.main (MavenCli.java:<span class="number">193</span>)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">    at java.lang.reflect.Method.invoke (Method.java:<span class="number">498</span>)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:<span class="number">282</span>)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:<span class="number">225</span>)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:<span class="number">406</span>)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:<span class="number">347</span>)</span><br><span class="line">Caused by: org.apache.maven.shared.filtering.MavenFilteringException: <span class="type">Input</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    at org.apache.maven.shared.filtering.DefaultMavenFileFilter.copyFile (DefaultMavenFileFilter.java:<span class="number">113</span>)</span><br><span class="line">    at org.apache.maven.shared.filtering.DefaultMavenResourcesFiltering.filterResources (DefaultMavenResourcesFiltering.java:<span class="number">262</span>)</span><br><span class="line">    at org.apache.maven.plugins.resources.ResourcesMojo.execute (ResourcesMojo.java:<span class="number">356</span>)</span><br><span class="line">    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:<span class="number">137</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">210</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">156</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">148</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:<span class="number">117</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:<span class="number">81</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:<span class="number">56</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:<span class="number">128</span>)</span><br><span class="line">    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:<span class="number">305</span>)</span><br><span class="line">    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:<span class="number">192</span>)</span><br><span class="line">    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:<span class="number">105</span>)</span><br><span class="line">    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:<span class="number">957</span>)</span><br><span class="line">    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:<span class="number">289</span>)</span><br><span class="line">    at org.apache.maven.cli.MavenCli.main (MavenCli.java:<span class="number">193</span>)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">    at java.lang.reflect.Method.invoke (Method.java:<span class="number">498</span>)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:<span class="number">282</span>)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:<span class="number">225</span>)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:<span class="number">406</span>)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:<span class="number">347</span>)</span><br><span class="line">Caused by: java.nio.charset.MalformedInputException: <span class="type">Input</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    at java.nio.charset.CoderResult.throwException (CoderResult.java:<span class="number">281</span>)</span><br><span class="line">    at sun.nio.cs.StreamDecoder.implRead (StreamDecoder.java:<span class="number">339</span>)</span><br><span class="line">    at sun.nio.cs.StreamDecoder.read (StreamDecoder.java:<span class="number">178</span>)</span><br><span class="line">    at java.io.InputStreamReader.read (InputStreamReader.java:<span class="number">184</span>)</span><br><span class="line">    at java.io.BufferedReader.read1 (BufferedReader.java:<span class="number">210</span>)</span><br><span class="line">    at java.io.BufferedReader.read (BufferedReader.java:<span class="number">286</span>)</span><br><span class="line">    at java.io.BufferedReader.fill (BufferedReader.java:<span class="number">161</span>)</span><br><span class="line">    at java.io.BufferedReader.read (BufferedReader.java:<span class="number">182</span>)</span><br><span class="line">    at org.apache.maven.shared.filtering.BoundedReader.read (BoundedReader.java:<span class="number">85</span>)</span><br><span class="line">    at org.apache.maven.shared.filtering.MultiDelimiterInterpolatorFilterReaderLineEnding.read (MultiDelimiterInterpolatorFilterReaderLineEnding.java:<span class="number">235</span>)</span><br><span class="line">    at org.apache.maven.shared.filtering.MultiDelimiterInterpolatorFilterReaderLineEnding.read (MultiDelimiterInterpolatorFilterReaderLineEnding.java:<span class="number">197</span>)</span><br><span class="line">    at java.io.Reader.read (Reader.java:<span class="number">100</span>)</span><br><span class="line">    at org.apache.maven.shared.utils.io.FileUtils.copyFile (FileUtils.java:<span class="number">1931</span>)</span><br><span class="line">    at org.apache.maven.shared.filtering.DefaultMavenFileFilter.copyFile (DefaultMavenFileFilter.java:<span class="number">98</span>)</span><br><span class="line">    at org.apache.maven.shared.filtering.DefaultMavenResourcesFiltering.filterResources (DefaultMavenResourcesFiltering.java:<span class="number">262</span>)</span><br><span class="line">    at org.apache.maven.plugins.resources.ResourcesMojo.execute (ResourcesMojo.java:<span class="number">356</span>)</span><br><span class="line">    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:<span class="number">137</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">210</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">156</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:<span class="number">148</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:<span class="number">117</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:<span class="number">81</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:<span class="number">56</span>)</span><br><span class="line">    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:<span class="number">128</span>)</span><br><span class="line">    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:<span class="number">305</span>)</span><br><span class="line">    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:<span class="number">192</span>)</span><br><span class="line">    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:<span class="number">105</span>)</span><br><span class="line">    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:<span class="number">957</span>)</span><br><span class="line">    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:<span class="number">289</span>)</span><br><span class="line">    at org.apache.maven.cli.MavenCli.main (MavenCli.java:<span class="number">193</span>)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">    at java.lang.reflect.Method.invoke (Method.java:<span class="number">498</span>)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:<span class="number">282</span>)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:<span class="number">225</span>)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:<span class="number">406</span>)</span><br><span class="line">    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:<span class="number">347</span>)</span><br><span class="line">[ERROR]</span><br><span class="line">[ERROR] Re-run Maven using the -X <span class="keyword">switch</span> to enable full debug logging.</span><br><span class="line">[ERROR]</span><br><span class="line">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class="line">[ERROR] [Help <span class="number">1</span>] http:<span class="comment">//cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException</span></span><br></pre></td></tr></table></figure><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p><strong>修改版本，在pom文件最下面的插件里添加修改版本内容</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;!-- 修改版本 --&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.4</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot项目Jar包运行没有主清单属性</title>
      <link href="/2020/11/17/springboot%E9%A1%B9%E7%9B%AEjar%E5%8C%85%E8%BF%90%E8%A1%8C%E6%B2%A1%E6%9C%89%E4%B8%BB%E6%B8%85%E5%8D%95%E5%B1%9E%E6%80%A7/"/>
      <url>/2020/11/17/springboot%E9%A1%B9%E7%9B%AEjar%E5%8C%85%E8%BF%90%E8%A1%8C%E6%B2%A1%E6%9C%89%E4%B8%BB%E6%B8%85%E5%8D%95%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><strong>SpringBoot项目打成Jar之后通过命令行运行，报错：没有主清单属性</strong></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p><strong>首先确保POM文件中有以下插件</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><p><strong>然后如果使用命令打包，则使用打包命令：mvn install -Dmaven.test.skip&#x3D;true 解释一下，-Dmaven.test.skip&#x3D;true 这句话的意思是跳过测试验证，可加可不加，不加缩短打包时间</strong></p><hr><h2 id="注意：使用命令打包需要提前把路径切换到该项目的POM文件同级路径！不然会报找不到POM文件"><a href="#注意：使用命令打包需要提前把路径切换到该项目的POM文件同级路径！不然会报找不到POM文件" class="headerlink" title="注意：使用命令打包需要提前把路径切换到该项目的POM文件同级路径！不然会报找不到POM文件"></a><strong>注意：使用命令打包需要提前把路径切换到该项目的POM文件同级路径！不然会报找不到POM文件</strong></h2><p>说一下我的错误原因，刚开始报错，也是各种网上查，也真的是什么样的都有，不能说谁对谁错，我刚开始是因为使用的打包命令是：mvn source:jar -Dmaven.test.skip&#x3D;true 换成上面那个命令就可以了，不过打出来的包也变大了不少，有一点很费解的是我这里有的SpringBoot项目使用这个命令就可以打包启动，对比了配置也一样，先记录一下吧。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot@Autowired注入为Null</title>
      <link href="/2020/11/17/springbootautowired%E6%B3%A8%E5%85%A5%E4%B8%BAnull/"/>
      <url>/2020/11/17/springbootautowired%E6%B3%A8%E5%85%A5%E4%B8%BAnull/</url>
      
        <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><strong>SpringBoot项目，在获取resources中application.properties配置文件中的内容时，使用注入Environment方法获取，启动项目之后发现注入的Environment一直为null</strong></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p><strong>经过一段时间查阅，最终使用@PostConstruct注解解决</strong></p><h4 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h4><p><strong>@PostConstruct用于修饰非静态的void方法，被该注解修饰的方法会在服务器加载Servlet的时候加载执行，并且只会执行一次</strong> <strong>google翻译官方API一段解释：PostConstruct批注用于需要依赖注入完成以执行任何初始化之后要执行的方法上。必须在类投入使用之前调用此方法。所有支持依赖注入的类都必须支持该注释。即使该类不要求注入任何资源，也必须调用用PostConstruct注释的方法。此注释只能注释一种方法</strong>。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: gitlab@111.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Component注入Bean，交由Spring管理</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;<span class="comment">//默认获取的是application.properties</span></span><br><span class="line">    <span class="comment">//这里一定要是static</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Test test;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        test=<span class="built_in">this</span>;</span><br><span class="line">        test.environment=<span class="built_in">this</span>.environment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(test.environment.getProperty(<span class="string">&quot;server.port&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：这里测试不能在main方法中直接调用测试，需要启动项目之后调用，否则仍会报空指针异常</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看自签SSL证书信息</title>
      <link href="/2020/11/06/%E6%9F%A5%E7%9C%8B%E8%87%AA%E7%AD%BEssl%E8%AF%81%E4%B9%A6%E4%BF%A1%E6%81%AF/"/>
      <url>/2020/11/06/%E6%9F%A5%E7%9C%8B%E8%87%AA%E7%AD%BEssl%E8%AF%81%E4%B9%A6%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">keytool -list -v -keystore you.keyStroe</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> keytool </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK信任自签证书</title>
      <link href="/2020/11/03/jdk%E4%BF%A1%E4%BB%BB%E8%87%AA%E7%AD%BE%E8%AF%81%E4%B9%A6/"/>
      <url>/2020/11/03/jdk%E4%BF%A1%E4%BB%BB%E8%87%AA%E7%AD%BE%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h4 id="自签证书非机构办法，不在jdk信任的列表"><a href="#自签证书非机构办法，不在jdk信任的列表" class="headerlink" title="自签证书非机构办法，不在jdk信任的列表"></a>自签证书非机构办法，不在jdk信任的列表</h4><h3 id="cacerts"><a href="#cacerts" class="headerlink" title="cacerts"></a>cacerts</h3><p><strong>找到cacerts文件所在目录路径，jdk_home(jdk位置路径)&#x2F;jdk1.8.0_231&#x2F;jre&#x2F;lib&#x2F;security 如果是window系统斜杠是“\”到cacerts文件所在路径位置，Linux就cd到此位置，Windows就cmd到此位置</strong> <strong>cacerts文件所在路径位置：</strong> <img src="https://www.itze.cn/wp-content/uploads/2020/11/jdk.png"></p><h3 id="导入证书"><a href="#导入证书" class="headerlink" title="导入证书"></a>导入证书</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">keytool -<span class="keyword">import</span> -v -trustcacerts -alias base64ssl（另起别名） -file /你的路径/base64ssl.cer（要导入的证书） -storepass changeit -keystore cacerts</span><br></pre></td></tr></table></figure><p><strong>注意：这里是.cer文件</strong></p><h3 id="查看jdk已经信任的证书"><a href="#查看jdk已经信任的证书" class="headerlink" title="查看jdk已经信任的证书"></a>查看jdk已经信任的证书</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">keytool -list -keystore cacerts -storepass changeit</span><br></pre></td></tr></table></figure><h3 id="删除已经导入的证书"><a href="#删除已经导入的证书" class="headerlink" title="删除已经导入的证书"></a>删除已经导入的证书</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">keytool -delete -alias <span class="title function_">ssl64</span><span class="params">(证书导入时的别名)</span> -keystore cacerts  -storepass changeit</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql去除字符串中的特殊字符及varchar转int</title>
      <link href="/2020/10/29/mysql%E5%8E%BB%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E5%8F%8Avarchar%E8%BD%ACint/"/>
      <url>/2020/10/29/mysql%E5%8E%BB%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E5%8F%8Avarchar%E8%BD%ACint/</url>
      
        <content type="html"><![CDATA[<h3 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h3><p><strong>Mysql中有varchar类型字段，并且为：123,456 形式，需要对其进行排序，并根据条件筛选出前5条</strong></p><h3 id="模拟表数据"><a href="#模拟表数据" class="headerlink" title="模拟表数据"></a>模拟表数据</h3><p><strong>表名：table_a</strong></p><p>t_id(int)</p><p>t_year(int)</p><p>t_value(varchar)</p><p>1</p><p>2019</p><p>123,456</p><h3 id="Mysql去除字符串中的特殊符号"><a href="#Mysql去除字符串中的特殊符号" class="headerlink" title="Mysql去除字符串中的特殊符号"></a>Mysql去除字符串中的特殊符号</h3><p><strong>使用到的函数：REPLACE(str,from_str,to_str)</strong></p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul><li>str：需要操作的字段</li><li>from_str：字段中的特殊符号</li><li>to_str：需要替换成什么样</li></ul><p><strong>这里把t_value值为：123,456中的”，” 去掉，也就是替换成空。</strong> SQL：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> REPLACE(t_value,&quot;，&quot;,&quot;&quot;) <span class="keyword">FROM</span> table_a;</span><br></pre></td></tr></table></figure><h3 id="Mysql中varchar转int"><a href="#Mysql中varchar转int" class="headerlink" title="Mysql中varchar转int"></a>Mysql中varchar转int</h3><p><strong>使用到的函数： CAST(Filed AS UNSIGNED INTEGER)</strong></p><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><ul><li>Filed：为需要转换的字段名</li></ul><p><strong>这里需要先把t_value中的”，”去掉然后再转成int</strong> SQL：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CAST</span>(REPLACE(t_value,&quot;，&quot;,&quot;&quot;) <span class="keyword">AS</span> UNSIGNED <span class="type">INTEGER</span>) <span class="keyword">FROM</span> table_a;</span><br></pre></td></tr></table></figure><h3 id="总体实现"><a href="#总体实现" class="headerlink" title="总体实现"></a>总体实现</h3><p><strong>需求：对table_a表中的t_year&#x3D;2019的数据按照t_value字段从大到小排序并且只去前5条</strong> SQL：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> t_year <span class="operator">=</span> <span class="number">2019</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">CAST</span>(REPLACE(t_value,&quot;，&quot;,&quot;&quot;) <span class="keyword">AS</span> UNSIGNED <span class="type">INTEGER</span>) <span class="keyword">DESC</span> LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSONArray根据JSONObject某key值排序</title>
      <link href="/2020/10/27/jsonarray%E6%A0%B9%E6%8D%AEjsonobject%E6%9F%90key%E5%80%BC%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/10/27/jsonarray%E6%A0%B9%E6%8D%AEjsonobject%E6%9F%90key%E5%80%BC%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> * getString：字段类型，</span></span><br><span class="line"><span class="comment"> * key：JSONObject的key值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line"><span class="comment">//升序</span></span><br><span class="line">jsonArray.sort(Comparator.comparing(obj-&gt;((JSONObject)obj).getString(<span class="string">&quot;key&quot;</span>)));</span><br><span class="line"><span class="comment">//降序</span></span><br><span class="line">jsonArray.sort(Comparator.comparing(obj-&gt;((JSONObject)obj).getString(<span class="string">&quot;key&quot;</span>)).reversed());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JSONArray </tag>
            
            <tag> JSONObject </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat服务安全配置及性能优化</title>
      <link href="/2020/10/22/tomcat%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2020/10/22/tomcat%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="Tomcat内存溢出"><a href="#Tomcat内存溢出" class="headerlink" title="Tomcat内存溢出"></a>Tomcat内存溢出</h3><h4 id="常见的溢出异常及导致原因"><a href="#常见的溢出异常及导致原因" class="headerlink" title="常见的溢出异常及导致原因"></a>常见的溢出异常及导致原因</h4><ul><li>OutOfMemoryError:Java heap space 异常，通常是堆内存满了，堆内存默认使用最大是系统的4分之1，最小64分之1</li><li>OutOfMemoryError:PermGen space 异常，通常是静态内存区满了，Jdk8以上没了</li><li>StackOverflowError异常，通常栈内存满了，通常是死循环，递归导致</li></ul><h3 id="内存配置"><a href="#内存配置" class="headerlink" title="内存配置"></a>内存配置</h3><p><strong>修改编辑tomcat的Bin文件夹中catalina文件，服务器是Windows就修改.bat的，是Linux就修改.sh在第二行加入，Windows的去掉前面的set</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set JAVA_OPTS=&quot;-server -Xms256m -Xmx512m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=256m&quot;</span><br></pre></td></tr></table></figure><h3 id="修改默认8005端口"><a href="#修改默认8005端口" class="headerlink" title="修改默认8005端口"></a>修改默认8005端口</h3><p><strong>修改编辑tomcat中conf文件夹中server.xml配置文件，把如图中的端口号或SHUTDOWN</strong> <img src="https://www.itze.cn/wp-content/uploads/2020/10/shutdown.png"> <strong>至于为什么修改这个，这是一个安全配置项，默认的情况下，如果知道远程tomcat服务器的IP，可以在本地通过telnet命令直接把远程tomcat关掉，亲测很恐怖。</strong></p><h3 id="修改-x2F-隐藏版本号"><a href="#修改-x2F-隐藏版本号" class="headerlink" title="修改&#x2F;隐藏版本号"></a>修改&#x2F;隐藏版本号</h3><p><strong>修改或者隐藏版本号，可以避免针对版本攻击风险 修改tomcat的lib文件夹下的catalina.jar包，右键选择使用压缩工具打开，修改如图位置</strong> <img src="https://www.itze.cn/wp-content/uploads/2020/10/catalina.png"></p><h3 id="修改禁用管理页面"><a href="#修改禁用管理页面" class="headerlink" title="修改禁用管理页面"></a>修改禁用管理页面</h3><p><strong>将tomcat-webapps-ROOT文件夹重命名其它名字，然后新建一个空的ROOT文件夹，tomcat默认ip:port访问的地址就是ROOT文件夹</strong></p><h3 id="自定义错误页"><a href="#自定义错误页" class="headerlink" title="自定义错误页"></a>自定义错误页</h3><p><strong>新建一个错误的html页面，放到空的ROOT文件夹中，然后修改conf文件夹中的web.xml配置文件在最下面加入以下代码，其中error.html是你自定义的需要显示的错误页面</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &lt;!-- 错误页 --&gt;</span><br><span class="line"> &lt;error-page&gt;</span><br><span class="line">  &lt;error-code&gt;400&lt;/error-code&gt;</span><br><span class="line">  &lt;location&gt;/error.html&lt;/location&gt;</span><br><span class="line">&lt;/error-page&gt;</span><br><span class="line">&lt;error-page&gt;</span><br><span class="line">  &lt;error-code&gt;404&lt;/error-code&gt;</span><br><span class="line">  &lt;location&gt;/error.html&lt;/location&gt;</span><br><span class="line">&lt;/error-page&gt;</span><br><span class="line">&lt;error-page&gt;</span><br><span class="line">  &lt;error-code&gt;500&lt;/error-code&gt;</span><br><span class="line">  &lt;location&gt;/error.html&lt;/location&gt;</span><br><span class="line">&lt;/error-page&gt;</span><br></pre></td></tr></table></figure><p><img src="https://www.itze.cn/wp-content/uploads/2020/10/%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2.png"></p><h3 id="启用Cookie的HttpOnly"><a href="#启用Cookie的HttpOnly" class="headerlink" title="启用Cookie的HttpOnly"></a>启用Cookie的HttpOnly</h3><p><strong>启用Cookie的HttpOnly，js脚本就无法获取到Cookie信息，防止Xss-跨站脚本攻击 修改tomcat的conf文件夹下的context.xml文件，在如图位置添加：useHttpOnly&#x3D;”true”</strong> <img src="https://www.itze.cn/wp-content/uploads/2020/10/HttpOnly.png"></p>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置404错误页面跳转</title>
      <link href="/2020/10/21/nginx%E9%85%8D%E7%BD%AE404%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/"/>
      <url>/2020/10/21/nginx%E9%85%8D%E7%BD%AE404%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name www.itze.cn;</span><br><span class="line">        index index.html;</span><br><span class="line">        root /nginx/html/web;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                root   html;</span><br><span class="line">                index  index.html index.htm;</span><br><span class="line"></span><br><span class="line">                proxy_intercept_errors on;     #开启拦截404等错误</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #配置错误页面跳转</span><br><span class="line">        error_page 404  /404.html;</span><br><span class="line">            location =  /404.html &#123;</span><br><span class="line">            root /nginx/error;   #这里是404文件所在目录的绝对路径！！！</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 404 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xshell：需要Xmanager软件来处理X11转发请求</title>
      <link href="/2020/10/21/xshell%EF%BC%9A%E9%9C%80%E8%A6%81xmanager%E8%BD%AF%E4%BB%B6%E6%9D%A5%E5%A4%84%E7%90%86x11%E8%BD%AC%E5%8F%91%E8%AF%B7%E6%B1%82/"/>
      <url>/2020/10/21/xshell%EF%BC%9A%E9%9C%80%E8%A6%81xmanager%E8%BD%AF%E4%BB%B6%E6%9D%A5%E5%A4%84%E7%90%86x11%E8%BD%AC%E5%8F%91%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p><strong>一个页面验证码图片出不来，Xshll报需要Xmanager软件来处理X11转发请求弹框</strong></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p><strong>两个解决办法</strong> 1. 去下载Xmanager试用版 2. 在Xshell连接会话中设置，在所有会话选择需要设置的连接-右键属性-隧道-取消转发请求对勾，如下图 <img src="https://www.itze.cn/wp-content/uploads/2020/10/Xshell%E8%BF%9E%E6%8E%A5%E4%BC%9A%E8%AF%9D.png"> <img src="https://www.itze.cn/wp-content/uploads/2020/10/Xshell%E9%9A%A7%E9%81%93%E5%B1%9E%E6%80%A7.png"></p>]]></content>
      
      
      <categories>
          
          <category> Xshell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xmanager </tag>
            
            <tag> Xshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程-守护线程</title>
      <link href="/2020/10/19/java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/"/>
      <url>/2020/10/19/java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="守护线程注意事项"><a href="#守护线程注意事项" class="headerlink" title="守护线程注意事项"></a>守护线程注意事项</h3><p><img src="https://www.itze.cn/wp-content/uploads/2020/10/%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B.png"> <em>注：图片来自网络(若侵则删)</em> <strong>守护线程特点：一旦所有用户线程都结束，守护线程会随JVM一起结束。</strong> <strong>用代码来证明第三条所说，不是所有的任务都可以分配给守护线程来执行。</strong></p><h3 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h3><p><strong>把一个正在向文件中执行写入操作的线程设置为守护线程，在写入过程中结束用户主线程，那么该守护线程也会随之结束。</strong></p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread3</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:&quot;</span> + File.separator + <span class="string">&quot;word.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (count &lt; <span class="number">99</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">OutputStreamWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file, <span class="literal">true</span>));</span><br><span class="line">                writer.write(<span class="string">&quot;word: &quot;</span> + count+<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;写入word: &quot;</span> + count);</span><br><span class="line">                writer.close();</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadAndRunnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入主线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread3</span>());</span><br><span class="line">        <span class="comment">//设置守护线程</span></span><br><span class="line">        thread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="comment">//在控制台输入任意退出主线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in).next();</span><br><span class="line">        System.out.println(<span class="string">&quot;结束主线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制台输入执行结果"><a href="#控制台输入执行结果" class="headerlink" title="控制台输入执行结果"></a>控制台输入执行结果</h3><p><img src="https://www.itze.cn/wp-content/uploads/2020/10/%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B%E7%BB%93%E6%9E%9C.png"> <strong>当在控制台输入aaa时结束了主线程</strong></p><h3 id="文件写入结果"><a href="#文件写入结果" class="headerlink" title="文件写入结果"></a>文件写入结果</h3><p><img src="https://www.itze.cn/wp-content/uploads/2020/10/%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B%E5%86%99%E5%87%BA%E7%BB%93%E6%9E%9C.png"> <strong>文件写入到word:3时结束了，证明了当用户线程都结束之后，守护线程也会随JVM结束工作。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 守护线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程基本使用及模拟购票</title>
      <link href="/2020/10/19/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%A8%A1%E6%8B%9F%E8%B4%AD%E7%A5%A8/"/>
      <url>/2020/10/19/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%A8%A1%E6%8B%9F%E8%B4%AD%E7%A5%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Java中实现多线程的方法的两种方式"><a href="#Java中实现多线程的方法的两种方式" class="headerlink" title="Java中实现多线程的方法的两种方式"></a>Java中实现多线程的方法的两种方式</h3><ul><li>继承Thread类</li><li>实现Runnable接口</li></ul><p>由于Java是单继承多实现，因此第一种继承Thread类会用一定局限性</p><h3 id="线程的生存周期"><a href="#线程的生存周期" class="headerlink" title="线程的生存周期"></a>线程的生存周期</h3><p><img src="https://www.itze.cn/wp-content/uploads/2020/10/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"> <em>注：图片来自网络(若侵则删)</em></p><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><ul><li>创建：当new Thread()时则线程被创建</li><li>就绪：当调用start()方法时线程处于就绪状态，此时的线程并不一定是已经被执行，此时CPU有可能正在执行其 他线程</li><li>运行：线程获取到CPU资源执行Run()方法里面的代码，进入运行状态</li><li>终止：Run()方法中代码执行完毕，终止线程。</li><li>阻塞状态：阻塞的情况，如果在Run()方法中加入了wait()&#x2F;join()&#x2F;sleep()等方法，此时线程处于阻塞状态， 将让出CPU资源给其他线程，在该线程被唤醒之后将再次进入就绪状态，等待有空闲的CPU资源。</li></ul><p><strong>Runnable的代码可以被多个线程（Thread实例）共享，适合多个线程处理同一资源的问题，而继承Thread类不会，用两种方式写个例子证明一下</strong></p><h3 id="使用继承Thread类"><a href="#使用继承Thread类" class="headerlink" title="使用继承Thread类"></a>使用继承Thread类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">3</span>;<span class="comment">//剩余票数</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            number--; <span class="comment">//假设每次执行减少一张票数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;线程名：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;剩余票数：&quot;</span> + number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadAndRunnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建3个线程</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="comment">//启动</span></span><br><span class="line">        myThread1.start();</span><br><span class="line">        myThread2.start();</span><br><span class="line">        myThread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>继承Thread类执行结果</strong> <img src="https://www.itze.cn/wp-content/uploads/2020/10/Thread.png"></p><h3 id="使用实现Runnable接口"><a href="#使用实现Runnable接口" class="headerlink" title="使用实现Runnable接口"></a>使用实现Runnable接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">3</span>;<span class="comment">//剩余票数</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            number--;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程名：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;剩余票数：&quot;</span> + number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadAndRunnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建3个线程</span></span><br><span class="line">        <span class="type">MyThread2</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(thread);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(thread);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(thread);</span><br><span class="line">        <span class="comment">//启动</span></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现Runnable接口执行结果</strong> <img src="https://www.itze.cn/wp-content/uploads/2020/10/Runnable.png"> <strong>注：线程的启动顺序并不一定是线程的执行顺序！要看哪个线程优先抢占到CPU资源！</strong> <strong>由两者的执行结果可以证明上面的结果，Runnable的代码可以被多个线程（Thread实例）共享，继承Thread类的方式每个线程都执行了3次，实现Runnable接口的所有线程执行了3次。这里不考虑同步。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Runnable </tag>
            
            <tag> Thread </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java生成/解析二维码-ZXing的使用</title>
      <link href="/2020/10/15/java%E7%94%9F%E6%88%90-j%E8%A7%A3%E6%9E%90%E4%BA%8C%E7%BB%B4%E7%A0%81-zxing%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/10/15/java%E7%94%9F%E6%88%90-j%E8%A7%A3%E6%9E%90%E4%BA%8C%E7%BB%B4%E7%A0%81-zxing%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>Java生成二维码常用的两种方式：</strong> - Google的ZXing - Denso公司的QRCode 至于两者的区别自行百度，这里介绍使用<strong>ZXing</strong>生成解析二维码</p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p><strong>添加ZXing依赖Jar包</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--ZXing 二维码 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.3</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javase&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.3</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="ZXing生成二维码"><a href="#ZXing生成二维码" class="headerlink" title="ZXing生成二维码"></a>ZXing生成二维码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content  二维码内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> destPath 二维码保存的路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/10/15 14:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createQRCode</span><span class="params">(String content, File destPath)</span> &#123;</span><br><span class="line">    <span class="comment">//定义长宽</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line">    <span class="comment">//定义格式</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> <span class="string">&quot;png&quot;</span>;</span><br><span class="line">    <span class="comment">//定义二维码参数</span></span><br><span class="line">    <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    hashMap.put(EncodeHintType.CHARACTER_SET, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 纠错能力</span></span><br><span class="line"><span class="comment">     * L:约可纠错7%的数据码字</span></span><br><span class="line"><span class="comment">     * M:约可纠错15%的数据码字</span></span><br><span class="line"><span class="comment">     * Q:约可纠错25%的数据码字</span></span><br><span class="line"><span class="comment">     * H:约可纠错30%的数据码字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    hashMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.M);</span><br><span class="line">    <span class="comment">//边距</span></span><br><span class="line">    hashMap.put(EncodeHintType.MARGIN, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">BitMatrix</span> <span class="variable">matrix</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MultiFormatWriter</span>()</span><br><span class="line">                .encode(content, BarcodeFormat.QR_CODE, width, height, hashMap);</span><br><span class="line">        MatrixToImageWriter.writeToPath(matrix, format, destPath.toPath());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ZXing解析二维码"><a href="#ZXing解析二维码" class="headerlink" title="ZXing解析二维码"></a>ZXing解析二维码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> destPath 需要解析的二维码路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/10/15 14:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readQRCode</span><span class="params">(File destPath)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">read</span> <span class="operator">=</span> ImageIO.read(destPath);</span><br><span class="line">        <span class="type">BinaryBitmap</span> <span class="variable">binaryBitmap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryBitmap</span></span><br><span class="line">                (<span class="keyword">new</span> <span class="title class_">HybridBinarizer</span>(<span class="keyword">new</span> <span class="title class_">BufferedImageLuminanceSource</span>(read)));</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(EncodeHintType.CHARACTER_SET, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MultiFormatReader</span>().decode(binaryBitmap, hashMap);</span><br><span class="line">        System.out.println(<span class="string">&quot;二维码格式：&quot;</span> + result.getBarcodeFormat());</span><br><span class="line">        System.out.println(<span class="string">&quot;二维码内容：&quot;</span> + result.getText());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//生成二维码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;https://www.itze.cn&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\123.png&quot;</span>);</span><br><span class="line">    createQRCode(content, file);</span><br><span class="line">    <span class="comment">//解析二维码</span></span><br><span class="line">    readQRCode(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析结果"><a href="#解析结果" class="headerlink" title="解析结果"></a>解析结果</h3><p><img src="https://www.itze.cn/wp-content/uploads/2020/10/%E4%BA%8C%E7%BB%B4%E7%A0%81%E8%A7%A3%E6%9E%90%E7%BB%93%E6%9E%9C.png"> 解析其他的二维码也是可以的，实测解析微信个人二维码也是可以的。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> ZXing </tag>
            
            <tag> 生成/解析二维码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自定义注解及解析注解</title>
      <link href="/2020/10/14/java%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%8F%8A%E8%A7%A3%E6%9E%90%E6%B3%A8%E8%A7%A3/"/>
      <url>/2020/10/14/java%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%8F%8A%E8%A7%A3%E6%9E%90%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><h5 id="类名：Desc"><a href="#类名：Desc" class="headerlink" title="类名：Desc"></a>类名：Desc</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/09/13 14:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Target</span>:注解的作用范围，METHOD：作用在方法上，TYPE：作用在类上</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Retention</span>：注解的生命周期，RUNTIME：运行时</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Inherited</span>：子类继承父类,只能解析到类层，方法层解析不到</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Desc &#123;</span><br><span class="line">    <span class="comment">//成员组成必须是无参/无异常</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注解使用"><a href="#注解使用" class="headerlink" title="注解使用"></a>注解使用</h3><h5 id="类名：DescMethod"><a href="#类名：DescMethod" class="headerlink" title="类名：DescMethod"></a>类名：DescMethod</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/09/13 15:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Desc(value = &quot;This is DescMethod Class&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DescMethod</span> &#123;</span><br><span class="line">    <span class="meta">@Desc(value = &quot;This is A Method&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">A</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Desc(value = &quot;This is B Method&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">B</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析注解"><a href="#解析注解" class="headerlink" title="解析注解"></a>解析注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析注解</span></span><br><span class="line"><span class="comment">     * 获取类上的注解内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;DescMethod&gt; methodClass = DescMethod.class;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">classAnnotationPresent</span> <span class="operator">=</span> methodClass.isAnnotationPresent(Desc.class);</span><br><span class="line">    <span class="comment">//如果DescMethod.class中存在@Desc注解</span></span><br><span class="line">    <span class="keyword">if</span> (classAnnotationPresent) &#123;</span><br><span class="line">        <span class="comment">//获取@Desc注解</span></span><br><span class="line">        <span class="type">Desc</span> <span class="variable">annotation</span> <span class="operator">=</span> methodClass.getDeclaredAnnotation(Desc.class);</span><br><span class="line">        <span class="comment">//得到@Desc注解中的内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> annotation.value();</span><br><span class="line">        System.out.println(desc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析注解</span></span><br><span class="line"><span class="comment">     * 获取类中方法上的注解内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//获取类中所有方法</span></span><br><span class="line">    Method[] methods = methodClass.getDeclaredMethods();</span><br><span class="line">    <span class="keyword">for</span> (Method method : methods</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">methodAnnotationPresent</span> <span class="operator">=</span> method.isAnnotationPresent(Desc.class);</span><br><span class="line">        <span class="comment">//如果该方法上存在@Desc注解</span></span><br><span class="line">        <span class="keyword">if</span> (methodAnnotationPresent) &#123;</span><br><span class="line">            <span class="comment">//获取@Desc注解</span></span><br><span class="line">            <span class="type">Desc</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getDeclaredAnnotation(Desc.class);</span><br><span class="line">            <span class="comment">//得到该方法上@Desc注解的内容</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> annotation.value();</span><br><span class="line">            System.out.println(desc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><p><img src="https://www.itze.cn/wp-content/uploads/2020/10/result.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Annotation </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Twitter4J-操作Twitter配置</title>
      <link href="/2020/10/13/twitter4j-java%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/10/13/twitter4j-java%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>开发语言：Java 操作系统：window10 开发工具：IDEA JDK版本：1.8</strong></p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p><strong>需要翻墙，首先在Twitter申请一个开发者账号，然后在开发者中心创建一个project Twitter开发者地址：<a href="https://developer.twitter.com/en" title="https://developer.twitter.com/en">https://developer.twitter.com/en</a> 自己想办法通过申请 创建Project之后，首先按照如下图设置权限</strong></p><h4 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h4><p><img src="https://www.itze.cn/wp-content/uploads/2020/10/redwrite.png" alt="TwitterAuth"> <strong>第二步设置，找到keys and tokens 保存这四个密钥值</strong></p><h4 id="设置密钥"><a href="#设置密钥" class="headerlink" title="设置密钥"></a>设置密钥</h4><p><img src="https://www.itze.cn/wp-content/uploads/2020/10/key.png" alt="Twitter-Key"> <strong>API key API key secret 下面这两个保存下来，貌似每次生成只能看到一次 Access Token Access secret Token</strong></p><h3 id="Twitter4J"><a href="#Twitter4J" class="headerlink" title="Twitter4J"></a>Twitter4J</h3><p><strong>Twitter4J官网：</strong><a href="http://twitter4j.org/en/index.html" title="http://twitter4j.org/en/index.html">http://twitter4j.org/en/index.html</a> <img src="https://www.itze.cn/wp-content/uploads/2020/10/twitter4japi.png" alt="Twitter4J"></p><h4 id="配置Twitter4J依赖"><a href="#配置Twitter4J依赖" class="headerlink" title="配置Twitter4J依赖"></a>配置Twitter4J依赖</h4><p><strong>配置Twitter4J依赖Jar包，我这里选择Maven配置</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- Twitter4j --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.twitter4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;twitter4j-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">4.0</span><span class="number">.7</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h4><p><strong>使用Twitter4J操作Twitter配置,随意选择一种方式即可，这里选择第二种</strong> <img src="https://www.itze.cn/wp-content/uploads/2020/10/twitter4jpeihiz.png" alt="Twitter4Jpeizhi"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> twitter4j.Twitter;</span><br><span class="line"><span class="keyword">import</span> twitter4j.TwitterFactory;</span><br><span class="line"><span class="keyword">import</span> twitter4j.conf.ConfigurationBuilder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/30 15:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetTwitterConfig</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Twitter <span class="title function_">getNewInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ConfigurationBuilder</span> <span class="variable">cb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConfigurationBuilder</span>();</span><br><span class="line">        cb.setDebugEnabled(<span class="literal">true</span>)</span><br><span class="line">                .setOAuthConsumerKey(<span class="string">&quot;API Key&quot;</span>)</span><br><span class="line">                .setOAuthConsumerSecret(<span class="string">&quot;API Key Secret&quot;</span>)</span><br><span class="line">                .setOAuthAccessToken(<span class="string">&quot;Access Token&quot;</span>)</span><br><span class="line">                .setOAuthAccessTokenSecret(<span class="string">&quot;Access Token Secret&quot;</span>)</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 设置代理</span></span><br><span class="line"><span class="comment">                 * 1.如果你本地使用了代理软件翻墙了，HttpProxyHost一般是127.0.0.1</span></span><br><span class="line"><span class="comment">                 *   HttpProxyPort查看http代理端口多少即可</span></span><br><span class="line"><span class="comment">                 * 2.如果项目放到海外服务器运行，这里不需要设置也可以</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                .setHttpProxyHost(<span class="string">&quot;127.0.0.1&quot;</span>)</span><br><span class="line">                .setHttpProxyPort(<span class="number">1234</span>);</span><br><span class="line">        <span class="type">TwitterFactory</span> <span class="variable">tf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TwitterFactory</span>(cb.build());</span><br><span class="line">        <span class="type">Twitter</span> <span class="variable">twitter</span> <span class="operator">=</span> tf.getInstance();</span><br><span class="line">        <span class="keyword">return</span> twitter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Twitter4J操作Twitter"><a href="#Twitter4J操作Twitter" class="headerlink" title="Twitter4J操作Twitter"></a>Twitter4J操作Twitter</h3><p><strong>Twitter4J官网示例</strong> <img src="https://www.itze.cn/wp-content/uploads/2020/10/tuiwen.png"> <strong>发布推文测试</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> TwitterException &#123;</span><br><span class="line">    <span class="type">Twitter</span> <span class="variable">twitter</span> <span class="operator">=</span> GetTwitterConfig.getNewInstance();</span><br><span class="line">    twitter.updateStatus(<span class="string">&quot;hello word&quot;</span>);<span class="comment">//发布推文</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="https://www.itze.cn/wp-content/uploads/2020/10/helloword.png"> 其余的可以自行进行测试。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Twitter </tag>
            
            <tag> Twitter4J </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-字符流逐行读取/写入文件</title>
      <link href="/2020/09/28/java-%E5%AD%97%E7%AC%A6%E6%B5%81%E9%80%90%E8%A1%8C%E8%AF%BB%E5%8F%96-%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6/"/>
      <url>/2020/09/28/java-%E5%AD%97%E7%AC%A6%E6%B5%81%E9%80%90%E8%A1%8C%E8%AF%BB%E5%8F%96-%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符流，每次读取/写入一行</span></span><br><span class="line"><span class="comment"> * BufferedReader/PrintWriter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/28 10:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> srcFile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> destFile</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">brAndpw</span><span class="params">(String srcFile,String destFile)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(srcFile));</span><br><span class="line">        <span class="comment">//参数说明，第二个true时，写入的时候会自动刷新，就不需要刷新了</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFile), <span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//读取，每次读取一行</span></span><br><span class="line">        <span class="keyword">while</span> ((str=reader.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//写入，println：写入并自动换行，print:写入但是不执行换行</span></span><br><span class="line">            writer.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        reader.close();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="string">&quot;D:\\newCountry.txt&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="string">&quot;D:\\newCountry2.txt&quot;</span>;</span><br><span class="line">    brAndpw(srcFile,destFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 字符流 </tag>
            
            <tag> BufferedReader </tag>
            
            <tag> PrintWriter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-字符流读取/写入文件内容</title>
      <link href="/2020/09/27/java-%E5%AD%97%E7%AC%A6%E6%B5%81%E8%AF%BB%E5%8F%96-%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/"/>
      <url>/2020/09/27/java-%E5%AD%97%E7%AC%A6%E6%B5%81%E8%AF%BB%E5%8F%96-%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符流，读取文件并写入到新文件中</span></span><br><span class="line"><span class="comment"> * 读取格式txt,xml...都可以</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> srcFile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> destFile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/27 9:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readCharsAndWrite</span><span class="params">(File srcFile, File destFile)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!srcFile.exists()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;原文件：&quot;</span> + srcFile + <span class="string">&quot;不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!srcFile.isFile()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(srcFile + <span class="string">&quot;不是文件！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数说明，new InputStreamReader(args,args2)</span></span><br><span class="line"><span class="comment">         * 第一个参数args是new FileInputStream(原文件路径)</span></span><br><span class="line"><span class="comment">         * 第二个参数args2是以什么编码格式读取该文件,可以不写</span></span><br><span class="line"><span class="comment">         *      默认读取为项目的编码格式，如果项编码格式为gbk则以该方式读取</span></span><br><span class="line"><span class="comment">         *      建议设置要读取文件的编码格式，以防乱码！</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFile));</span><br><span class="line">        <span class="comment">//读取原文件内容,读取字符流用char[],字节流用byte[]</span></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">10</span> * <span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = reader.read(chars, <span class="number">0</span>, chars.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//写入到新文件中</span></span><br><span class="line">            writer.write(chars, <span class="number">0</span>, b);</span><br><span class="line">            writer.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        reader.close();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    readCharsAndWrite(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\context.xml&quot;</span>), <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\context2.xml&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> FileInputStream </tag>
            
            <tag> FileOutputStream </tag>
            
            <tag> InputStreamReader </tag>
            
            <tag> OutputStreamWriter </tag>
            
            <tag> 字符流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-实现文件拷贝的三种方式</title>
      <link href="/2020/09/25/java-%E5%AD%97%E8%8A%82%E6%B5%81%E8%AF%BB%E5%86%99%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/"/>
      <url>/2020/09/25/java-%E5%AD%97%E8%8A%82%E6%B5%81%E8%AF%BB%E5%86%99%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件拷贝，利用字节流批量读取实现复制文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/24 10:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> srcFile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> destFile</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">(File srcFile, File destFile)</span> &#123;</span><br><span class="line">    <span class="comment">//判断原文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (!srcFile.exists()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;源文件：&quot;</span> + srcFile + <span class="string">&quot;不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断原文件是否为一个文件</span></span><br><span class="line">    <span class="keyword">if</span> (!srcFile.isFile()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(srcFile + <span class="string">&quot;不是一个文件！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFile);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 读取原文件，以字节流的形式读到byte数组，1024个字节=1KB</span></span><br><span class="line"><span class="comment">         * 循环读取</span></span><br><span class="line"><span class="comment">         * in.read()读到bytes数组中，位置从0-bytes.length</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span> * <span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> b;  <span class="comment">//b为读取到的字节长度</span></span><br><span class="line">        <span class="keyword">while</span> ((b = in.read(bytes, <span class="number">0</span>, bytes.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//写入</span></span><br><span class="line">            out.write(bytes, <span class="number">0</span>, b);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件拷贝，利用带缓冲区的字节流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/24 10:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> srcFile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> destFile</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFileByBuffer</span><span class="params">(File srcFile,File destFile)</span>&#123;</span><br><span class="line">    <span class="comment">//判断原文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (!srcFile.exists()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;源文件：&quot;</span> + srcFile + <span class="string">&quot;不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断原文件是否为一个文件</span></span><br><span class="line">    <span class="keyword">if</span> (!srcFile.isFile()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(srcFile + <span class="string">&quot;不是一个文件！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile));</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFile));</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b=bis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(b);</span><br><span class="line">            bos.flush();<span class="comment">//刷新缓冲区，利用带缓冲区的一定要刷新缓冲区，不然无法写入</span></span><br><span class="line">        &#125;</span><br><span class="line">        bis.close();</span><br><span class="line">        bos.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    copyFile(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\D.zip&quot;</span>), <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\a.zip&quot;</span>));  <span class="comment">//耗时：29毫秒</span></span><br><span class="line">    copyFileByBuffer(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\D.zip&quot;</span>), <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\a.zip&quot;</span>));  <span class="comment">//耗时：42900毫秒</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;耗时：&quot;</span>+(end-start)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第三种拷贝的方法就是，即不带缓冲区，也不使用批量读取，就是一个一个字节的读取，这种方式效率是最低的，我就不拿实例测试了。-laughing"><a href="#第三种拷贝的方法就是，即不带缓冲区，也不使用批量读取，就是一个一个字节的读取，这种方式效率是最低的，我就不拿实例测试了。-laughing" class="headerlink" title="第三种拷贝的方法就是，即不带缓冲区，也不使用批量读取，就是一个一个字节的读取，这种方式效率是最低的，我就不拿实例测试了。:laughing:"></a>第三种拷贝的方法就是，即不带缓冲区，也不使用批量读取，就是一个一个字节的读取，这种方式效率是最低的，我就不拿实例测试了。:laughing:</h4><h4 id="实际测试拷贝同一个文件，通过字节流的批量读取的方式速度是最快的。"><a href="#实际测试拷贝同一个文件，通过字节流的批量读取的方式速度是最快的。" class="headerlink" title="实际测试拷贝同一个文件，通过字节流的批量读取的方式速度是最快的。"></a>实际测试拷贝同一个文件，通过字节流的批量读取的方式速度是最快的。</h4>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> FileInputStream </tag>
            
            <tag> FileOutputStream </tag>
            
            <tag> I/O流 </tag>
            
            <tag> 复制文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节流-文件输入流FileInputStream[基本使用]</title>
      <link href="/2020/09/24/%E5%AD%97%E8%8A%82%E6%B5%81-%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E6%B5%81fileinputstream%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/09/24/%E5%AD%97%E8%8A%82%E6%B5%81-%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E6%B5%81fileinputstream%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/9/24 10:29</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取一个文件，然后每10个字节换行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printHex</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//把文件作为字节流操作</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fileName);</span><br><span class="line">            <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>) &#123;  <span class="comment">//每次只读一个字节</span></span><br><span class="line">                <span class="comment">//以16进制</span></span><br><span class="line">                System.out.print(Integer.toHexString(b) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (a++ % <span class="number">10</span> == <span class="number">0</span>) &#123;  <span class="comment">//每10个字节换行</span></span><br><span class="line">                    System.out.println();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一个文件读到byte数组中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printHexByByteArrays</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//把文件作为字节流操作</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fileName);</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span> * <span class="number">1024</span>]; <span class="comment">//1024个字节=1KB 10*1024=10KB</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//把文件读到byte数组中，并且放入从0-bytes.length的位置，返回值read为读到的字节个数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> fis.read(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; read; j++) &#123;  <span class="comment">//这里只遍历读到个字节个数</span></span><br><span class="line">                System.out.print(Integer.toHexString(bytes[j]) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (i++ % <span class="number">10</span> == <span class="number">0</span>) &#123;   <span class="comment">//每10个字节换行</span></span><br><span class="line">                    System.out.println();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当数组不够大的时候一次性无法读完，使用循环去读</span></span><br><span class="line">            <span class="type">int</span> readBteys;</span><br><span class="line">            <span class="keyword">while</span> ((readBteys = fis.read(bytes, <span class="number">0</span>, bytes.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; readBteys; j++) &#123;</span><br><span class="line">                    System.out.print(Integer.toHexString(bytes[j]) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (i++ % <span class="number">10</span> == <span class="number">0</span>) &#123;  <span class="comment">//每10个字节换行</span></span><br><span class="line">                        System.out.println();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> FileInputStream </tag>
            
            <tag> 字节流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-通过反射了解集合泛型的本质</title>
      <link href="/2020/09/21/java-%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E4%BA%86%E8%A7%A3%E9%9B%86%E5%90%88%E6%B3%9B%E5%9E%8B%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
      <url>/2020/09/21/java-%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E4%BA%86%E8%A7%A3%E9%9B%86%E5%90%88%E6%B3%9B%E5%9E%8B%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassDemo3</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/9/21 13:47</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list2.add(<span class="string">&quot;hello&quot;</span>);  <span class="comment">//这里泛型约束类型为String,所有这添加 &quot;hello&quot; 没问题</span></span><br><span class="line"><span class="comment">//        strings.add(100);    这里添加int类型就会报类型错误</span></span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">ArrayList</span>&gt; c1 = list.getClass();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">ArrayList</span>&gt; c2 = list2.getClass();</span><br><span class="line">        System.out.println(c1);<span class="comment">// class java.util.ArrayList</span></span><br><span class="line">        System.out.println(c2); <span class="comment">//class java.util.ArrayList</span></span><br><span class="line">        System.out.println(c1 == c2); <span class="comment">//true</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * c1 == c2 执行结果为true 说明泛型编译之后是去泛型化的</span></span><br><span class="line"><span class="comment">         * 泛型的作用可以理解为；Java中泛型的存在是为了防止输入错误，且只在编译阶段有效</span></span><br><span class="line"><span class="comment">         * **************************************************************************</span></span><br><span class="line"><span class="comment">         * 上面的例子 list2中，泛型为String，直接添加strings.add(100); 编译报错</span></span><br><span class="line"><span class="comment">         * 反射都是发生在编译之后的操作,利用反射的这一作用，证明泛型在编译之后时去泛型化的</span></span><br><span class="line"><span class="comment">         * 利用反射绕过编译，实现list2 也能执行add(100)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;list2添加100之前元素个数：&quot;</span> + list2.size());  <span class="comment">// 1</span></span><br><span class="line">            <span class="comment">//使用方法反射 add为list2的方法 Object.class 为参数类型</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">c2Method</span> <span class="operator">=</span> c2.getMethod(<span class="string">&quot;add&quot;</span>, Object.class);</span><br><span class="line">            c2Method.invoke(list2, <span class="number">100</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;list2添加100之后元素个数：&quot;</span> + list2.size()); <span class="comment">// 2</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 这个时候list2就不能用String类型来遍历了</span></span><br><span class="line"><span class="comment">             * 会报java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String</span></span><br><span class="line"><span class="comment">             * 要用所有共同父类Object</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">//遍历 注意这里是Object不是String</span></span><br><span class="line">            <span class="keyword">for</span> (Object str : list2</span><br><span class="line">            ) &#123;</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反射 </tag>
            
            <tag> 泛型 </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-方法反射的基本操作</title>
      <link href="/2020/09/21/java-%E6%96%B9%E6%B3%95%E5%8F%8D%E5%B0%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/09/21/java-%E6%96%B9%E6%B3%95%E5%8F%8D%E5%B0%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassDemo2</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/9/21 10:37</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 要获取一个方法，就是获取一个类的信息，要获取类，就要先获取该类的类类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">A</span>&gt; aClass = a.getClass();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取方法</span></span><br><span class="line"><span class="comment">         * getMethod()获取的时所有public的方法</span></span><br><span class="line"><span class="comment">         * getDelcaredMethod()获取的时自己声明的方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">aClassDeclaredMethod</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;print&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;<span class="type">int</span>.class, <span class="type">int</span>.class&#125;);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 方法的发射</span></span><br><span class="line"><span class="comment">             * 见到参数中出现...可以使用该类型的数组形式或者直接参数形式</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">//正常调用 a.print();</span></span><br><span class="line">            aClassDeclaredMethod.invoke(a, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="number">1</span>, <span class="number">1</span>&#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;========================&quot;</span>);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;print&quot;</span>, String.class, String.class);</span><br><span class="line">            method.invoke(a, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;Word&quot;</span>);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 无参调用也是两种方式，</span></span><br><span class="line"><span class="comment">             * 方式一：getMethod(&quot;方法名&quot;,&quot;new Class[]&#123;&#125;&quot;)</span></span><br><span class="line"><span class="comment">             * 方式二：getMethod(&quot;方法名&quot;)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">priMethod</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;print&quot;</span>);</span><br><span class="line">            priMethod.invoke(a);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This No Param Method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">        System.out.println(a.toUpperCase() + <span class="string">&quot;,&quot;</span> + b.toLowerCase());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 方法反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wordpress:Briefly unavailable for scheduled maintenance. Check back in a minute.</title>
      <link href="/2020/09/18/wordpressbriefly-unavailable-for-scheduled-maintenance-check-back-in-a-minute/"/>
      <url>/2020/09/18/wordpressbriefly-unavailable-for-scheduled-maintenance-check-back-in-a-minute/</url>
      
        <content type="html"><![CDATA[<h3 id="场景描述：Wordpress布置网站，在升级插件时升级失败，导致网站所有内容无法访问"><a href="#场景描述：Wordpress布置网站，在升级插件时升级失败，导致网站所有内容无法访问" class="headerlink" title="场景描述：Wordpress布置网站，在升级插件时升级失败，导致网站所有内容无法访问"></a>场景描述：Wordpress布置网站，在升级插件时升级失败，导致网站所有内容无法访问</h3><p><strong>访问网站出现：</strong>Briefly unavailable for scheduled maintenance. Check back in a minute.</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>通过SSH或者FTP登陆到wordpress安装的服务器，目录切换到网站的目录下，默认：&#x2F;www&#x2F;wwwroot&#x2F;网站名，然后执行命令：ll -a ，显示所有文件包含隐藏的，找到**.maintenance **文件然后删除即可</p><h4 id="ssh链接删除方法：rm-rf-maintenance；"><a href="#ssh链接删除方法：rm-rf-maintenance；" class="headerlink" title="ssh链接删除方法：rm -rf .maintenance；"></a>ssh链接删除方法：rm -rf .maintenance；</h4><h4 id="ftp链接删除方法：直接右键删除即可"><a href="#ftp链接删除方法：直接右键删除即可" class="headerlink" title="ftp链接删除方法：直接右键删除即可"></a>ftp链接删除方法：直接右键删除即可</h4>]]></content>
      
      
      <categories>
          
          <category> Wordpress </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Class工具类-获取类/成员变量/构造函数</title>
      <link href="/2020/09/17/class%E5%B7%A5%E5%85%B7%E7%B1%BB-%E8%8E%B7%E5%8F%96%E7%B1%BB%E7%9A%84%E4%BF%A1%E6%81%AF/"/>
      <url>/2020/09/17/class%E5%B7%A5%E5%85%B7%E7%B1%BB-%E8%8E%B7%E5%8F%96%E7%B1%BB%E7%9A%84%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: www.itze.cn</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2020/9/17 16:08</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Email</span>: 814565718@qq.com</span></span><br><span class="line"><span class="comment">     * 打印类的信息，包括类的成员函数，变量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 该对象所属类的信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printClassMessage</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="comment">//获取类的信息，首先获取类的类类型</span></span><br><span class="line">        <span class="comment">//参数传递的是什么类型的对象，objectClass就是什么类型</span></span><br><span class="line">        Class&lt;?&gt; objectClass = object.getClass();</span><br><span class="line">        <span class="comment">//获取类的名称</span></span><br><span class="line">        System.out.println(<span class="string">&quot;类的名称：&quot;</span> + objectClass.getName());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Method类</span></span><br><span class="line"><span class="comment">         * 一个成员方法就是一个Method对象</span></span><br><span class="line"><span class="comment">         * getMethods();获取的是所有public函数的对象，包括继承的父类的</span></span><br><span class="line"><span class="comment">         * getDeclaredMethods();获取的是所有自己声明的方法，所有权限的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Method[] methods = objectClass.getMethods();</span><br><span class="line">        Method[] declaredMethods = objectClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">            <span class="comment">//得到返回值类型的类类型</span></span><br><span class="line">            Class&lt;?&gt; returnType = methods[i].getReturnType();</span><br><span class="line">            System.out.print(<span class="string">&quot;方法返回类型：&quot;</span> + returnType.getName() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">//得到方法名称</span></span><br><span class="line">            System.out.println(<span class="string">&quot;方法名称：&quot;</span>+methods[i].getName()+<span class="string">&quot;()&quot;</span>);</span><br><span class="line">            <span class="comment">//获取参数类型---得到的是参数列表的类型的类类型[int.class,String.class]</span></span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = methods[i].getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; param:parameterTypes</span><br><span class="line">                 ) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;参数类型：&quot;</span>+param.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 成员变量也是对象</span></span><br><span class="line"><span class="comment">         * java.lang.reflect.Field</span></span><br><span class="line"><span class="comment">         * Field封装了关于成员变量的操作</span></span><br><span class="line"><span class="comment">         * getFields()获取的是所有public的成员变量信息</span></span><br><span class="line"><span class="comment">         * getDeclaredFields获取的是该类自己声明的成员变量信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Field[] declaredFields = objectClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : declaredFields</span><br><span class="line">            ) &#123;</span><br><span class="line">            <span class="comment">//得到成员变量的类型的类类型</span></span><br><span class="line">            Class&lt;?&gt; type = field.getType();</span><br><span class="line">            <span class="type">String</span> <span class="variable">typeName</span> <span class="operator">=</span> type.getName();</span><br><span class="line">            <span class="comment">//得到成员变量的名称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> field.getName();</span><br><span class="line">            System.out.println(<span class="string">&quot;成员变量类型：&quot;</span> + typeName + <span class="string">&quot; 成员变量值：&quot;</span> + fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取构造函数信息</span></span><br><span class="line"><span class="comment">         * 调用方法类名.方法名</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printConMessage</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">            Class&lt;?&gt; objectClass = object.getClass();</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 构造函数也是对象</span></span><br><span class="line"><span class="comment">             * java.lang.Constructor中封装了函数信息</span></span><br><span class="line"><span class="comment">             * getDeclaredConstructors()获取自己生成的构造函数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Constructor&lt;?&gt;[] declaredConstructors = objectClass.getDeclaredConstructors();</span><br><span class="line">            <span class="keyword">for</span> (Constructor con : declaredConstructors</span><br><span class="line">                ) &#123;</span><br><span class="line">                System.out.print(con.getName() + <span class="string">&quot;(&quot;</span>);</span><br><span class="line">                <span class="comment">//获取构造函数的参数列表，得到的是参数列表的类类型</span></span><br><span class="line">                Class[] parameterTypes = con.getParameterTypes();</span><br><span class="line">                <span class="keyword">for</span> (Class par : parameterTypes</span><br><span class="line">                ) &#123;</span><br><span class="line">                    System.out.print(par.getName() + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//任何类型的可以</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    ClassUtil.printClassMessage(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取类的信息结果部分截图"><a href="#获取类的信息结果部分截图" class="headerlink" title="获取类的信息结果部分截图"></a>获取类的信息结果部分截图</h3><p><img src="https://www.itze.cn/wp-content/uploads/2020/09/Class%E5%B7%A5%E5%85%B7%E7%B1%BB%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png"></p><h3 id="获取成员变量输出结果截图"><a href="#获取成员变量输出结果截图" class="headerlink" title="获取成员变量输出结果截图"></a>获取成员变量输出结果截图</h3><p><img src="https://www.itze.cn/wp-content/uploads/2020/09/%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png"></p><h3 id="获取构造函数输出结果截图"><a href="#获取构造函数输出结果截图" class="headerlink" title="获取构造函数输出结果截图"></a>获取构造函数输出结果截图</h3><p><img src="https://www.itze.cn/wp-content/uploads/2020/09/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins发布项目[项目已经配置完成的情况下]</title>
      <link href="/2020/09/16/jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E9%A1%B9%E7%9B%AE%E5%B7%B2%E7%BB%8F%E9%85%8D%E7%BD%AE%E5%AE%8C%E6%88%90%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B/"/>
      <url>/2020/09/16/jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E9%A1%B9%E7%9B%AE%E5%B7%B2%E7%BB%8F%E9%85%8D%E7%BD%AE%E5%AE%8C%E6%88%90%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="场景描述：在Jenkins已经配置完成的情况下，如何简单的构建发布项目"><a href="#场景描述：在Jenkins已经配置完成的情况下，如何简单的构建发布项目" class="headerlink" title="场景描述：在Jenkins已经配置完成的情况下，如何简单的构建发布项目"></a>场景描述：在Jenkins已经配置完成的情况下，如何简单的构建发布项目</h3><p><strong>1. 点击需要构建发布的项目</strong> <img src="https://www.itze.cn/wp-content/uploads/2020/09/Jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE1.png"> <strong>2. 点击左边的Build Now 立即构建</strong> <img src="https://www.itze.cn/wp-content/uploads/2020/09/Jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE2-e1600225762217.png"> <strong>3. 点击控制台输出查看构建日志</strong> <img src="https://www.itze.cn/wp-content/uploads/2020/09/Jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE3.png"> <strong>4. 最后出现SUCCESS即可，构建发布成功</strong> <img src="https://www.itze.cn/wp-content/uploads/2020/09/Jenkins%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE4.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Jenkins </tag>
            
            <tag> 自动发布 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ABOUT</title>
      <link href="/2020/09/09/about/"/>
      <url>/2020/09/09/about/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微博</title>
      <link href="/2020/09/09/service/"/>
      <url>/2020/09/09/service/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IT知识库</title>
      <link href="/2020/09/09/%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/09/09/%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>首页</title>
      <link href="/2020/09/09/%E9%A6%96%E9%A1%B5/"/>
      <url>/2020/09/09/%E9%A6%96%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>layui在线文档</title>
      <link href="/layui%E5%9C%A8%E7%BA%BF%E6%96%87%E6%A1%A3/index.html"/>
      <url>/layui%E5%9C%A8%E7%BA%BF%E6%96%87%E6%A1%A3/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>隐私政策</title>
      <link href="/privacy-policy/index.html"/>
      <url>/privacy-policy/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="我们是谁"><a href="#我们是谁" class="headerlink" title="我们是谁"></a>我们是谁</h2><p>我们的站点地址是：<a href="http://www.itze.cn./">http://www.itze.cn。</a></p><h2 id="我们收集何种及为何收集个人数据"><a href="#我们收集何种及为何收集个人数据" class="headerlink" title="我们收集何种及为何收集个人数据"></a>我们收集何种及为何收集个人数据</h2><h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><p>当访客留下评论时，我们会收集评论表单所显示的数据，和访客的IP地址及浏览器的user agent字符串来帮助检查垃圾评论。</p><p>由您的电子邮件地址所生成的匿名化字符串（又称为哈希）可能会被提供给Gravatar服务确认您是否有使用该服务。Gravatar服务的隐私政策在此：<a href="https://automattic.com/privacy/%E3%80%82%E5%9C%A8%E6%82%A8%E7%9A%84%E8%AF%84%E8%AE%BA%E8%8E%B7%E6%89%B9%E5%87%86%E5%90%8E%EF%BC%8C%E6%82%A8%E7%9A%84%E8%B5%84%E6%96%99%E5%9B%BE%E7%89%87%E5%B0%86%E5%9C%A8%E6%82%A8%E7%9A%84%E8%AF%84%E8%AE%BA%E6%97%81%E5%85%AC%E5%BC%80%E5%B1%95%E7%A4%BA%E3%80%82">https://automattic.com/privacy/。在您的评论获批准后，您的资料图片将在您的评论旁公开展示。</a></p><h3 id="媒体"><a href="#媒体" class="headerlink" title="媒体"></a>媒体</h3><p>如果您向此网站上传图片，您应当避免上传那些有嵌入地理位置信息（EXIF GPS）的图片。此网站的访客将可以下载并提取此网站的图片中的位置信息。</p><h3 id="联系表单"><a href="#联系表单" class="headerlink" title="联系表单"></a>联系表单</h3><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><p>如果您在我们的站点上留下评论，您可以选择用cookies保存您的姓名、电子邮件地址和网站。这是通过让您可以不用在评论时再次填写相关内容而向您提供方便。这些cookies会保留一年。</p><p>如果您访问我们的登录页，我们会设置一个临时的cookie来确认您的浏览器是否接受cookies。此cookie不包含个人数据，且会在您关闭浏览器时被丢弃。</p><p>当您登录时，我们也会设置多个cookies来保存您的登录信息及屏幕显示选项。登录cookies会保留两天，而屏幕显示选项cookies会保留一年。如果您选择了“记住我”，您的登录会保留两周。如果您注销，登录cookies将被移除。</p><p>如果您编辑或发布文章，我们会在您的浏览器中保存一个额外的cookie。这个cookie不包含个人数据而只记录了您刚才编辑的文章的ID。这个小甜饼会保留一天。</p><h3 id="其他站点的嵌入内容"><a href="#其他站点的嵌入内容" class="headerlink" title="其他站点的嵌入内容"></a>其他站点的嵌入内容</h3><p>此站点上的文章可能会包含嵌入的内容（如视频、图像、文章等）。来自其他站点的嵌入内容的行为和您直接访问这些其他站点没有区别。</p><p>这些站点可能会收集关于您的数据、使用cookies、嵌入额外的第三方跟踪程序及监视您与这些嵌入内容的交互，包括在您有这些站点的账户并登录了这些站点时，跟踪您与嵌入内容的交互。</p><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><h2 id="我们与谁共享您的信息"><a href="#我们与谁共享您的信息" class="headerlink" title="我们与谁共享您的信息"></a>我们与谁共享您的信息</h2><h2 id="我们保留多久您的信息"><a href="#我们保留多久您的信息" class="headerlink" title="我们保留多久您的信息"></a>我们保留多久您的信息</h2><p>如果您留下评论，评论和其元数据将被无限期保存。我们这样做以便能识别并自动批准任何后续评论，而不用将这些后续评论加入待审队列。</p><p>对于本网站的注册用户，我们也会保存用户在个人资料中提供的个人信息。所有用户可以在任何时候查看、编辑或删除他们的个人信息（除了不能变更用户名外）、站点管理员也可以查看及编辑那些信息。</p><h2 id="您对您的信息有什么权利"><a href="#您对您的信息有什么权利" class="headerlink" title="您对您的信息有什么权利"></a>您对您的信息有什么权利</h2><p>如果您有此站点的账户，或曾经留下评论，您可以请求我们提供我们所拥有的您的个人数据的导出文件，这也包括了所有您提供给我们的数据。您也可以要求我们抹除所有关于您的个人数据。这不包括我们因管理、法规或安全需要而必须保留的数据。</p><h2 id="我们将您的信息发送到哪"><a href="#我们将您的信息发送到哪" class="headerlink" title="我们将您的信息发送到哪"></a>我们将您的信息发送到哪</h2><p>访客评论可能会被自动垃圾评论监测服务检查。</p><h2 id="您的联系信息"><a href="#您的联系信息" class="headerlink" title="您的联系信息"></a>您的联系信息</h2><h2 id="其他信息"><a href="#其他信息" class="headerlink" title="其他信息"></a>其他信息</h2><h3 id="我们如何保护您的数据"><a href="#我们如何保护您的数据" class="headerlink" title="我们如何保护您的数据"></a>我们如何保护您的数据</h3><h3 id="我们有何种数据泄露处理流程"><a href="#我们有何种数据泄露处理流程" class="headerlink" title="我们有何种数据泄露处理流程"></a>我们有何种数据泄露处理流程</h3><h3 id="我们从哪些第三方接收数据"><a href="#我们从哪些第三方接收数据" class="headerlink" title="我们从哪些第三方接收数据"></a>我们从哪些第三方接收数据</h3><h3 id="我们通过用户数据进行何种自动决策及-x2F-或归纳"><a href="#我们通过用户数据进行何种自动决策及-x2F-或归纳" class="headerlink" title="我们通过用户数据进行何种自动决策及&#x2F;或归纳"></a>我们通过用户数据进行何种自动决策及&#x2F;或归纳</h3><h3 id="行业监管披露要求"><a href="#行业监管披露要求" class="headerlink" title="行业监管披露要求"></a>行业监管披露要求</h3>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
